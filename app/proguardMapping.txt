# compiler: R8
# compiler_version: 8.0.35
# min_api: 17
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"2.1"}
# pg_map_id: b0e33de
# pg_map_hash: SHA-256 b0e33debf52f1220cde33e4004b5ee6391628a38126c8783271bee8a6eed6915
androidx.annotation.Keep -> androidx.annotation.Keep:
# {"id":"sourceFile","fileName":"Keep.java"}
io.noties.markwon.AbstractMarkwonPlugin -> io.noties.markwon.AbstractMarkwonPlugin:
# {"id":"sourceFile","fileName":"AbstractMarkwonPlugin.java"}
    20:20:void <init>() -> <init>
    66:66:void afterRender(org.commonmark.node.Node,io.noties.markwon.MarkwonVisitor) -> afterRender
    76:76:void afterSetText(android.widget.TextView) -> afterSetText
    61:61:void beforeRender(org.commonmark.node.Node) -> beforeRender
    71:71:void beforeSetText(android.widget.TextView,android.text.Spanned) -> beforeSetText
    25:25:void configure(io.noties.markwon.MarkwonPlugin$Registry) -> configure
    40:40:void configureConfiguration(io.noties.markwon.MarkwonConfiguration$Builder) -> configureConfiguration
    30:30:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    50:50:void configureSpansFactory(io.noties.markwon.MarkwonSpansFactory$Builder) -> configureSpansFactory
    35:35:void configureTheme(io.noties.markwon.core.MarkwonTheme$Builder) -> configureTheme
    45:45:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    55:55:java.lang.String processMarkdown(java.lang.String) -> processMarkdown
io.noties.markwon.BlockHandlerDef -> io.noties.markwon.BlockHandlerDef:
# {"id":"sourceFile","fileName":"BlockHandlerDef.java"}
    10:10:void <init>() -> <init>
    18:22:void blockEnd(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> blockEnd
    13:14:void blockStart(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> blockStart
io.noties.markwon.LinkResolver -> io.noties.markwon.LinkResolver:
# {"id":"sourceFile","fileName":"LinkResolver.java"}
io.noties.markwon.LinkResolverDef -> io.noties.markwon.LinkResolverDef:
# {"id":"sourceFile","fileName":"LinkResolverDef.java"}
    14:14:void <init>() -> <init>
    37:43:android.net.Uri parseLink(java.lang.String) -> parseLink
    21:30:void resolve(android.view.View,java.lang.String) -> resolve
io.noties.markwon.Markwon -> io.noties.markwon.Markwon:
# {"id":"sourceFile","fileName":"Markwon.java"}
    25:25:void <init>() -> <init>
    51:53:io.noties.markwon.Markwon$Builder builder(android.content.Context) -> builder
io.noties.markwon.Markwon$Builder -> io.noties.markwon.Markwon$Builder:
# {"id":"sourceFile","fileName":"Markwon.java"}
io.noties.markwon.Markwon$TextSetter -> io.noties.markwon.Markwon$TextSetter:
# {"id":"sourceFile","fileName":"Markwon.java"}
io.noties.markwon.MarkwonBuilderImpl -> io.noties.markwon.MarkwonBuilderImpl:
# {"id":"sourceFile","fileName":"MarkwonBuilderImpl.java"}
    24:35:void <init>(android.content.Context) -> <init>
    88:127:io.noties.markwon.Markwon build() -> build
    134:134:java.util.List preparePlugins(java.util.List) -> preparePlugins
    54:55:io.noties.markwon.Markwon$Builder usePlugin(io.noties.markwon.MarkwonPlugin) -> usePlugin
io.noties.markwon.MarkwonConfiguration -> io.noties.markwon.MarkwonConfiguration:
# {"id":"sourceFile","fileName":"MarkwonConfiguration.java"}
    16:16:void <init>(io.noties.markwon.MarkwonConfiguration$Builder,io.noties.markwon.MarkwonConfiguration$1) -> <init>
    34:42:void <init>(io.noties.markwon.MarkwonConfiguration$Builder) -> <init>
    51:51:io.noties.markwon.image.AsyncDrawableLoader asyncDrawableLoader() -> asyncDrawableLoader
    69:69:io.noties.markwon.image.destination.ImageDestinationProcessor imageDestinationProcessor() -> imageDestinationProcessor
    74:74:io.noties.markwon.image.ImageSizeResolver imageSizeResolver() -> imageSizeResolver
    61:61:io.noties.markwon.LinkResolver linkResolver() -> linkResolver
    82:82:io.noties.markwon.MarkwonSpansFactory spansFactory() -> spansFactory
    56:56:io.noties.markwon.syntax.SyntaxHighlight syntaxHighlight() -> syntaxHighlight
    46:46:io.noties.markwon.core.MarkwonTheme theme() -> theme
io.noties.markwon.MarkwonConfiguration$1 -> io.noties.markwon.MarkwonConfiguration$1:
# {"id":"sourceFile","fileName":"MarkwonConfiguration.java"}
io.noties.markwon.MarkwonConfiguration$Builder -> io.noties.markwon.MarkwonConfiguration$Builder:
# {"id":"sourceFile","fileName":"MarkwonConfiguration.java"}
    97:98:void <init>() -> <init>
    86:86:io.noties.markwon.core.MarkwonTheme access$000(io.noties.markwon.MarkwonConfiguration$Builder) -> access$000
    86:86:io.noties.markwon.image.AsyncDrawableLoader access$100(io.noties.markwon.MarkwonConfiguration$Builder) -> access$100
    86:86:io.noties.markwon.syntax.SyntaxHighlight access$200(io.noties.markwon.MarkwonConfiguration$Builder) -> access$200
    86:86:io.noties.markwon.LinkResolver access$300(io.noties.markwon.MarkwonConfiguration$Builder) -> access$300
    86:86:io.noties.markwon.image.destination.ImageDestinationProcessor access$400(io.noties.markwon.MarkwonConfiguration$Builder) -> access$400
    86:86:io.noties.markwon.image.ImageSizeResolver access$500(io.noties.markwon.MarkwonConfiguration$Builder) -> access$500
    86:86:io.noties.markwon.MarkwonSpansFactory access$600(io.noties.markwon.MarkwonConfiguration$Builder) -> access$600
    105:106:io.noties.markwon.MarkwonConfiguration$Builder asyncDrawableLoader(io.noties.markwon.image.AsyncDrawableLoader) -> asyncDrawableLoader
    144:169:io.noties.markwon.MarkwonConfiguration build(io.noties.markwon.core.MarkwonTheme,io.noties.markwon.MarkwonSpansFactory) -> build
io.noties.markwon.MarkwonImpl -> io.noties.markwon.MarkwonImpl:
# {"id":"sourceFile","fileName":"MarkwonImpl.java"}
    44:52:void <init>(android.widget.TextView$BufferType,io.noties.markwon.Markwon$TextSetter,org.commonmark.parser.Parser,io.noties.markwon.MarkwonVisitorFactory,io.noties.markwon.MarkwonConfiguration,java.util.List,boolean) -> <init>
    59:63:org.commonmark.node.Node parse(java.lang.String) -> parse
    70:91:android.text.Spanned render(org.commonmark.node.Node) -> render
    119:143:void setParsedMarkdown(android.widget.TextView,android.text.Spanned) -> setParsedMarkdown
    97:108:android.text.Spanned toMarkdown(java.lang.String) -> toMarkdown
io.noties.markwon.MarkwonPlugin -> io.noties.markwon.MarkwonPlugin:
# {"id":"sourceFile","fileName":"MarkwonPlugin.java"}
io.noties.markwon.MarkwonPlugin$Action -> io.noties.markwon.MarkwonPlugin$Action:
# {"id":"sourceFile","fileName":"MarkwonPlugin.java"}
io.noties.markwon.MarkwonPlugin$Registry -> io.noties.markwon.MarkwonPlugin$Registry:
# {"id":"sourceFile","fileName":"MarkwonPlugin.java"}
io.noties.markwon.MarkwonSpansFactory -> io.noties.markwon.MarkwonSpansFactory:
# {"id":"sourceFile","fileName":"MarkwonSpansFactory.java"}
io.noties.markwon.MarkwonSpansFactory$Builder -> io.noties.markwon.MarkwonSpansFactory$Builder:
# {"id":"sourceFile","fileName":"MarkwonSpansFactory.java"}
io.noties.markwon.MarkwonSpansFactoryImpl -> io.noties.markwon.MarkwonSpansFactoryImpl:
# {"id":"sourceFile","fileName":"MarkwonSpansFactoryImpl.java"}
    21:23:void <init>(java.util.Map) -> <init>
    28:28:io.noties.markwon.SpanFactory get(java.lang.Class) -> get
    34:38:io.noties.markwon.SpanFactory require(java.lang.Class) -> require
io.noties.markwon.MarkwonSpansFactoryImpl$BuilderImpl -> io.noties.markwon.MarkwonSpansFactoryImpl$BuilderImpl:
# {"id":"sourceFile","fileName":"MarkwonSpansFactoryImpl.java"}
    41:43:void <init>() -> <init>
    122:122:io.noties.markwon.MarkwonSpansFactory build() -> build
    49:54:io.noties.markwon.MarkwonSpansFactory$Builder setFactory(java.lang.Class,io.noties.markwon.SpanFactory) -> setFactory
io.noties.markwon.MarkwonVisitor -> io.noties.markwon.MarkwonVisitor:
# {"id":"sourceFile","fileName":"MarkwonVisitor.java"}
io.noties.markwon.MarkwonVisitor$BlockHandler -> io.noties.markwon.MarkwonVisitor$BlockHandler:
# {"id":"sourceFile","fileName":"MarkwonVisitor.java"}
io.noties.markwon.MarkwonVisitor$Builder -> io.noties.markwon.MarkwonVisitor$Builder:
# {"id":"sourceFile","fileName":"MarkwonVisitor.java"}
io.noties.markwon.MarkwonVisitor$NodeVisitor -> io.noties.markwon.MarkwonVisitor$NodeVisitor:
# {"id":"sourceFile","fileName":"MarkwonVisitor.java"}
io.noties.markwon.MarkwonVisitorFactory -> io.noties.markwon.MarkwonVisitorFactory:
# {"id":"sourceFile","fileName":"MarkwonVisitorFactory.java"}
    8:8:void <init>() -> <init>
    17:17:io.noties.markwon.MarkwonVisitorFactory create(io.noties.markwon.MarkwonVisitor$Builder,io.noties.markwon.MarkwonConfiguration) -> create
io.noties.markwon.MarkwonVisitorFactory$1 -> io.noties.markwon.MarkwonVisitorFactory$1:
# {"id":"sourceFile","fileName":"MarkwonVisitorFactory.java"}
    17:17:void <init>(io.noties.markwon.MarkwonVisitor$Builder,io.noties.markwon.MarkwonConfiguration) -> <init>
    21:21:io.noties.markwon.MarkwonVisitor create() -> create
io.noties.markwon.MarkwonVisitorImpl -> io.noties.markwon.MarkwonVisitorImpl:
# {"id":"sourceFile","fileName":"MarkwonVisitorImpl.java"}
    56:62:void <init>(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.SpannableBuilder,java.util.Map,io.noties.markwon.MarkwonVisitor$BlockHandler) -> <init>
    283:284:void blockEnd(org.commonmark.node.Node) -> blockEnd
    278:279:void blockStart(org.commonmark.node.Node) -> blockStart
    204:204:io.noties.markwon.SpannableBuilder builder() -> builder
    192:192:io.noties.markwon.MarkwonConfiguration configuration() -> configuration
    226:230:void ensureNewLine() -> ensureNewLine
    234:235:void forceNewLine() -> forceNewLine
    221:221:boolean hasNext(org.commonmark.node.Node) -> hasNext
    239:239:int length() -> length
    198:198:io.noties.markwon.RenderProps renderProps() -> renderProps
    244:245:void setSpans(int,java.lang.Object) -> setSpans
    255:256:void setSpansForNode(org.commonmark.node.Node,int) -> setSpansForNode
    260:261:void setSpansForNode(java.lang.Class,int) -> setSpansForNode
    265:266:void setSpansForNodeOptional(org.commonmark.node.Node,int) -> setSpansForNodeOptional
    270:274:void setSpansForNodeOptional(java.lang.Class,int) -> setSpansForNodeOptional
    66:67:void visit(org.commonmark.node.BlockQuote) -> visit
    71:72:void visit(org.commonmark.node.BulletList) -> visit
    76:77:void visit(org.commonmark.node.Code) -> visit
    81:82:void visit(org.commonmark.node.Document) -> visit
    86:87:void visit(org.commonmark.node.Emphasis) -> visit
    91:92:void visit(org.commonmark.node.FencedCodeBlock) -> visit
    96:97:void visit(org.commonmark.node.HardLineBreak) -> visit
    101:102:void visit(org.commonmark.node.Heading) -> visit
    106:107:void visit(org.commonmark.node.ThematicBreak) -> visit
    111:112:void visit(org.commonmark.node.HtmlInline) -> visit
    116:117:void visit(org.commonmark.node.HtmlBlock) -> visit
    121:122:void visit(org.commonmark.node.Image) -> visit
    126:127:void visit(org.commonmark.node.IndentedCodeBlock) -> visit
    131:132:void visit(org.commonmark.node.Link) -> visit
    136:137:void visit(org.commonmark.node.ListItem) -> visit
    141:142:void visit(org.commonmark.node.OrderedList) -> visit
    146:147:void visit(org.commonmark.node.Paragraph) -> visit
    151:152:void visit(org.commonmark.node.SoftLineBreak) -> visit
    156:157:void visit(org.commonmark.node.StrongEmphasis) -> visit
    161:162:void visit(org.commonmark.node.Text) -> visit
    166:167:void visit(org.commonmark.node.LinkReferenceDefinition) -> visit
    171:172:void visit(org.commonmark.node.CustomBlock) -> visit
    176:177:void visit(org.commonmark.node.CustomNode) -> visit
    181:187:void visit(org.commonmark.node.Node) -> visit
    209:217:void visitChildren(org.commonmark.node.Node) -> visitChildren
io.noties.markwon.MarkwonVisitorImpl$BuilderImpl -> io.noties.markwon.MarkwonVisitorImpl$BuilderImpl:
# {"id":"sourceFile","fileName":"MarkwonVisitorImpl.java"}
    286:288:void <init>() -> <init>
    320:329:io.noties.markwon.MarkwonVisitor build(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> build
    301:306:io.noties.markwon.MarkwonVisitor$Builder on(java.lang.Class,io.noties.markwon.MarkwonVisitor$NodeVisitor) -> on
io.noties.markwon.Prop -> io.noties.markwon.Prop:
# {"id":"sourceFile","fileName":"Prop.java"}
    29:31:void <init>(java.lang.String) -> <init>
    67:72:boolean equals(java.lang.Object) -> equals
    40:40:java.lang.Object get(io.noties.markwon.RenderProps) -> get
    45:45:java.lang.Object get(io.noties.markwon.RenderProps,java.lang.Object) -> get
    77:77:int hashCode() -> hashCode
    24:24:io.noties.markwon.Prop of(java.lang.String) -> of
    50:54:java.lang.Object require(io.noties.markwon.RenderProps) -> require
    58:59:void set(io.noties.markwon.RenderProps,java.lang.Object) -> set
    82:82:java.lang.String toString() -> toString
io.noties.markwon.RegistryImpl -> io.noties.markwon.RegistryImpl:
# {"id":"sourceFile","fileName":"RegistryImpl.java"}
    20:24:void <init>(java.util.List) -> <init>
    52:79:void configure(io.noties.markwon.MarkwonPlugin) -> configure
    108:114:io.noties.markwon.MarkwonPlugin find(java.util.List,java.lang.Class) -> find
    87:101:io.noties.markwon.MarkwonPlugin get(java.lang.Class) -> get
    41:44:java.util.List process() -> process
    29:29:io.noties.markwon.MarkwonPlugin require(java.lang.Class) -> require
    36:37:void require(java.lang.Class,io.noties.markwon.MarkwonPlugin$Action) -> require
io.noties.markwon.RenderProps -> io.noties.markwon.RenderProps:
# {"id":"sourceFile","fileName":"RenderProps.java"}
io.noties.markwon.RenderPropsImpl -> io.noties.markwon.RenderPropsImpl:
# {"id":"sourceFile","fileName":"RenderPropsImpl.java"}
    12:14:void <init>() -> <init>
    20:20:java.lang.Object get(io.noties.markwon.Prop) -> get
    26:31:java.lang.Object get(io.noties.markwon.Prop,java.lang.Object) -> get
    36:41:void set(io.noties.markwon.Prop,java.lang.Object) -> set
io.noties.markwon.SpanFactory -> io.noties.markwon.SpanFactory:
# {"id":"sourceFile","fileName":"SpanFactory.java"}
io.noties.markwon.SpannableBuilder -> io.noties.markwon.SpannableBuilder:
# {"id":"sourceFile","fileName":"SpannableBuilder.java"}
    63:64:void <init>() -> <init>
    60:69:void <init>(java.lang.CharSequence) -> <init>
    27:27:java.lang.Appendable append(char) -> append
    27:27:java.lang.Appendable append(java.lang.CharSequence) -> append
    27:27:java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    79:80:io.noties.markwon.SpannableBuilder append(java.lang.String) -> append
    86:87:io.noties.markwon.SpannableBuilder append(char) -> append
    94:98:io.noties.markwon.SpannableBuilder append(java.lang.CharSequence) -> append
    108:113:io.noties.markwon.SpannableBuilder append(java.lang.CharSequence,int,int) -> append
    155:155:char charAt(int) -> charAt
    342:378:void copySpans(int,java.lang.CharSequence) -> copySpans
    219:253:java.util.List getSpans(int,int) -> getSpans
    51:51:boolean isPositionValid(int,int,int) -> isPositionValid
    257:257:char lastChar() -> lastChar
    150:150:int length() -> length
    266:284:java.lang.CharSequence removeFromEnd(int) -> removeFromEnd
    144:145:io.noties.markwon.SpannableBuilder setSpan(java.lang.Object,int,int,int) -> setSpan
    34:46:void setSpans(io.noties.markwon.SpannableBuilder,java.lang.Object,int,int) -> setSpans
    415:425:void setSpansInternal(io.noties.markwon.SpannableBuilder,java.lang.Object,int,int) -> setSpansInternal
    318:326:android.text.SpannableStringBuilder spannableStringBuilder() -> spannableStringBuilder
    167:202:java.lang.CharSequence subSequence(int,int) -> subSequence
    290:290:java.lang.String toString() -> toString
io.noties.markwon.SpannableBuilder$Span -> io.noties.markwon.SpannableBuilder$Span:
# {"id":"sourceFile","fileName":"SpannableBuilder.java"}
    390:395:void <init>(java.lang.Object,int,int,int) -> <init>
io.noties.markwon.SpannableBuilder$SpannableStringBuilderReversed -> io.noties.markwon.SpannableBuilder$SpannableStringBuilderReversed:
# {"id":"sourceFile","fileName":"SpannableBuilder.java"}
    403:404:void <init>(java.lang.CharSequence) -> <init>
io.noties.markwon.core.CorePlugin -> io.noties.markwon.core.CorePlugin:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    116:122:void <init>() -> <init>
    64:64:java.util.List access$000(io.noties.markwon.core.CorePlugin) -> access$000
    64:64:int access$100(org.commonmark.node.Node) -> access$100
    64:64:boolean access$200(org.commonmark.node.Paragraph) -> access$200
    143:144:io.noties.markwon.core.CorePlugin addOnTextAddedListener(io.noties.markwon.core.CorePlugin$OnTextAddedListener) -> addOnTextAddedListener
    205:208:void afterSetText(android.widget.TextView) -> afterSetText
    189:197:void beforeSetText(android.widget.TextView,android.text.Spanned) -> beforeSetText
    254:268:void blockQuote(io.noties.markwon.MarkwonVisitor$Builder) -> blockQuote
    382:383:void bulletList(io.noties.markwon.MarkwonVisitor$Builder) -> bulletList
    271:287:void code(io.noties.markwon.MarkwonVisitor$Builder) -> code
    172:185:void configureSpansFactory(io.noties.markwon.MarkwonSpansFactory$Builder) -> configureSpansFactory
    149:166:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    95:95:io.noties.markwon.core.CorePlugin create() -> create
    243:251:void emphasis(io.noties.markwon.MarkwonVisitor$Builder) -> emphasis
    290:296:void fencedCodeBlock(io.noties.markwon.MarkwonVisitor$Builder) -> fencedCodeBlock
    487:493:void hardLineBreak(io.noties.markwon.MarkwonVisitor$Builder) -> hardLineBreak
    459:475:void heading(io.noties.markwon.MarkwonVisitor$Builder) -> heading
    311:352:void image(io.noties.markwon.MarkwonVisitor$Builder) -> image
    299:305:void indentedCodeBlock(io.noties.markwon.MarkwonVisitor$Builder) -> indentedCodeBlock
    522:530:boolean isInTightList(org.commonmark.node.Paragraph) -> isInTightList
    534:548:void link(io.noties.markwon.MarkwonVisitor$Builder) -> link
    390:425:void listItem(io.noties.markwon.MarkwonVisitor$Builder) -> listItem
    428:436:int listLevel(org.commonmark.node.Node) -> listLevel
    386:387:void orderedList(io.noties.markwon.MarkwonVisitor$Builder) -> orderedList
    496:519:void paragraph(io.noties.markwon.MarkwonVisitor$Builder) -> paragraph
    478:484:void softLineBreak(io.noties.markwon.MarkwonVisitor$Builder) -> softLineBreak
    232:240:void strongEmphasis(io.noties.markwon.MarkwonVisitor$Builder) -> strongEmphasis
    211:229:void text(io.noties.markwon.MarkwonVisitor$Builder) -> text
    440:456:void thematicBreak(io.noties.markwon.MarkwonVisitor$Builder) -> thematicBreak
    361:379:void visitCodeBlock(io.noties.markwon.MarkwonVisitor,java.lang.String,java.lang.String,org.commonmark.node.Node) -> visitCodeBlock
io.noties.markwon.core.CorePlugin$1 -> io.noties.markwon.core.CorePlugin$1:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    211:211:void <init>(io.noties.markwon.core.CorePlugin) -> <init>
    211:211:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    215:227:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Text) -> visit
io.noties.markwon.core.CorePlugin$10 -> io.noties.markwon.core.CorePlugin$10:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    440:440:void <init>() -> <init>
    440:440:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    444:454:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.ThematicBreak) -> visit
io.noties.markwon.core.CorePlugin$11 -> io.noties.markwon.core.CorePlugin$11:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    459:459:void <init>() -> <init>
    459:459:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    463:473:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Heading) -> visit
io.noties.markwon.core.CorePlugin$12 -> io.noties.markwon.core.CorePlugin$12:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    478:478:void <init>() -> <init>
    478:478:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    481:482:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.SoftLineBreak) -> visit
io.noties.markwon.core.CorePlugin$13 -> io.noties.markwon.core.CorePlugin$13:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    487:487:void <init>() -> <init>
    487:487:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    490:491:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.HardLineBreak) -> visit
io.noties.markwon.core.CorePlugin$14 -> io.noties.markwon.core.CorePlugin$14:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    496:496:void <init>() -> <init>
    496:496:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    500:517:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Paragraph) -> visit
io.noties.markwon.core.CorePlugin$15 -> io.noties.markwon.core.CorePlugin$15:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    534:534:void <init>() -> <init>
    534:534:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    538:546:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Link) -> visit
io.noties.markwon.core.CorePlugin$2 -> io.noties.markwon.core.CorePlugin$2:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    232:232:void <init>() -> <init>
    232:232:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    235:238:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.StrongEmphasis) -> visit
io.noties.markwon.core.CorePlugin$3 -> io.noties.markwon.core.CorePlugin$3:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    243:243:void <init>() -> <init>
    243:243:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    246:249:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Emphasis) -> visit
io.noties.markwon.core.CorePlugin$4 -> io.noties.markwon.core.CorePlugin$4:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    254:254:void <init>() -> <init>
    254:254:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    258:266:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.BlockQuote) -> visit
io.noties.markwon.core.CorePlugin$5 -> io.noties.markwon.core.CorePlugin$5:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    271:271:void <init>() -> <init>
    271:271:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    275:285:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Code) -> visit
io.noties.markwon.core.CorePlugin$6 -> io.noties.markwon.core.CorePlugin$6:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    290:290:void <init>() -> <init>
    290:290:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    293:294:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.FencedCodeBlock) -> visit
io.noties.markwon.core.CorePlugin$7 -> io.noties.markwon.core.CorePlugin$7:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    299:299:void <init>() -> <init>
    299:299:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    302:303:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.IndentedCodeBlock) -> visit
io.noties.markwon.core.CorePlugin$8 -> io.noties.markwon.core.CorePlugin$8:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    311:311:void <init>() -> <init>
    311:311:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    316:350:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Image) -> visit
io.noties.markwon.core.CorePlugin$9 -> io.noties.markwon.core.CorePlugin$9:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
    390:390:void <init>() -> <init>
    390:390:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    394:423:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.ListItem) -> visit
io.noties.markwon.core.CorePlugin$OnTextAddedListener -> io.noties.markwon.core.CorePlugin$OnTextAddedListener:
# {"id":"sourceFile","fileName":"CorePlugin.java"}
io.noties.markwon.core.CoreProps -> io.noties.markwon.core.CoreProps:
# {"id":"sourceFile","fileName":"CoreProps.java"}
    10:25:void <clinit>() -> <clinit>
io.noties.markwon.core.CoreProps$ListItemType -> io.noties.markwon.core.CoreProps$ListItemType:
# {"id":"sourceFile","fileName":"CoreProps.java"}
    27:29:void <clinit>() -> <clinit>
    27:27:void <init>(java.lang.String,int) -> <init>
    27:27:io.noties.markwon.core.CoreProps$ListItemType valueOf(java.lang.String) -> valueOf
    27:27:io.noties.markwon.core.CoreProps$ListItemType[] values() -> values
io.noties.markwon.core.MarkwonTheme -> io.noties.markwon.core.MarkwonTheme:
# {"id":"sourceFile","fileName":"MarkwonTheme.java"}
    112:112:void <clinit>() -> <clinit>
    190:214:void <init>(io.noties.markwon.core.MarkwonTheme$Builder) -> <init>
    245:252:void applyBlockQuoteStyle(android.graphics.Paint) -> applyBlockQuoteStyle
    334:376:void applyCodeBlockTextStyle(android.graphics.Paint) -> applyCodeBlockTextStyle
    303:325:void applyCodeTextStyle(android.graphics.Paint) -> applyCodeTextStyle
    432:443:void applyHeadingBreakStyle(android.graphics.Paint) -> applyHeadingBreakStyle
    411:428:void applyHeadingTextStyle(android.graphics.Paint,int) -> applyHeadingTextStyle
    220:227:void applyLinkStyle(android.text.TextPaint) -> applyLinkStyle
    230:241:void applyLinkStyle(android.graphics.Paint) -> applyLinkStyle
    271:281:void applyListItemStyle(android.graphics.Paint) -> applyListItemStyle
    447:459:void applyThematicBreakStyle(android.graphics.Paint) -> applyThematicBreakStyle
    93:100:io.noties.markwon.core.MarkwonTheme$Builder builderWithDefaults(android.content.Context) -> builderWithDefaults
    255:255:int getBlockMargin() -> getBlockMargin
    260:265:int getBlockQuoteWidth() -> getBlockQuoteWidth
    285:295:int getBulletWidth(int) -> getBulletWidth
    388:393:int getCodeBackgroundColor(android.graphics.Paint) -> getCodeBackgroundColor
    401:407:int getCodeBlockBackgroundColor(android.graphics.Paint) -> getCodeBlockBackgroundColor
    380:380:int getCodeBlockMargin() -> getCodeBlockMargin
io.noties.markwon.core.MarkwonTheme$Builder -> io.noties.markwon.core.MarkwonTheme$Builder:
# {"id":"sourceFile","fileName":"MarkwonTheme.java"}
    465:489:void <init>() -> <init>
    462:462:int access$000(io.noties.markwon.core.MarkwonTheme$Builder) -> access$000
    462:462:boolean access$100(io.noties.markwon.core.MarkwonTheme$Builder) -> access$100
    462:462:int access$1000(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1000
    462:462:int access$1100(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1100
    462:462:int access$1200(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1200
    462:462:android.graphics.Typeface access$1300(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1300
    462:462:android.graphics.Typeface access$1400(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1400
    462:462:int access$1500(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1500
    462:462:int access$1600(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1600
    462:462:int access$1700(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1700
    462:462:int access$1800(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1800
    462:462:android.graphics.Typeface access$1900(io.noties.markwon.core.MarkwonTheme$Builder) -> access$1900
    462:462:int access$200(io.noties.markwon.core.MarkwonTheme$Builder) -> access$200
    462:462:float[] access$2000(io.noties.markwon.core.MarkwonTheme$Builder) -> access$2000
    462:462:int access$2100(io.noties.markwon.core.MarkwonTheme$Builder) -> access$2100
    462:462:int access$2200(io.noties.markwon.core.MarkwonTheme$Builder) -> access$2200
    462:462:int access$300(io.noties.markwon.core.MarkwonTheme$Builder) -> access$300
    462:462:int access$400(io.noties.markwon.core.MarkwonTheme$Builder) -> access$400
    462:462:int access$500(io.noties.markwon.core.MarkwonTheme$Builder) -> access$500
    462:462:int access$600(io.noties.markwon.core.MarkwonTheme$Builder) -> access$600
    462:462:int access$700(io.noties.markwon.core.MarkwonTheme$Builder) -> access$700
    462:462:int access$800(io.noties.markwon.core.MarkwonTheme$Builder) -> access$800
    462:462:int access$900(io.noties.markwon.core.MarkwonTheme$Builder) -> access$900
    529:530:io.noties.markwon.core.MarkwonTheme$Builder blockMargin(int) -> blockMargin
    535:536:io.noties.markwon.core.MarkwonTheme$Builder blockQuoteWidth(int) -> blockQuoteWidth
    681:681:io.noties.markwon.core.MarkwonTheme build() -> build
    554:555:io.noties.markwon.core.MarkwonTheme$Builder bulletListItemStrokeWidth(int) -> bulletListItemStrokeWidth
    597:598:io.noties.markwon.core.MarkwonTheme$Builder codeBlockMargin(int) -> codeBlockMargin
    633:634:io.noties.markwon.core.MarkwonTheme$Builder headingBreakHeight(int) -> headingBreakHeight
    675:676:io.noties.markwon.core.MarkwonTheme$Builder thematicBreakHeight(int) -> thematicBreakHeight
io.noties.markwon.core.SimpleBlockNodeVisitor -> io.noties.markwon.core.SimpleBlockNodeVisitor:
# {"id":"sourceFile","fileName":"SimpleBlockNodeVisitor.java"}
    16:16:void <init>() -> <init>
    20:31:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
io.noties.markwon.core.factory.BlockQuoteSpanFactory -> io.noties.markwon.core.factory.BlockQuoteSpanFactory:
# {"id":"sourceFile","fileName":"BlockQuoteSpanFactory.java"}
    11:11:void <init>() -> <init>
    15:15:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.CodeBlockSpanFactory -> io.noties.markwon.core.factory.CodeBlockSpanFactory:
# {"id":"sourceFile","fileName":"CodeBlockSpanFactory.java"}
    11:11:void <init>() -> <init>
    15:15:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.CodeSpanFactory -> io.noties.markwon.core.factory.CodeSpanFactory:
# {"id":"sourceFile","fileName":"CodeSpanFactory.java"}
    11:11:void <init>() -> <init>
    15:15:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.EmphasisSpanFactory -> io.noties.markwon.core.factory.EmphasisSpanFactory:
# {"id":"sourceFile","fileName":"EmphasisSpanFactory.java"}
    11:11:void <init>() -> <init>
    15:15:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.HeadingSpanFactory -> io.noties.markwon.core.factory.HeadingSpanFactory:
# {"id":"sourceFile","fileName":"HeadingSpanFactory.java"}
    12:12:void <init>() -> <init>
    16:18:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.LinkSpanFactory -> io.noties.markwon.core.factory.LinkSpanFactory:
# {"id":"sourceFile","fileName":"LinkSpanFactory.java"}
    12:12:void <init>() -> <init>
    16:19:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.ListItemSpanFactory -> io.noties.markwon.core.factory.ListItemSpanFactory:
# {"id":"sourceFile","fileName":"ListItemSpanFactory.java"}
    13:13:void <init>() -> <init>
    24:41:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.StrongEmphasisSpanFactory -> io.noties.markwon.core.factory.StrongEmphasisSpanFactory:
# {"id":"sourceFile","fileName":"StrongEmphasisSpanFactory.java"}
    11:11:void <init>() -> <init>
    15:15:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.factory.ThematicBreakSpanFactory -> io.noties.markwon.core.factory.ThematicBreakSpanFactory:
# {"id":"sourceFile","fileName":"ThematicBreakSpanFactory.java"}
    11:11:void <init>() -> <init>
    15:15:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.core.spans.BlockQuoteSpan -> io.noties.markwon.core.spans.BlockQuoteSpan:
# {"id":"sourceFile","fileName":"BlockQuoteSpan.java"}
    16:21:void <init>(io.noties.markwon.core.MarkwonTheme) -> <init>
    43:61:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    25:25:int getLeadingMargin(boolean) -> getLeadingMargin
io.noties.markwon.core.spans.BulletListItemSpan -> io.noties.markwon.core.spans.BulletListItemSpan:
# {"id":"sourceFile","fileName":"BulletListItemSpan.java"}
    22:24:void <clinit>() -> <clinit>
    28:39:void <init>(io.noties.markwon.core.MarkwonTheme,int) -> <init>
    50:136:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    43:43:int getLeadingMargin(boolean) -> getLeadingMargin
io.noties.markwon.core.spans.CodeBlockSpan -> io.noties.markwon.core.spans.CodeBlockSpan:
# {"id":"sourceFile","fileName":"CodeBlockSpan.java"}
    21:26:void <init>(io.noties.markwon.core.MarkwonTheme) -> <init>
    39:40:void apply(android.text.TextPaint) -> apply
    50:66:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    44:44:int getLeadingMargin(boolean) -> getLeadingMargin
    35:36:void updateDrawState(android.text.TextPaint) -> updateDrawState
    30:31:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.core.spans.CodeSpan -> io.noties.markwon.core.spans.CodeSpan:
# {"id":"sourceFile","fileName":"CodeSpan.java"}
    17:19:void <init>(io.noties.markwon.core.MarkwonTheme) -> <init>
    33:34:void apply(android.text.TextPaint) -> apply
    28:30:void updateDrawState(android.text.TextPaint) -> updateDrawState
    23:24:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.core.spans.EmphasisSpan -> io.noties.markwon.core.spans.EmphasisSpan:
# {"id":"sourceFile","fileName":"EmphasisSpan.java"}
    6:6:void <init>() -> <init>
    15:16:void updateDrawState(android.text.TextPaint) -> updateDrawState
    10:11:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.core.spans.HeadingSpan -> io.noties.markwon.core.spans.HeadingSpan:
# {"id":"sourceFile","fileName":"HeadingSpan.java"}
    20:27:void <init>(io.noties.markwon.core.MarkwonTheme,int) -> <init>
    40:41:void apply(android.text.TextPaint) -> apply
    52:79:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    46:46:int getLeadingMargin(boolean) -> getLeadingMargin
    36:37:void updateDrawState(android.text.TextPaint) -> updateDrawState
    31:32:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.core.spans.LinkSpan -> io.noties.markwon.core.spans.LinkSpan:
# {"id":"sourceFile","fileName":"LinkSpan.java"}
    22:26:void <init>(io.noties.markwon.core.MarkwonTheme,java.lang.String,io.noties.markwon.LinkResolver) -> <init>
    30:31:void onClick(android.view.View) -> onClick
    35:36:void updateDrawState(android.text.TextPaint) -> updateDrawState
io.noties.markwon.core.spans.ObjectsPool -> io.noties.markwon.core.spans.ObjectsPool:
# {"id":"sourceFile","fileName":"ObjectsPool.java"}
    15:17:void <clinit>() -> <clinit>
    28:28:android.graphics.Paint paint() -> paint
    20:20:android.graphics.Rect rect() -> rect
    24:24:android.graphics.RectF rectF() -> rectF
io.noties.markwon.core.spans.OrderedListItemSpan -> io.noties.markwon.core.spans.OrderedListItemSpan:
# {"id":"sourceFile","fileName":"OrderedListItemSpan.java"}
    51:64:void <init>(io.noties.markwon.core.MarkwonTheme,java.lang.String) -> <init>
    76:110:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    69:69:int getLeadingMargin(boolean) -> getLeadingMargin
    31:47:void measure(android.widget.TextView,java.lang.CharSequence) -> measure
io.noties.markwon.core.spans.StrongEmphasisSpan -> io.noties.markwon.core.spans.StrongEmphasisSpan:
# {"id":"sourceFile","fileName":"StrongEmphasisSpan.java"}
    6:6:void <init>() -> <init>
    15:16:void updateDrawState(android.text.TextPaint) -> updateDrawState
    10:11:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.core.spans.TextLayoutSpan -> io.noties.markwon.core.spans.TextLayoutSpan:
# {"id":"sourceFile","fileName":"TextLayoutSpan.java"}
    62:64:void <init>(android.text.Layout) -> <init>
    43:57:void applyTo(android.text.Spannable,android.text.Layout) -> applyTo
    68:68:android.text.Layout layout() -> layout
    30:37:android.text.Layout layoutOf(android.text.Spanned) -> layoutOf
io.noties.markwon.core.spans.TextViewSpan -> io.noties.markwon.core.spans.TextViewSpan:
# {"id":"sourceFile","fileName":"TextViewSpan.java"}
    56:58:void <init>(android.widget.TextView) -> <init>
    37:52:void applyTo(android.text.Spannable,android.widget.TextView) -> applyTo
    62:62:android.widget.TextView textView() -> textView
    29:32:android.widget.TextView textViewOf(android.text.Spanned) -> textViewOf
io.noties.markwon.core.spans.ThematicBreakSpan -> io.noties.markwon.core.spans.ThematicBreakSpan:
# {"id":"sourceFile","fileName":"ThematicBreakSpan.java"}
    16:21:void <init>(io.noties.markwon.core.MarkwonTheme) -> <init>
    31:51:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    25:25:int getLeadingMargin(boolean) -> getLeadingMargin
io.noties.markwon.ext.latex.JLatexAsyncDrawableSpan -> io.noties.markwon.ext.latex.JLatexAsyncDrawableSpan:
# {"id":"sourceFile","fileName":"JLatexAsyncDrawableSpan.java"}
    30:35:void <init>(io.noties.markwon.core.MarkwonTheme,io.noties.markwon.ext.latex.JLatextAsyncDrawable,int) -> <init>
    39:51:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
io.noties.markwon.ext.latex.JLatexBlockImageSizeResolver -> io.noties.markwon.ext.latex.JLatexBlockImageSizeResolver:
# {"id":"sourceFile","fileName":"JLatexBlockImageSizeResolver.java"}
    16:18:void <init>(boolean) -> <init>
    24:48:android.graphics.Rect resolveImageSize(io.noties.markwon.image.AsyncDrawable) -> resolveImageSize
io.noties.markwon.ext.latex.JLatexInlineAsyncDrawableSpan -> io.noties.markwon.ext.latex.JLatexInlineAsyncDrawableSpan:
# {"id":"sourceFile","fileName":"JLatexInlineAsyncDrawableSpan.java"}
    22:24:void <init>(io.noties.markwon.core.MarkwonTheme,io.noties.markwon.ext.latex.JLatextAsyncDrawable,int) -> <init>
    38:59:int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt) -> getSize
io.noties.markwon.ext.latex.JLatexMathBlock -> io.noties.markwon.ext.latex.JLatexMathBlock:
# {"id":"sourceFile","fileName":"JLatexMathBlock.java"}
    5:5:void <init>() -> <init>
    10:10:java.lang.String latex() -> latex
    14:15:void latex(java.lang.String) -> latex
io.noties.markwon.ext.latex.JLatexMathBlockParser -> io.noties.markwon.ext.latex.JLatexMathBlockParser:
# {"id":"sourceFile","fileName":"JLatexMathBlockParser.java"}
    23:31:void <init>(int) -> <init>
    18:18:int access$000(char,java.lang.CharSequence,int,int) -> access$000
    60:62:void addLine(java.lang.CharSequence) -> addLine
    66:67:void closeBlock() -> closeBlock
    111:117:int consume(char,java.lang.CharSequence,int,int) -> consume
    35:35:org.commonmark.node.Block getBlock() -> getBlock
    40:55:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
io.noties.markwon.ext.latex.JLatexMathBlockParser$Factory -> io.noties.markwon.ext.latex.JLatexMathBlockParser$Factory:
# {"id":"sourceFile","fileName":"JLatexMathBlockParser.java"}
    69:69:void <init>() -> <init>
    81:105:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
io.noties.markwon.ext.latex.JLatexMathBlockParserLegacy -> io.noties.markwon.ext.latex.JLatexMathBlockParserLegacy:
# {"id":"sourceFile","fileName":"JLatexMathBlockParserLegacy.java"}
    14:18:void <init>() -> <init>
    40:54:void addLine(java.lang.CharSequence) -> addLine
    58:59:void closeBlock() -> closeBlock
    24:24:org.commonmark.node.Block getBlock() -> getBlock
    30:34:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
io.noties.markwon.ext.latex.JLatexMathBlockParserLegacy$Factory -> io.noties.markwon.ext.latex.JLatexMathBlockParserLegacy$Factory:
# {"id":"sourceFile","fileName":"JLatexMathBlockParserLegacy.java"}
    61:61:void <init>() -> <init>
    66:79:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
io.noties.markwon.ext.latex.JLatexMathInlineProcessor -> io.noties.markwon.ext.latex.JLatexMathInlineProcessor:
# {"id":"sourceFile","fileName":"JLatexMathInlineProcessor.java"}
    16:16:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    27:34:org.commonmark.node.Node parse() -> parse
    20:20:char specialCharacter() -> specialCharacter
io.noties.markwon.ext.latex.JLatexMathNode -> io.noties.markwon.ext.latex.JLatexMathNode:
# {"id":"sourceFile","fileName":"JLatexMathNode.java"}
    8:8:void <init>() -> <init>
    13:13:java.lang.String latex() -> latex
    17:18:void latex(java.lang.String) -> latex
io.noties.markwon.ext.latex.JLatexMathPlugin -> io.noties.markwon.ext.latex.JLatexMathPlugin:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    151:156:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin$Config) -> <init>
    40:40:io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader access$700(io.noties.markwon.ext.latex.JLatexMathPlugin) -> access$700
    40:40:io.noties.markwon.ext.latex.JLatexBlockImageSizeResolver access$800(io.noties.markwon.ext.latex.JLatexMathPlugin) -> access$800
    40:40:io.noties.markwon.image.ImageSizeResolver access$900(io.noties.markwon.ext.latex.JLatexMathPlugin) -> access$900
    186:223:void addBlockVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> addBlockVisitor
    227:259:void addInlineVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> addInlineVisitor
    268:269:void afterSetText(android.widget.TextView) -> afterSetText
    263:264:void beforeSetText(android.widget.TextView,android.text.Spanned) -> beforeSetText
    101:101:io.noties.markwon.ext.latex.JLatexMathPlugin$Builder builder(float) -> builder
    160:165:void configure(io.noties.markwon.MarkwonPlugin$Registry) -> configure
    170:177:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    181:183:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    63:63:io.noties.markwon.ext.latex.JLatexMathPlugin create(float) -> create
    275:275:java.lang.String prepareLatexTextPlaceholder(java.lang.String) -> prepareLatexTextPlaceholder
io.noties.markwon.ext.latex.JLatexMathPlugin$1 -> io.noties.markwon.ext.latex.JLatexMathPlugin$1:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    190:190:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin) -> <init>
    190:190:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    194:221:void visit(io.noties.markwon.MarkwonVisitor,io.noties.markwon.ext.latex.JLatexMathBlock) -> visit
io.noties.markwon.ext.latex.JLatexMathPlugin$2 -> io.noties.markwon.ext.latex.JLatexMathPlugin$2:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    231:231:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin) -> <init>
    231:231:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    234:257:void visit(io.noties.markwon.MarkwonVisitor,io.noties.markwon.ext.latex.JLatexMathNode) -> visit
io.noties.markwon.ext.latex.JLatexMathPlugin$Builder -> io.noties.markwon.ext.latex.JLatexMathPlugin$Builder:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    285:297:void <init>(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> <init>
    279:279:io.noties.markwon.ext.latex.JLatexMathTheme$Builder access$000(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> access$000
    279:279:boolean access$100(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> access$100
    279:279:boolean access$200(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> access$200
    279:279:boolean access$300(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> access$300
    279:279:io.noties.markwon.ext.latex.JLatexMathPlugin$ErrorHandler access$400(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> access$400
    279:279:java.util.concurrent.ExecutorService access$500(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> access$500
    352:352:io.noties.markwon.ext.latex.JLatexMathPlugin$Config build() -> build
io.noties.markwon.ext.latex.JLatexMathPlugin$Config -> io.noties.markwon.ext.latex.JLatexMathPlugin$Config:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    128:140:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin$Builder) -> <init>
io.noties.markwon.ext.latex.JLatexMathPlugin$ErrorHandler -> io.noties.markwon.ext.latex.JLatexMathPlugin$ErrorHandler:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
io.noties.markwon.ext.latex.JLatexMathPlugin$InlineImageSizeResolver -> io.noties.markwon.ext.latex.JLatexMathPlugin$InlineImageSizeResolver:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    526:526:void <init>() -> <init>
    526:526:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin$1) -> <init>
    533:544:android.graphics.Rect resolveImageSize(io.noties.markwon.image.AsyncDrawable) -> resolveImageSize
io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader -> io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    360:365:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin$Config) -> <init>
    357:357:io.noties.markwon.ext.latex.JLatexMathPlugin$Config access$1000(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader) -> access$1000
    357:357:void access$1100(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader,io.noties.markwon.image.AsyncDrawable,android.graphics.drawable.Drawable) -> access$1100
    357:357:ru.noties.jlatexmath.JLatexMathDrawable access$1200(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader,io.noties.markwon.ext.latex.JLatextAsyncDrawable) -> access$1200
    357:357:ru.noties.jlatexmath.JLatexMathDrawable access$1300(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader,io.noties.markwon.ext.latex.JLatextAsyncDrawable) -> access$1300
    357:357:java.util.Map access$1400(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader) -> access$1400
    432:439:void cancel(io.noties.markwon.image.AsyncDrawable) -> cancel
    451:475:ru.noties.jlatexmath.JLatexMathDrawable createBlockDrawable(io.noties.markwon.ext.latex.JLatextAsyncDrawable) -> createBlockDrawable
    482:505:ru.noties.jlatexmath.JLatexMathDrawable createInlineDrawable(io.noties.markwon.ext.latex.JLatextAsyncDrawable) -> createInlineDrawable
    373:425:void load(io.noties.markwon.image.AsyncDrawable) -> load
    444:444:android.graphics.drawable.Drawable placeholder(io.noties.markwon.image.AsyncDrawable) -> placeholder
    512:523:void setResult(io.noties.markwon.image.AsyncDrawable,android.graphics.drawable.Drawable) -> setResult
io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader$1 -> io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader$1:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    380:380:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader,io.noties.markwon.image.AsyncDrawable) -> <init>
    413:422:void execute() -> execute
    385:407:void run() -> run
io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader$2 -> io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader$2:
# {"id":"sourceFile","fileName":"JLatexMathPlugin.java"}
    512:512:void <init>(io.noties.markwon.ext.latex.JLatexMathPlugin$JLatextAsyncDrawableLoader,io.noties.markwon.image.AsyncDrawable,android.graphics.drawable.Drawable) -> <init>
    516:521:void run() -> run
io.noties.markwon.ext.latex.JLatexMathTheme -> io.noties.markwon.ext.latex.JLatexMathTheme:
# {"id":"sourceFile","fileName":"JLatexMathTheme.java"}
    15:15:void <init>() -> <init>
    29:29:io.noties.markwon.ext.latex.JLatexMathTheme$Builder builder(float) -> builder
io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider -> io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider:
# {"id":"sourceFile","fileName":"JLatexMathTheme.java"}
io.noties.markwon.ext.latex.JLatexMathTheme$Builder -> io.noties.markwon.ext.latex.JLatexMathTheme$Builder:
# {"id":"sourceFile","fileName":"JLatexMathTheme.java"}
    148:164:void <init>(float,float,float) -> <init>
    139:139:float access$000(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$000
    139:139:float access$100(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$100
    139:139:io.noties.markwon.ext.latex.JLatexMathTheme$Padding access$1000(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$1000
    139:139:int access$1100(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$1100
    139:139:int access$1200(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$1200
    139:139:int access$1300(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$1300
    139:139:float access$200(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$200
    139:139:io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider access$300(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$300
    139:139:io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider access$400(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$400
    139:139:io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider access$500(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$500
    139:139:boolean access$600(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$600
    139:139:int access$700(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$700
    139:139:io.noties.markwon.ext.latex.JLatexMathTheme$Padding access$800(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$800
    139:139:io.noties.markwon.ext.latex.JLatexMathTheme$Padding access$900(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> access$900
    242:242:io.noties.markwon.ext.latex.JLatexMathTheme build() -> build
io.noties.markwon.ext.latex.JLatexMathTheme$Impl -> io.noties.markwon.ext.latex.JLatexMathTheme$Impl:
# {"id":"sourceFile","fileName":"JLatexMathTheme.java"}
    268:283:void <init>(io.noties.markwon.ext.latex.JLatexMathTheme$Builder) -> <init>
    313:316:io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider blockBackgroundProvider() -> blockBackgroundProvider
    321:321:boolean blockFitCanvas() -> blockFitCanvas
    326:326:int blockHorizontalAlignment() -> blockHorizontalAlignment
    341:344:io.noties.markwon.ext.latex.JLatexMathTheme$Padding blockPadding() -> blockPadding
    357:360:int blockTextColor() -> blockTextColor
    295:298:float blockTextSize() -> blockTextSize
    304:307:io.noties.markwon.ext.latex.JLatexMathTheme$BackgroundProvider inlineBackgroundProvider() -> inlineBackgroundProvider
    332:335:io.noties.markwon.ext.latex.JLatexMathTheme$Padding inlinePadding() -> inlinePadding
    349:352:int inlineTextColor() -> inlineTextColor
    287:290:float inlineTextSize() -> inlineTextSize
io.noties.markwon.ext.latex.JLatexMathTheme$Padding -> io.noties.markwon.ext.latex.JLatexMathTheme$Padding:
# {"id":"sourceFile","fileName":"JLatexMathTheme.java"}
io.noties.markwon.ext.latex.JLatextAsyncDrawable -> io.noties.markwon.ext.latex.JLatextAsyncDrawable:
# {"id":"sourceFile","fileName":"JLatextAsyncDrawable.java"}
    25:27:void <init>(java.lang.String,io.noties.markwon.image.AsyncDrawableLoader,io.noties.markwon.image.ImageSizeResolver,io.noties.markwon.image.ImageSize,boolean) -> <init>
    30:30:boolean isBlock() -> isBlock
io.noties.markwon.ext.latex.R$styleable -> io.noties.markwon.ext.latex.R$styleable:
    0:0:void <clinit>() -> <clinit>
io.noties.markwon.ext.strikethrough.StrikethroughPlugin -> io.noties.markwon.ext.strikethrough.StrikethroughPlugin:
# {"id":"sourceFile","fileName":"StrikethroughPlugin.java"}
    28:28:void <init>() -> <init>
    37:38:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    42:48:void configureSpansFactory(io.noties.markwon.MarkwonSpansFactory$Builder) -> configureSpansFactory
    52:60:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    32:32:io.noties.markwon.ext.strikethrough.StrikethroughPlugin create() -> create
io.noties.markwon.ext.strikethrough.StrikethroughPlugin$1 -> io.noties.markwon.ext.strikethrough.StrikethroughPlugin$1:
# {"id":"sourceFile","fileName":"StrikethroughPlugin.java"}
    42:42:void <init>(io.noties.markwon.ext.strikethrough.StrikethroughPlugin) -> <init>
    45:45:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.ext.strikethrough.StrikethroughPlugin$2 -> io.noties.markwon.ext.strikethrough.StrikethroughPlugin$2:
# {"id":"sourceFile","fileName":"StrikethroughPlugin.java"}
    52:52:void <init>(io.noties.markwon.ext.strikethrough.StrikethroughPlugin) -> <init>
    52:52:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    55:58:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.ext.gfm.strikethrough.Strikethrough) -> visit
io.noties.markwon.ext.tables.TablePlugin -> io.noties.markwon.ext.tables.TablePlugin:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    63:66:void <init>(io.noties.markwon.ext.tables.TableTheme) -> <init>
    96:97:void afterSetText(android.widget.TextView) -> afterSetText
    86:87:void beforeRender(org.commonmark.node.Node) -> beforeRender
    91:92:void beforeSetText(android.widget.TextView,android.text.Spanned) -> beforeSetText
    75:76:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    80:81:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    44:44:io.noties.markwon.ext.tables.TablePlugin create(android.content.Context) -> create
io.noties.markwon.ext.tables.TablePlugin$1 -> io.noties.markwon.ext.tables.TablePlugin$1:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    226:226:void <clinit>() -> <clinit>
io.noties.markwon.ext.tables.TablePlugin$TableVisitor -> io.noties.markwon.ext.tables.TablePlugin$TableVisitor:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    107:109:void <init>(io.noties.markwon.ext.tables.TableTheme) -> <init>
    99:99:java.util.List access$000(io.noties.markwon.ext.tables.TablePlugin$TableVisitor) -> access$000
    99:99:java.util.List access$002(io.noties.markwon.ext.tables.TablePlugin$TableVisitor,java.util.List) -> access$002
    99:99:int access$100(org.commonmark.ext.gfm.tables.TableCell$Alignment) -> access$100
    99:99:boolean access$202(io.noties.markwon.ext.tables.TablePlugin$TableVisitor,boolean) -> access$202
    99:99:void access$300(io.noties.markwon.ext.tables.TablePlugin$TableVisitor,io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> access$300
    99:99:int access$402(io.noties.markwon.ext.tables.TablePlugin$TableVisitor,int) -> access$402
    112:115:void clear() -> clear
    118:175:void configure(io.noties.markwon.MarkwonVisitor$Builder) -> configure
    225:240:int tableCellAlignment(org.commonmark.ext.gfm.tables.TableCell$Alignment) -> tableCellAlignment
    179:220:void visitRow(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visitRow
io.noties.markwon.ext.tables.TablePlugin$TableVisitor$1 -> io.noties.markwon.ext.tables.TablePlugin$TableVisitor$1:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    155:155:void <init>(io.noties.markwon.ext.tables.TablePlugin$TableVisitor) -> <init>
    155:155:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    159:173:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.ext.gfm.tables.TableCell) -> visit
io.noties.markwon.ext.tables.TablePlugin$TableVisitor$2 -> io.noties.markwon.ext.tables.TablePlugin$TableVisitor$2:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    149:149:void <init>(io.noties.markwon.ext.tables.TablePlugin$TableVisitor) -> <init>
    149:149:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    152:153:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.ext.gfm.tables.TableHead) -> visit
io.noties.markwon.ext.tables.TablePlugin$TableVisitor$3 -> io.noties.markwon.ext.tables.TablePlugin$TableVisitor$3:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    143:143:void <init>(io.noties.markwon.ext.tables.TablePlugin$TableVisitor) -> <init>
    143:143:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    146:147:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.ext.gfm.tables.TableRow) -> visit
io.noties.markwon.ext.tables.TablePlugin$TableVisitor$4 -> io.noties.markwon.ext.tables.TablePlugin$TableVisitor$4:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    136:136:void <init>(io.noties.markwon.ext.tables.TablePlugin$TableVisitor) -> <init>
    136:136:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    139:141:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.ext.gfm.tables.TableBody) -> visit
io.noties.markwon.ext.tables.TablePlugin$TableVisitor$5 -> io.noties.markwon.ext.tables.TablePlugin$TableVisitor$5:
# {"id":"sourceFile","fileName":"TablePlugin.java"}
    120:120:void <init>(io.noties.markwon.ext.tables.TablePlugin$TableVisitor) -> <init>
    120:120:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    124:134:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.ext.gfm.tables.TableBlock) -> visit
io.noties.markwon.ext.tables.TableRowSpan -> io.noties.markwon.ext.tables.TableRowSpan:
# {"id":"sourceFile","fileName":"TableRowSpan.java"}
    83:101:void <init>(io.noties.markwon.ext.tables.TableTheme,java.util.List,boolean,boolean) -> <init>
    32:32:io.noties.markwon.ext.tables.TableRowSpan$Invalidator access$000(io.noties.markwon.ext.tables.TableRowSpan) -> access$000
    32:32:java.util.List access$100(io.noties.markwon.ext.tables.TableRowSpan) -> access$100
    32:32:void access$200(io.noties.markwon.ext.tables.TableRowSpan,int,int,io.noties.markwon.ext.tables.TableRowSpan$Cell) -> access$200
    418:429:android.text.Layout$Alignment alignment(int) -> alignment
    412:412:int cellWidth(int) -> cellWidth
    155:200:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    192:290:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    270:290:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    260:290:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    285:290:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    252:291:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    252:299:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    114:140:int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt) -> getSize
    433:434:void invalidator(io.noties.markwon.ext.tables.TableRowSpan$Invalidator) -> invalidator
    322:359:void makeLayout(int,int,io.noties.markwon.ext.tables.TableRowSpan$Cell) -> makeLayout
    307:318:void makeNewLayouts() -> makeNewLayouts
    302:302:boolean recreateLayouts(int) -> recreateLayouts
    363:385:void scheduleAsyncDrawables(android.text.Spannable,java.lang.Runnable) -> scheduleAsyncDrawables
io.noties.markwon.ext.tables.TableRowSpan$1 -> io.noties.markwon.ext.tables.TableRowSpan$1:
# {"id":"sourceFile","fileName":"TableRowSpan.java"}
    322:322:void <init>(io.noties.markwon.ext.tables.TableRowSpan,int,int,io.noties.markwon.ext.tables.TableRowSpan$Cell) -> <init>
    325:331:void run() -> run
io.noties.markwon.ext.tables.TableRowSpan$2 -> io.noties.markwon.ext.tables.TableRowSpan$2:
# {"id":"sourceFile","fileName":"TableRowSpan.java"}
    377:377:void <init>(io.noties.markwon.ext.tables.TableRowSpan,java.lang.Runnable) -> <init>
    380:381:void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
io.noties.markwon.ext.tables.TableRowSpan$CallbackAdapter -> io.noties.markwon.ext.tables.TableRowSpan$CallbackAdapter:
# {"id":"sourceFile","fileName":"TableRowSpan.java"}
    436:436:void <init>() -> <init>
    436:436:void <init>(io.noties.markwon.ext.tables.TableRowSpan$1) -> <init>
    445:445:void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    450:450:void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
io.noties.markwon.ext.tables.TableRowSpan$Cell -> io.noties.markwon.ext.tables.TableRowSpan$Cell:
# {"id":"sourceFile","fileName":"TableRowSpan.java"}
    52:55:void <init>(int,java.lang.CharSequence) -> <init>
    69:69:java.lang.String toString() -> toString
io.noties.markwon.ext.tables.TableRowSpan$Invalidator -> io.noties.markwon.ext.tables.TableRowSpan$Invalidator:
# {"id":"sourceFile","fileName":"TableRowSpan.java"}
io.noties.markwon.ext.tables.TableRowsScheduler -> io.noties.markwon.ext.tables.TableRowsScheduler:
# {"id":"sourceFile","fileName":"TableRowsScheduler.java"}
    75:81:java.lang.Object[] extract(android.widget.TextView) -> extract
    14:60:void schedule(android.widget.TextView) -> schedule
    63:70:void unschedule(android.widget.TextView) -> unschedule
io.noties.markwon.ext.tables.TableRowsScheduler$1 -> io.noties.markwon.ext.tables.TableRowsScheduler$1:
# {"id":"sourceFile","fileName":"TableRowsScheduler.java"}
    19:19:void <init>(android.widget.TextView) -> <init>
    23:23:void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    27:30:void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
io.noties.markwon.ext.tables.TableRowsScheduler$2 -> io.noties.markwon.ext.tables.TableRowsScheduler$2:
# {"id":"sourceFile","fileName":"TableRowsScheduler.java"}
    36:41:void <init>(android.widget.TextView) -> <init>
    51:53:void invalidate() -> invalidate
io.noties.markwon.ext.tables.TableRowsScheduler$2$1 -> io.noties.markwon.ext.tables.TableRowsScheduler$2$1:
# {"id":"sourceFile","fileName":"TableRowsScheduler.java"}
    41:41:void <init>(io.noties.markwon.ext.tables.TableRowsScheduler$2) -> <init>
    44:45:void run() -> run
io.noties.markwon.ext.tables.TableSpan -> io.noties.markwon.ext.tables.TableSpan:
# {"id":"sourceFile","fileName":"TableSpan.java"}
    6:6:void <init>() -> <init>
io.noties.markwon.ext.tables.TableTheme -> io.noties.markwon.ext.tables.TableTheme:
# {"id":"sourceFile","fileName":"TableTheme.java"}
    58:65:void <init>(io.noties.markwon.ext.tables.TableTheme$Builder) -> <init>
    98:107:void applyTableBorderStyle(android.graphics.Paint) -> applyTableBorderStyle
    125:127:void applyTableEvenRowStyle(android.graphics.Paint) -> applyTableEvenRowStyle
    133:135:void applyTableHeaderRowStyle(android.graphics.Paint) -> applyTableHeaderRowStyle
    111:118:void applyTableOddRowStyle(android.graphics.Paint) -> applyTableOddRowStyle
    23:26:io.noties.markwon.ext.tables.TableTheme$Builder buildWithDefaults(android.content.Context) -> buildWithDefaults
    18:18:io.noties.markwon.ext.tables.TableTheme create(android.content.Context) -> create
    31:31:io.noties.markwon.ext.tables.TableTheme$Builder emptyBuilder() -> emptyBuilder
    87:92:int tableBorderWidth(android.graphics.Paint) -> tableBorderWidth
    82:82:int tableCellPadding() -> tableCellPadding
io.noties.markwon.ext.tables.TableTheme$Builder -> io.noties.markwon.ext.tables.TableTheme$Builder:
# {"id":"sourceFile","fileName":"TableTheme.java"}
    137:141:void <init>() -> <init>
    137:137:int access$000(io.noties.markwon.ext.tables.TableTheme$Builder) -> access$000
    137:137:int access$100(io.noties.markwon.ext.tables.TableTheme$Builder) -> access$100
    137:137:int access$200(io.noties.markwon.ext.tables.TableTheme$Builder) -> access$200
    137:137:int access$300(io.noties.markwon.ext.tables.TableTheme$Builder) -> access$300
    137:137:int access$400(io.noties.markwon.ext.tables.TableTheme$Builder) -> access$400
    137:137:int access$500(io.noties.markwon.ext.tables.TableTheme$Builder) -> access$500
    184:184:io.noties.markwon.ext.tables.TableTheme build() -> build
    160:161:io.noties.markwon.ext.tables.TableTheme$Builder tableBorderWidth(int) -> tableBorderWidth
    148:149:io.noties.markwon.ext.tables.TableTheme$Builder tableCellPadding(int) -> tableCellPadding
io.noties.markwon.ext.tasklist.TaskListDrawable -> io.noties.markwon.ext.tasklist.TaskListDrawable:
# {"id":"sourceFile","fileName":"TaskListDrawable.java"}
    24:26:void <clinit>() -> <clinit>
    31:50:void <init>(int,int,int) -> <init>
    81:111:void draw(android.graphics.Canvas) -> draw
    125:125:int getOpacity() -> getOpacity
    130:130:boolean isStateful() -> isStateful
    54:73:void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    138:163:boolean onStateChange(int[]) -> onStateChange
    115:116:void setAlpha(int) -> setAlpha
    120:121:void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
io.noties.markwon.ext.tasklist.TaskListDrawable$Point -> io.noties.markwon.ext.tasklist.TaskListDrawable$Point:
# {"id":"sourceFile","fileName":"TaskListDrawable.java"}
    171:174:void <init>(float,float) -> <init>
    181:182:void lineTo(android.graphics.Path,float) -> lineTo
    177:178:void moveTo(android.graphics.Path,float) -> moveTo
io.noties.markwon.ext.tasklist.TaskListItem -> io.noties.markwon.ext.tasklist.TaskListItem:
# {"id":"sourceFile","fileName":"TaskListItem.java"}
    15:17:void <init>(boolean) -> <init>
    20:20:boolean isDone() -> isDone
    26:26:java.lang.String toString() -> toString
io.noties.markwon.ext.tasklist.TaskListPlugin -> io.noties.markwon.ext.tasklist.TaskListPlugin:
# {"id":"sourceFile","fileName":"TaskListPlugin.java"}
    61:63:void <init>(android.graphics.drawable.Drawable) -> <init>
    67:68:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    72:73:void configureSpansFactory(io.noties.markwon.MarkwonSpansFactory$Builder) -> configureSpansFactory
    77:95:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    42:45:io.noties.markwon.ext.tasklist.TaskListPlugin create(android.content.Context) -> create
    98:104:int resolve(android.content.Context,int) -> resolve
    104:105:int resolve(android.content.Context,int) -> resolve
io.noties.markwon.ext.tasklist.TaskListPlugin$1 -> io.noties.markwon.ext.tasklist.TaskListPlugin$1:
# {"id":"sourceFile","fileName":"TaskListPlugin.java"}
    78:78:void <init>(io.noties.markwon.ext.tasklist.TaskListPlugin) -> <init>
    78:78:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    82:93:void visit(io.noties.markwon.MarkwonVisitor,io.noties.markwon.ext.tasklist.TaskListItem) -> visit
io.noties.markwon.ext.tasklist.TaskListPostProcessor -> io.noties.markwon.ext.tasklist.TaskListPostProcessor:
# {"id":"sourceFile","fileName":"TaskListPostProcessor.java"}
    19:19:void <init>() -> <init>
    23:25:org.commonmark.node.Node process(org.commonmark.node.Node) -> process
io.noties.markwon.ext.tasklist.TaskListPostProcessor$1 -> io.noties.markwon.ext.tasklist.TaskListPostProcessor$1:
# {"id":"sourceFile","fileName":"TaskListPostProcessor.java"}
io.noties.markwon.ext.tasklist.TaskListPostProcessor$TaskListVisitor -> io.noties.markwon.ext.tasklist.TaskListPostProcessor$TaskListVisitor:
# {"id":"sourceFile","fileName":"TaskListPostProcessor.java"}
    30:30:void <clinit>() -> <clinit>
    28:28:void <init>() -> <init>
    28:28:void <init>(io.noties.markwon.ext.tasklist.TaskListPostProcessor$1) -> <init>
    35:80:void visit(org.commonmark.node.ListItem) -> visit
io.noties.markwon.ext.tasklist.TaskListProps -> io.noties.markwon.ext.tasklist.TaskListProps:
# {"id":"sourceFile","fileName":"TaskListProps.java"}
    10:10:void <clinit>() -> <clinit>
io.noties.markwon.ext.tasklist.TaskListSpan -> io.noties.markwon.ext.tasklist.TaskListSpan:
# {"id":"sourceFile","fileName":"TaskListSpan.java"}
    19:21:void <clinit>() -> <clinit>
    29:33:void <init>(io.noties.markwon.core.MarkwonTheme,android.graphics.drawable.Drawable,boolean) -> <init>
    60:104:void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout) -> drawLeadingMargin
    54:54:int getLeadingMargin(boolean) -> getLeadingMargin
io.noties.markwon.ext.tasklist.TaskListSpanFactory -> io.noties.markwon.ext.tasklist.TaskListSpanFactory:
# {"id":"sourceFile","fileName":"TaskListSpanFactory.java"}
    16:18:void <init>(android.graphics.drawable.Drawable) -> <init>
    23:26:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.html.AppendableUtils -> io.noties.markwon.html.AppendableUtils:
# {"id":"sourceFile","fileName":"AppendableUtils.java"}
    11:15:void appendQuietly(java.lang.Appendable,char) -> appendQuietly
    19:23:void appendQuietly(java.lang.Appendable,java.lang.CharSequence) -> appendQuietly
io.noties.markwon.html.CssInlineStyleParser -> io.noties.markwon.html.CssInlineStyleParser:
# {"id":"sourceFile","fileName":"CssInlineStyleParser.java"}
    11:11:void <init>() -> <init>
    18:18:io.noties.markwon.html.CssInlineStyleParser create() -> create
io.noties.markwon.html.CssInlineStyleParser$1 -> io.noties.markwon.html.CssInlineStyleParser$1:
# {"id":"sourceFile","fileName":"CssInlineStyleParser.java"}
io.noties.markwon.html.CssInlineStyleParser$Impl -> io.noties.markwon.html.CssInlineStyleParser$Impl:
# {"id":"sourceFile","fileName":"CssInlineStyleParser.java"}
    21:21:void <init>() -> <init>
    26:26:java.lang.Iterable parse(java.lang.String) -> parse
io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable -> io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable:
# {"id":"sourceFile","fileName":"CssInlineStyleParser.java"}
    33:35:void <init>(java.lang.String) -> <init>
    29:29:java.lang.String access$100(io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable) -> access$100
    40:40:java.util.Iterator iterator() -> iterator
io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable$CssIterator -> io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable$CssIterator:
# {"id":"sourceFile","fileName":"CssInlineStyleParser.java"}
    43:49:void <init>(io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable) -> <init>
    43:43:void <init>(io.noties.markwon.html.CssInlineStyleParser$Impl$CssIterable,io.noties.markwon.html.CssInlineStyleParser$1) -> <init>
    56:58:boolean hasNext() -> hasNext
    162:162:boolean hasNextPrepared() -> hasNextPrepared
    166:167:boolean hasValues(java.lang.String,java.lang.String) -> hasValues
    43:43:java.lang.Object next() -> next
    63:66:io.noties.markwon.html.CssProperty next() -> next
    72:159:void prepareNext() -> prepareNext
io.noties.markwon.html.CssProperty -> io.noties.markwon.html.CssProperty:
# {"id":"sourceFile","fileName":"CssProperty.java"}
    10:11:void <init>() -> <init>
    20:20:java.lang.String key() -> key
    14:16:void set(java.lang.String,java.lang.String) -> set
    37:37:java.lang.String toString() -> toString
    25:25:java.lang.String value() -> value
io.noties.markwon.html.HtmlEmptyTagReplacement -> io.noties.markwon.html.HtmlEmptyTagReplacement:
# {"id":"sourceFile","fileName":"HtmlEmptyTagReplacement.java"}
    16:16:void <init>() -> <init>
    35:55:java.lang.String replace(io.noties.markwon.html.HtmlTag) -> replace
io.noties.markwon.html.HtmlPlugin -> io.noties.markwon.html.HtmlPlugin:
# {"id":"sourceFile","fileName":"HtmlPlugin.java"}
    61:66:void <init>() -> <init>
    28:28:void access$000(io.noties.markwon.html.HtmlPlugin,io.noties.markwon.MarkwonVisitor,java.lang.String) -> access$000
    150:156:void afterRender(org.commonmark.node.Node,io.noties.markwon.MarkwonVisitor) -> afterRender
    125:146:void configureConfiguration(io.noties.markwon.MarkwonConfiguration$Builder) -> configureConfiguration
    160:173:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    40:40:io.noties.markwon.html.HtmlPlugin create() -> create
    176:179:void visitHtml(io.noties.markwon.MarkwonVisitor,java.lang.String) -> visitHtml
io.noties.markwon.html.HtmlPlugin$1 -> io.noties.markwon.html.HtmlPlugin$1:
# {"id":"sourceFile","fileName":"HtmlPlugin.java"}
    167:167:void <init>(io.noties.markwon.html.HtmlPlugin) -> <init>
    167:167:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    170:171:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.HtmlInline) -> visit
io.noties.markwon.html.HtmlPlugin$2 -> io.noties.markwon.html.HtmlPlugin$2:
# {"id":"sourceFile","fileName":"HtmlPlugin.java"}
    161:161:void <init>(io.noties.markwon.html.HtmlPlugin) -> <init>
    161:161:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    164:165:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.HtmlBlock) -> visit
io.noties.markwon.html.HtmlTag -> io.noties.markwon.html.HtmlTag:
# {"id":"sourceFile","fileName":"HtmlTag.java"}
io.noties.markwon.html.HtmlTag$Block -> io.noties.markwon.html.HtmlTag$Block:
# {"id":"sourceFile","fileName":"HtmlTag.java"}
io.noties.markwon.html.HtmlTag$Inline -> io.noties.markwon.html.HtmlTag$Inline:
# {"id":"sourceFile","fileName":"HtmlTag.java"}
io.noties.markwon.html.HtmlTagImpl -> io.noties.markwon.html.HtmlTagImpl:
# {"id":"sourceFile","fileName":"HtmlTagImpl.java"}
    15:21:void <init>(java.lang.String,int,java.util.Map) -> <init>
    47:47:java.util.Map attributes() -> attributes
    36:36:int end() -> end
    52:52:boolean isClosed() -> isClosed
    41:41:boolean isEmpty() -> isEmpty
    26:26:java.lang.String name() -> name
    31:31:int start() -> start
io.noties.markwon.html.HtmlTagImpl$BlockImpl -> io.noties.markwon.html.HtmlTagImpl$BlockImpl:
# {"id":"sourceFile","fileName":"HtmlTagImpl.java"}
    129:131:void <init>(java.lang.String,int,java.util.Map,io.noties.markwon.html.HtmlTagImpl$BlockImpl) -> <init>
    171:171:java.util.Map attributes() -> attributes
    160:165:java.util.List children() -> children
    135:143:void closeAt(int) -> closeAt
    117:117:io.noties.markwon.html.HtmlTagImpl$BlockImpl create(java.lang.String,int,java.util.Map,io.noties.markwon.html.HtmlTagImpl$BlockImpl) -> create
    193:193:io.noties.markwon.html.HtmlTag$Block getAsBlock() -> getAsBlock
    181:181:boolean isBlock() -> isBlock
    153:153:io.noties.markwon.html.HtmlTag$Block parent() -> parent
    108:108:io.noties.markwon.html.HtmlTagImpl$BlockImpl root() -> root
    198:203:java.lang.String toString() -> toString
io.noties.markwon.html.HtmlTagImpl$InlineImpl -> io.noties.markwon.html.HtmlTagImpl$InlineImpl:
# {"id":"sourceFile","fileName":"HtmlTagImpl.java"}
    61:62:void <init>(java.lang.String,int,java.util.Map) -> <init>
    66:69:void closeAt(int) -> closeAt
    100:100:io.noties.markwon.html.HtmlTag$Block getAsBlock() -> getAsBlock
    88:88:boolean isBlock() -> isBlock
    73:73:java.lang.String toString() -> toString
io.noties.markwon.html.MarkwonHtmlParser -> io.noties.markwon.html.MarkwonHtmlParser:
# {"id":"sourceFile","fileName":"MarkwonHtmlParser.java"}
    10:10:void <init>() -> <init>
io.noties.markwon.html.MarkwonHtmlParser$FlushAction -> io.noties.markwon.html.MarkwonHtmlParser$FlushAction:
# {"id":"sourceFile","fileName":"MarkwonHtmlParser.java"}
io.noties.markwon.html.MarkwonHtmlParserImpl -> io.noties.markwon.html.MarkwonHtmlParserImpl:
# {"id":"sourceFile","fileName":"MarkwonHtmlParserImpl.java"}
    58:106:void <clinit>() -> <clinit>
    112:128:void <init>(io.noties.markwon.html.HtmlEmptyTagReplacement,io.noties.markwon.html.TrimmingAppender) -> <init>
    381:387:void appendBlockChild(io.noties.markwon.html.HtmlTagImpl$BlockImpl,io.noties.markwon.html.HtmlTagImpl$BlockImpl) -> appendBlockChild
    476:480:void appendEmptyTagReplacement(java.lang.Appendable,io.noties.markwon.html.HtmlTagImpl) -> appendEmptyTagReplacement
    38:38:io.noties.markwon.html.MarkwonHtmlParserImpl create(io.noties.markwon.html.HtmlEmptyTagReplacement) -> create
    439:444:void ensureNewLine(java.lang.Appendable) -> ensureNewLine
    419:423:void ensureNewLineIfPreviousWasBlock(java.lang.Appendable) -> ensureNewLineIfPreviousWasBlock
    451:464:java.util.Map extractAttributes(io.noties.markwon.html.jsoup.parser.Token$StartTag) -> extractAttributes
    408:415:io.noties.markwon.html.HtmlTagImpl$BlockImpl findOpenBlockTag(java.lang.String) -> findOpenBlockTag
    394:402:io.noties.markwon.html.HtmlTagImpl$InlineImpl findOpenInlineTag(java.lang.String) -> findOpenInlineTag
    206:223:void flushBlockTags(int,io.noties.markwon.html.MarkwonHtmlParser$FlushAction) -> flushBlockTags
    188:201:void flushInlineTags(int,io.noties.markwon.html.MarkwonHtmlParser$FlushAction) -> flushInlineTags
    435:435:boolean isBlockTag(java.lang.String) -> isBlockTag
    470:470:boolean isEmpty(java.lang.Appendable,io.noties.markwon.html.HtmlTagImpl) -> isEmpty
    427:427:boolean isInlineTag(java.lang.String) -> isInlineTag
    431:431:boolean isVoidTag(java.lang.String) -> isVoidTag
    336:363:void processBlockTagEnd(java.lang.Appendable,io.noties.markwon.html.jsoup.parser.Token$EndTag) -> processBlockTagEnd
    283:330:void processBlockTagStart(java.lang.Appendable,io.noties.markwon.html.jsoup.parser.Token$StartTag) -> processBlockTagStart
    372:378:void processCharacter(java.lang.Appendable,io.noties.markwon.html.jsoup.parser.Token$Character) -> processCharacter
    138:184:void processFragment(java.lang.Appendable,java.lang.String) -> processFragment
    265:276:void processInlineTagEnd(java.lang.Appendable,io.noties.markwon.html.jsoup.parser.Token$EndTag) -> processInlineTagEnd
    236:258:void processInlineTagStart(java.lang.Appendable,io.noties.markwon.html.jsoup.parser.Token$StartTag) -> processInlineTagStart
    227:229:void reset() -> reset
io.noties.markwon.html.MarkwonHtmlParserImpl$1 -> io.noties.markwon.html.MarkwonHtmlParserImpl$1:
# {"id":"sourceFile","fileName":"MarkwonHtmlParserImpl.java"}
    149:149:void <clinit>() -> <clinit>
io.noties.markwon.html.MarkwonHtmlRenderer -> io.noties.markwon.html.MarkwonHtmlRenderer:
# {"id":"sourceFile","fileName":"MarkwonHtmlRenderer.java"}
    11:11:void <init>() -> <init>
io.noties.markwon.html.MarkwonHtmlRendererImpl -> io.noties.markwon.html.MarkwonHtmlRendererImpl:
# {"id":"sourceFile","fileName":"MarkwonHtmlRendererImpl.java"}
    19:22:void <init>(boolean,java.util.Map) -> <init>
    30:81:void render(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlParser) -> render
    86:86:io.noties.markwon.html.TagHandler tagHandler(java.lang.String) -> tagHandler
io.noties.markwon.html.MarkwonHtmlRendererImpl$1 -> io.noties.markwon.html.MarkwonHtmlRendererImpl$1:
# {"id":"sourceFile","fileName":"MarkwonHtmlRendererImpl.java"}
    36:36:void <init>(io.noties.markwon.html.MarkwonHtmlRendererImpl,io.noties.markwon.MarkwonVisitor) -> <init>
    42:54:void apply(java.util.List) -> apply
io.noties.markwon.html.MarkwonHtmlRendererImpl$2 -> io.noties.markwon.html.MarkwonHtmlRendererImpl$2:
# {"id":"sourceFile","fileName":"MarkwonHtmlRendererImpl.java"}
    57:57:void <init>(io.noties.markwon.html.MarkwonHtmlRendererImpl,io.noties.markwon.MarkwonVisitor) -> <init>
    63:77:void apply(java.util.List) -> apply
io.noties.markwon.html.MarkwonHtmlRendererImpl$Builder -> io.noties.markwon.html.MarkwonHtmlRendererImpl$Builder:
# {"id":"sourceFile","fileName":"MarkwonHtmlRendererImpl.java"}
    89:91:void <init>() -> <init>
    145:150:void addDefaultTagHandler(io.noties.markwon.html.TagHandler) -> addDefaultTagHandler
    127:135:io.noties.markwon.html.MarkwonHtmlRenderer build() -> build
    139:142:void checkState() -> checkState
    121:121:boolean excludeDefaults() -> excludeDefaults
io.noties.markwon.html.MarkwonHtmlRendererNoOp -> io.noties.markwon.html.MarkwonHtmlRendererNoOp:
# {"id":"sourceFile","fileName":"MarkwonHtmlRendererNoOp.java"}
    8:8:void <init>() -> <init>
    12:13:void render(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlParser) -> render
    18:18:io.noties.markwon.html.TagHandler tagHandler(java.lang.String) -> tagHandler
io.noties.markwon.html.TagHandler -> io.noties.markwon.html.TagHandler:
# {"id":"sourceFile","fileName":"TagHandler.java"}
    9:9:void <init>() -> <init>
    31:44:void visitChildren(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlRenderer,io.noties.markwon.html.HtmlTag$Block) -> visitChildren
io.noties.markwon.html.TrimmingAppender -> io.noties.markwon.html.TrimmingAppender:
# {"id":"sourceFile","fileName":"TrimmingAppender.java"}
    7:7:void <init>() -> <init>
    16:16:io.noties.markwon.html.TrimmingAppender create() -> create
io.noties.markwon.html.TrimmingAppender$Impl -> io.noties.markwon.html.TrimmingAppender$Impl:
# {"id":"sourceFile","fileName":"TrimmingAppender.java"}
    19:19:void <init>() -> <init>
    33:66:void append(java.lang.Appendable,java.lang.String) -> append
io.noties.markwon.html.jsoup.UncheckedIOException -> io.noties.markwon.html.jsoup.UncheckedIOException:
# {"id":"sourceFile","fileName":"UncheckedIOException.java"}
    7:8:void <init>(java.io.IOException) -> <init>
io.noties.markwon.html.jsoup.helper.Normalizer -> io.noties.markwon.html.jsoup.helper.Normalizer:
# {"id":"sourceFile","fileName":"Normalizer.java"}
    11:11:java.lang.String lowerCase(java.lang.String) -> lowerCase
io.noties.markwon.html.jsoup.helper.Validate -> io.noties.markwon.html.jsoup.helper.Validate:
# {"id":"sourceFile","fileName":"Validate.java"}
    110:110:void fail(java.lang.String) -> fail
    53:55:void isFalse(boolean) -> isFalse
    63:65:void isFalse(boolean,java.lang.String) -> isFalse
    34:36:void isTrue(boolean) -> isTrue
    91:93:void notEmpty(java.lang.String) -> notEmpty
    15:17:void notNull(java.lang.Object) -> notNull
io.noties.markwon.html.jsoup.nodes.Attribute -> io.noties.markwon.html.jsoup.nodes.Attribute:
# {"id":"sourceFile","fileName":"Attribute.java"}
    37:43:void <init>(java.lang.String,java.lang.String,io.noties.markwon.html.jsoup.nodes.Attributes) -> <init>
    10:10:java.lang.Object clone() -> clone
    197:199:io.noties.markwon.html.jsoup.nodes.Attribute clone() -> clone
    180:184:boolean equals(java.lang.Object) -> equals
    10:10:java.lang.Object getKey() -> getKey
    50:50:java.lang.String getKey() -> getKey
    10:10:java.lang.Object getValue() -> getValue
    74:74:java.lang.String getValue() -> getValue
    189:191:int hashCode() -> hashCode
    10:10:java.lang.Object setValue(java.lang.Object) -> setValue
    82:89:java.lang.String setValue(java.lang.String) -> setValue
io.noties.markwon.html.jsoup.nodes.Attributes -> io.noties.markwon.html.jsoup.nodes.Attributes:
# {"id":"sourceFile","fileName":"Attributes.java"}
    29:29:void <clinit>() -> <clinit>
    23:35:void <init>() -> <init>
    23:23:int access$000(io.noties.markwon.html.jsoup.nodes.Attributes) -> access$000
    23:23:void access$100(io.noties.markwon.html.jsoup.nodes.Attributes,int) -> access$100
    106:110:void add(java.lang.String,java.lang.String) -> add
    39:50:void checkCapacity(int) -> checkCapacity
    80:80:java.lang.String checkNotNull(java.lang.String) -> checkNotNull
    23:23:java.lang.Object clone() -> clone
    358:365:io.noties.markwon.html.jsoup.nodes.Attributes clone() -> clone
    54:57:java.lang.String[] copyOf(java.lang.String[],int) -> copyOf
    332:339:boolean equals(java.lang.Object) -> equals
    90:91:java.lang.String get(java.lang.String) -> get
    348:351:int hashCode() -> hashCode
    61:66:int indexOfKey(java.lang.String) -> indexOfKey
    240:240:java.util.Iterator iterator() -> iterator
    119:124:io.noties.markwon.html.jsoup.nodes.Attributes put(java.lang.String,java.lang.String) -> put
    166:175:void remove(int) -> remove
    220:220:int size() -> size
io.noties.markwon.html.jsoup.nodes.Attributes$1 -> io.noties.markwon.html.jsoup.nodes.Attributes$1:
# {"id":"sourceFile","fileName":"Attributes.java"}
    240:241:void <init>(io.noties.markwon.html.jsoup.nodes.Attributes) -> <init>
    245:245:boolean hasNext() -> hasNext
    240:240:java.lang.Object next() -> next
    250:253:io.noties.markwon.html.jsoup.nodes.Attribute next() -> next
    258:259:void remove() -> remove
io.noties.markwon.html.jsoup.nodes.CommonMarkEntities -> io.noties.markwon.html.jsoup.nodes.CommonMarkEntities:
# {"id":"sourceFile","fileName":"CommonMarkEntities.java"}
    37:46:void <clinit>() -> <clinit>
    18:29:int codepointsForName(java.lang.String,int[]) -> codepointsForName
    14:14:boolean isNamedEntity(java.lang.String) -> isNamedEntity
io.noties.markwon.html.jsoup.parser.CharacterReader -> io.noties.markwon.html.jsoup.parser.CharacterReader:
# {"id":"sourceFile","fileName":"CharacterReader.java"}
    28:36:void <init>(java.io.Reader,int) -> <init>
    43:44:void <init>(java.lang.String) -> <init>
    124:125:void advance() -> advance
    56:74:void bufferUp() -> bufferUp
    449:476:java.lang.String cacheString(char[],java.lang.String[],int,int) -> cacheString
    110:113:char consume() -> consume
    245:257:java.lang.String consumeData() -> consumeData
    333:342:java.lang.String consumeDigitSequence() -> consumeDigitSequence
    320:329:java.lang.String consumeHexSequence() -> consumeHexSequence
    285:295:java.lang.String consumeLetterSequence() -> consumeLetterSequence
    299:316:java.lang.String consumeLetterThenDigitSequence() -> consumeLetterThenDigitSequence
    262:274:java.lang.String consumeTagName() -> consumeTagName
    183:189:java.lang.String consumeTo(char) -> consumeTo
    194:200:java.lang.String consumeTo(java.lang.String) -> consumeTo
    211:225:java.lang.String consumeToAny(char[]) -> consumeToAny
    229:240:java.lang.String consumeToAnySorted(char[]) -> consumeToAnySorted
    278:281:java.lang.String consumeToEnd() -> consumeToEnd
    430:432:boolean containsIgnoreCase(java.lang.String) -> containsIgnoreCase
    105:106:char current() -> current
    91:92:boolean isEmpty() -> isEmpty
    96:96:boolean isEmptyNoBufferUp() -> isEmptyNoBufferUp
    128:129:void mark() -> mark
    410:415:boolean matchConsume(java.lang.String) -> matchConsume
    420:424:boolean matchConsumeIgnoreCase(java.lang.String) -> matchConsumeIgnoreCase
    346:346:boolean matches(char) -> matches
    351:359:boolean matches(java.lang.String) -> matches
    378:387:boolean matchesAny(char[]) -> matchesAny
    391:392:boolean matchesAnySorted(char[]) -> matchesAnySorted
    403:406:boolean matchesDigit() -> matchesDigit
    363:374:boolean matchesIgnoreCase(java.lang.String) -> matchesIgnoreCase
    396:399:boolean matchesLetter() -> matchesLetter
    143:148:int nextIndexOf(char) -> nextIndexOf
    158:173:int nextIndexOf(java.lang.CharSequence) -> nextIndexOf
    82:82:int pos() -> pos
    483:492:boolean rangeEquals(char[],int,int,java.lang.String) -> rangeEquals
    132:133:void rewindToMark() -> rewindToMark
    437:437:java.lang.String toString() -> toString
    117:118:void unconsume() -> unconsume
io.noties.markwon.html.jsoup.parser.ParseError -> io.noties.markwon.html.jsoup.parser.ParseError:
# {"id":"sourceFile","fileName":"ParseError.java"}
    10:13:void <init>(int,java.lang.String) -> <init>
    15:18:void <init>(int,java.lang.String,java.lang.Object[]) -> <init>
    38:38:java.lang.String toString() -> toString
io.noties.markwon.html.jsoup.parser.ParseErrorList -> io.noties.markwon.html.jsoup.parser.ParseErrorList:
# {"id":"sourceFile","fileName":"ParseErrorList.java"}
    15:17:void <init>(int,int) -> <init>
    20:20:boolean canAddError() -> canAddError
    28:28:io.noties.markwon.html.jsoup.parser.ParseErrorList noTracking() -> noTracking
io.noties.markwon.html.jsoup.parser.Token -> io.noties.markwon.html.jsoup.parser.Token:
# {"id":"sourceFile","fileName":"Token.java"}
    17:19:void <init>(io.noties.markwon.html.jsoup.parser.Token$TokenType) -> <init>
    32:35:void reset(java.lang.StringBuilder) -> reset
io.noties.markwon.html.jsoup.parser.Token$CData -> io.noties.markwon.html.jsoup.parser.Token$CData:
# {"id":"sourceFile","fileName":"Token.java"}
    320:322:void <init>(java.lang.String) -> <init>
    326:326:java.lang.String toString() -> toString
io.noties.markwon.html.jsoup.parser.Token$Character -> io.noties.markwon.html.jsoup.parser.Token$Character:
# {"id":"sourceFile","fileName":"Token.java"}
    294:295:void <init>() -> <init>
    304:305:io.noties.markwon.html.jsoup.parser.Token$Character data(java.lang.String) -> data
    309:309:java.lang.String getData() -> getData
    299:300:io.noties.markwon.html.jsoup.parser.Token reset() -> reset
    314:314:java.lang.String toString() -> toString
io.noties.markwon.html.jsoup.parser.Token$Comment -> io.noties.markwon.html.jsoup.parser.Token$Comment:
# {"id":"sourceFile","fileName":"Token.java"}
    266:278:void <init>() -> <init>
    281:281:java.lang.String getData() -> getData
    271:273:io.noties.markwon.html.jsoup.parser.Token reset() -> reset
    286:286:java.lang.String toString() -> toString
io.noties.markwon.html.jsoup.parser.Token$Doctype -> io.noties.markwon.html.jsoup.parser.Token$Doctype:
# {"id":"sourceFile","fileName":"Token.java"}
    38:46:void <init>() -> <init>
    50:55:io.noties.markwon.html.jsoup.parser.Token reset() -> reset
io.noties.markwon.html.jsoup.parser.Token$EOF -> io.noties.markwon.html.jsoup.parser.Token$EOF:
# {"id":"sourceFile","fileName":"Token.java"}
    333:334:void <init>() -> <init>
    338:338:io.noties.markwon.html.jsoup.parser.Token reset() -> reset
io.noties.markwon.html.jsoup.parser.Token$EndTag -> io.noties.markwon.html.jsoup.parser.Token$EndTag:
# {"id":"sourceFile","fileName":"Token.java"}
    256:257:void <init>() -> <init>
    261:261:java.lang.String toString() -> toString
io.noties.markwon.html.jsoup.parser.Token$StartTag -> io.noties.markwon.html.jsoup.parser.Token$StartTag:
# {"id":"sourceFile","fileName":"Token.java"}
    226:228:void <init>() -> <init>
    224:224:io.noties.markwon.html.jsoup.parser.Token reset() -> reset
    232:235:io.noties.markwon.html.jsoup.parser.Token$Tag reset() -> reset
    247:250:java.lang.String toString() -> toString
io.noties.markwon.html.jsoup.parser.Token$Tag -> io.noties.markwon.html.jsoup.parser.Token$Tag:
# {"id":"sourceFile","fileName":"Token.java"}
    84:93:void <init>(io.noties.markwon.html.jsoup.parser.Token$TokenType) -> <init>
    177:178:void appendAttributeName(java.lang.String) -> appendAttributeName
    181:182:void appendAttributeName(char) -> appendAttributeName
    185:191:void appendAttributeValue(java.lang.String) -> appendAttributeValue
    194:196:void appendAttributeValue(char) -> appendAttributeValue
    204:208:void appendAttributeValue(int[]) -> appendAttributeValue
    168:170:void appendTagName(java.lang.String) -> appendTagName
    173:174:void appendTagName(char) -> appendTagName
    215:221:void ensureAttributeValue() -> ensureAttributeValue
    136:140:void finaliseTag() -> finaliseTag
    143:144:java.lang.String name() -> name
    152:154:io.noties.markwon.html.jsoup.parser.Token$Tag name(java.lang.String) -> name
    110:132:void newAttribute() -> newAttribute
    79:79:io.noties.markwon.html.jsoup.parser.Token reset() -> reset
    97:106:io.noties.markwon.html.jsoup.parser.Token$Tag reset() -> reset
    211:212:void setEmptyAttributeValue() -> setEmptyAttributeValue
io.noties.markwon.html.jsoup.parser.Token$TokenType -> io.noties.markwon.html.jsoup.parser.Token$TokenType:
# {"id":"sourceFile","fileName":"Token.java"}
    390:396:void <clinit>() -> <clinit>
    390:390:void <init>(java.lang.String,int) -> <init>
    390:390:io.noties.markwon.html.jsoup.parser.Token$TokenType valueOf(java.lang.String) -> valueOf
    390:390:io.noties.markwon.html.jsoup.parser.Token$TokenType[] values() -> values
io.noties.markwon.html.jsoup.parser.Tokeniser -> io.noties.markwon.html.jsoup.parser.Tokeniser:
# {"id":"sourceFile","fileName":"Tokeniser.java"}
    13:29:void <clinit>() -> <clinit>
    34:130:void <init>(io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.ParseErrorList) -> <init>
    125:127:void advanceTransition(io.noties.markwon.html.jsoup.parser.TokeniserState) -> advanceTransition
    241:241:java.lang.String appropriateEndTagName() -> appropriateEndTagName
    255:257:void characterReferenceError(java.lang.String) -> characterReferenceError
    132:201:int[] consumeCharacterReference(java.lang.Character,boolean) -> consumeCharacterReference
    217:218:void createCommentPending() -> createCommentPending
    225:226:void createDoctypePending() -> createDoctypePending
    207:208:io.noties.markwon.html.jsoup.parser.Token$Tag createTagPending(boolean) -> createTagPending
    233:234:void createTempBuffer() -> createTempBuffer
    75:88:void emit(io.noties.markwon.html.jsoup.parser.Token) -> emit
    93:102:void emit(java.lang.String) -> emit
    109:110:void emit(int[]) -> emit
    113:114:void emit(char) -> emit
    221:222:void emitCommentPending() -> emitCommentPending
    229:230:void emitDoctypePending() -> emitDoctypePending
    212:214:void emitTagPending() -> emitTagPending
    250:252:void eofError(io.noties.markwon.html.jsoup.parser.TokeniserState) -> eofError
    245:247:void error(io.noties.markwon.html.jsoup.parser.TokeniserState) -> error
    260:262:void error(java.lang.String) -> error
    237:237:boolean isAppropriateEndTagToken() -> isAppropriateEndTagToken
    55:70:io.noties.markwon.html.jsoup.parser.Token read() -> read
    121:122:void transition(io.noties.markwon.html.jsoup.parser.TokeniserState) -> transition
io.noties.markwon.html.jsoup.parser.TokeniserState -> io.noties.markwon.html.jsoup.parser.TokeniserState:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    8:1623:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    8:8:void <init>(java.lang.String,int,io.noties.markwon.html.jsoup.parser.TokeniserState$1) -> <init>
    8:8:void access$100(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.TokeniserState) -> access$100
    8:8:void access$200(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState,io.noties.markwon.html.jsoup.parser.TokeniserState) -> access$200
    8:8:java.lang.String access$300() -> access$300
    8:8:void access$400(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState,io.noties.markwon.html.jsoup.parser.TokeniserState) -> access$400
    8:8:void access$500(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState) -> access$500
    8:8:void access$600(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState,io.noties.markwon.html.jsoup.parser.TokeniserState) -> access$600
    1710:1736:void handleDataDoubleEscapeTag(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState,io.noties.markwon.html.jsoup.parser.TokeniserState) -> handleDataDoubleEscapeTag
    1631:1668:void handleDataEndTag(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState) -> handleDataEndTag
    1691:1697:void readCharRef(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.TokeniserState) -> readCharRef
    1671:1688:void readData(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState,io.noties.markwon.html.jsoup.parser.TokeniserState) -> readData
    1700:1707:void readEndTag(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader,io.noties.markwon.html.jsoup.parser.TokeniserState,io.noties.markwon.html.jsoup.parser.TokeniserState) -> readEndTag
    8:8:io.noties.markwon.html.jsoup.parser.TokeniserState valueOf(java.lang.String) -> valueOf
    8:8:io.noties.markwon.html.jsoup.parser.TokeniserState[] values() -> values
io.noties.markwon.html.jsoup.parser.TokeniserState$1 -> io.noties.markwon.html.jsoup.parser.TokeniserState$1:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    9:9:void <init>(java.lang.String,int) -> <init>
    12:31:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$10 -> io.noties.markwon.html.jsoup.parser.TokeniserState$10:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    141:141:void <init>(java.lang.String,int) -> <init>
    146:175:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$11 -> io.noties.markwon.html.jsoup.parser.TokeniserState$11:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    177:177:void <init>(java.lang.String,int) -> <init>
    180:194:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$12 -> io.noties.markwon.html.jsoup.parser.TokeniserState$12:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    196:196:void <init>(java.lang.String,int) -> <init>
    198:207:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$13 -> io.noties.markwon.html.jsoup.parser.TokeniserState$13:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    209:209:void <init>(java.lang.String,int) -> <init>
    250:253:void anythingElse(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> anythingElse
    211:247:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$14 -> io.noties.markwon.html.jsoup.parser.TokeniserState$14:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    255:255:void <init>(java.lang.String,int) -> <init>
    257:264:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$15 -> io.noties.markwon.html.jsoup.parser.TokeniserState$15:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    266:266:void <init>(java.lang.String,int) -> <init>
    268:269:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$16 -> io.noties.markwon.html.jsoup.parser.TokeniserState$16:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    271:271:void <init>(java.lang.String,int) -> <init>
    273:274:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$17 -> io.noties.markwon.html.jsoup.parser.TokeniserState$17:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    276:276:void <init>(java.lang.String,int) -> <init>
    278:292:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$18 -> io.noties.markwon.html.jsoup.parser.TokeniserState$18:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    294:294:void <init>(java.lang.String,int) -> <init>
    296:297:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$19 -> io.noties.markwon.html.jsoup.parser.TokeniserState$19:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    299:299:void <init>(java.lang.String,int) -> <init>
    301:302:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$2 -> io.noties.markwon.html.jsoup.parser.TokeniserState$2:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    33:33:void <init>(java.lang.String,int) -> <init>
    36:37:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$20 -> io.noties.markwon.html.jsoup.parser.TokeniserState$20:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    304:304:void <init>(java.lang.String,int) -> <init>
    306:312:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$21 -> io.noties.markwon.html.jsoup.parser.TokeniserState$21:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    314:314:void <init>(java.lang.String,int) -> <init>
    316:322:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$22 -> io.noties.markwon.html.jsoup.parser.TokeniserState$22:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    324:324:void <init>(java.lang.String,int) -> <init>
    326:349:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$23 -> io.noties.markwon.html.jsoup.parser.TokeniserState$23:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    351:351:void <init>(java.lang.String,int) -> <init>
    353:377:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$24 -> io.noties.markwon.html.jsoup.parser.TokeniserState$24:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    379:379:void <init>(java.lang.String,int) -> <init>
    381:408:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$25 -> io.noties.markwon.html.jsoup.parser.TokeniserState$25:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    410:410:void <init>(java.lang.String,int) -> <init>
    412:424:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$26 -> io.noties.markwon.html.jsoup.parser.TokeniserState$26:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    426:426:void <init>(java.lang.String,int) -> <init>
    428:437:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$27 -> io.noties.markwon.html.jsoup.parser.TokeniserState$27:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    439:439:void <init>(java.lang.String,int) -> <init>
    441:442:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$28 -> io.noties.markwon.html.jsoup.parser.TokeniserState$28:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    444:444:void <init>(java.lang.String,int) -> <init>
    446:447:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$29 -> io.noties.markwon.html.jsoup.parser.TokeniserState$29:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    449:449:void <init>(java.lang.String,int) -> <init>
    451:474:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$3 -> io.noties.markwon.html.jsoup.parser.TokeniserState$3:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    39:39:void <init>(java.lang.String,int) -> <init>
    42:62:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$30 -> io.noties.markwon.html.jsoup.parser.TokeniserState$30:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    476:476:void <init>(java.lang.String,int) -> <init>
    478:501:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$31 -> io.noties.markwon.html.jsoup.parser.TokeniserState$31:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    503:503:void <init>(java.lang.String,int) -> <init>
    505:531:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$32 -> io.noties.markwon.html.jsoup.parser.TokeniserState$32:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    533:533:void <init>(java.lang.String,int) -> <init>
    535:542:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$33 -> io.noties.markwon.html.jsoup.parser.TokeniserState$33:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    544:544:void <init>(java.lang.String,int) -> <init>
    546:547:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$34 -> io.noties.markwon.html.jsoup.parser.TokeniserState$34:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    549:549:void <init>(java.lang.String,int) -> <init>
    552:591:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$35 -> io.noties.markwon.html.jsoup.parser.TokeniserState$35:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    593:593:void <init>(java.lang.String,int) -> <init>
    596:635:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$36 -> io.noties.markwon.html.jsoup.parser.TokeniserState$36:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    637:637:void <init>(java.lang.String,int) -> <init>
    639:680:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$37 -> io.noties.markwon.html.jsoup.parser.TokeniserState$37:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    682:682:void <init>(java.lang.String,int) -> <init>
    684:729:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$38 -> io.noties.markwon.html.jsoup.parser.TokeniserState$38:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    731:731:void <init>(java.lang.String,int) -> <init>
    733:762:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$39 -> io.noties.markwon.html.jsoup.parser.TokeniserState$39:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    764:764:void <init>(java.lang.String,int) -> <init>
    766:795:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$4 -> io.noties.markwon.html.jsoup.parser.TokeniserState$4:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    64:64:void <init>(java.lang.String,int) -> <init>
    66:67:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$40 -> io.noties.markwon.html.jsoup.parser.TokeniserState$40:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    797:797:void <init>(java.lang.String,int) -> <init>
    799:843:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$41 -> io.noties.markwon.html.jsoup.parser.TokeniserState$41:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    846:846:void <init>(java.lang.String,int) -> <init>
    848:874:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$42 -> io.noties.markwon.html.jsoup.parser.TokeniserState$42:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    876:876:void <init>(java.lang.String,int) -> <init>
    878:894:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$43 -> io.noties.markwon.html.jsoup.parser.TokeniserState$43:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    896:896:void <init>(java.lang.String,int) -> <init>
    900:907:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$44 -> io.noties.markwon.html.jsoup.parser.TokeniserState$44:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    909:909:void <init>(java.lang.String,int) -> <init>
    911:926:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$45 -> io.noties.markwon.html.jsoup.parser.TokeniserState$45:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    928:928:void <init>(java.lang.String,int) -> <init>
    930:954:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$46 -> io.noties.markwon.html.jsoup.parser.TokeniserState$46:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    956:956:void <init>(java.lang.String,int) -> <init>
    958:982:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$47 -> io.noties.markwon.html.jsoup.parser.TokeniserState$47:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    984:984:void <init>(java.lang.String,int) -> <init>
    986:1004:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$48 -> io.noties.markwon.html.jsoup.parser.TokeniserState$48:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1006:1006:void <init>(java.lang.String,int) -> <init>
    1008:1027:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$49 -> io.noties.markwon.html.jsoup.parser.TokeniserState$49:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1029:1029:void <init>(java.lang.String,int) -> <init>
    1031:1060:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$5 -> io.noties.markwon.html.jsoup.parser.TokeniserState$5:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    69:69:void <init>(java.lang.String,int) -> <init>
    71:72:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$50 -> io.noties.markwon.html.jsoup.parser.TokeniserState$50:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1062:1062:void <init>(java.lang.String,int) -> <init>
    1064:1088:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$51 -> io.noties.markwon.html.jsoup.parser.TokeniserState$51:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1090:1090:void <init>(java.lang.String,int) -> <init>
    1092:1115:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$52 -> io.noties.markwon.html.jsoup.parser.TokeniserState$52:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1117:1117:void <init>(java.lang.String,int) -> <init>
    1119:1150:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$53 -> io.noties.markwon.html.jsoup.parser.TokeniserState$53:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1152:1152:void <init>(java.lang.String,int) -> <init>
    1154:1185:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$54 -> io.noties.markwon.html.jsoup.parser.TokeniserState$54:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1187:1187:void <init>(java.lang.String,int) -> <init>
    1189:1213:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$55 -> io.noties.markwon.html.jsoup.parser.TokeniserState$55:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1215:1215:void <init>(java.lang.String,int) -> <init>
    1217:1253:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$56 -> io.noties.markwon.html.jsoup.parser.TokeniserState$56:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1255:1255:void <init>(java.lang.String,int) -> <init>
    1257:1290:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$57 -> io.noties.markwon.html.jsoup.parser.TokeniserState$57:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1292:1292:void <init>(java.lang.String,int) -> <init>
    1294:1318:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$58 -> io.noties.markwon.html.jsoup.parser.TokeniserState$58:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1320:1320:void <init>(java.lang.String,int) -> <init>
    1322:1346:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$59 -> io.noties.markwon.html.jsoup.parser.TokeniserState$59:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1348:1348:void <init>(java.lang.String,int) -> <init>
    1350:1384:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$6 -> io.noties.markwon.html.jsoup.parser.TokeniserState$6:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    74:74:void <init>(java.lang.String,int) -> <init>
    76:77:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$60 -> io.noties.markwon.html.jsoup.parser.TokeniserState$60:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1386:1386:void <init>(java.lang.String,int) -> <init>
    1388:1421:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$61 -> io.noties.markwon.html.jsoup.parser.TokeniserState$61:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1423:1423:void <init>(java.lang.String,int) -> <init>
    1425:1461:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$62 -> io.noties.markwon.html.jsoup.parser.TokeniserState$62:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1463:1463:void <init>(java.lang.String,int) -> <init>
    1465:1498:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$63 -> io.noties.markwon.html.jsoup.parser.TokeniserState$63:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1500:1500:void <init>(java.lang.String,int) -> <init>
    1502:1526:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$64 -> io.noties.markwon.html.jsoup.parser.TokeniserState$64:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1528:1528:void <init>(java.lang.String,int) -> <init>
    1530:1554:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$65 -> io.noties.markwon.html.jsoup.parser.TokeniserState$65:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1556:1556:void <init>(java.lang.String,int) -> <init>
    1558:1581:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$66 -> io.noties.markwon.html.jsoup.parser.TokeniserState$66:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1583:1583:void <init>(java.lang.String,int) -> <init>
    1585:1599:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$67 -> io.noties.markwon.html.jsoup.parser.TokeniserState$67:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    1601:1601:void <init>(java.lang.String,int) -> <init>
    1603:1609:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$7 -> io.noties.markwon.html.jsoup.parser.TokeniserState$7:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    79:79:void <init>(java.lang.String,int) -> <init>
    81:95:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$8 -> io.noties.markwon.html.jsoup.parser.TokeniserState$8:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    97:97:void <init>(java.lang.String,int) -> <init>
    100:121:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.jsoup.parser.TokeniserState$9 -> io.noties.markwon.html.jsoup.parser.TokeniserState$9:
# {"id":"sourceFile","fileName":"TokeniserState.java"}
    123:123:void <init>(java.lang.String,int) -> <init>
    125:139:void read(io.noties.markwon.html.jsoup.parser.Tokeniser,io.noties.markwon.html.jsoup.parser.CharacterReader) -> read
io.noties.markwon.html.span.SubScriptSpan -> io.noties.markwon.html.span.SubScriptSpan:
# {"id":"sourceFile","fileName":"SubScriptSpan.java"}
    10:10:void <init>() -> <init>
    23:25:void apply(android.text.TextPaint) -> apply
    14:15:void updateDrawState(android.text.TextPaint) -> updateDrawState
    19:20:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.html.span.SuperScriptSpan -> io.noties.markwon.html.span.SuperScriptSpan:
# {"id":"sourceFile","fileName":"SuperScriptSpan.java"}
    10:10:void <init>() -> <init>
    23:25:void apply(android.text.TextPaint) -> apply
    14:15:void updateDrawState(android.text.TextPaint) -> updateDrawState
    19:20:void updateMeasureState(android.text.TextPaint) -> updateMeasureState
io.noties.markwon.html.tag.BlockquoteHandler -> io.noties.markwon.html.tag.BlockquoteHandler:
# {"id":"sourceFile","fileName":"BlockquoteHandler.java"}
    18:18:void <init>() -> <init>
    26:40:void handle(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlRenderer,io.noties.markwon.html.HtmlTag) -> handle
    45:45:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.EmphasisHandler -> io.noties.markwon.html.tag.EmphasisHandler:
# {"id":"sourceFile","fileName":"EmphasisHandler.java"}
    16:16:void <init>() -> <init>
    23:27:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    33:33:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.HeadingHandler -> io.noties.markwon.html.tag.HeadingHandler:
# {"id":"sourceFile","fileName":"HeadingHandler.java"}
    17:17:void <init>() -> <init>
    26:45:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    51:51:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.ImageHandler -> io.noties.markwon.html.tag.ImageHandler:
# {"id":"sourceFile","fileName":"ImageHandler.java"}
    43:45:void <init>(io.noties.markwon.html.tag.ImageHandler$ImageSizeParser) -> <init>
    37:37:io.noties.markwon.html.tag.ImageHandler create() -> create
    54:78:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    27:27:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.ImageHandler$ImageSizeParser -> io.noties.markwon.html.tag.ImageHandler$ImageSizeParser:
# {"id":"sourceFile","fileName":"ImageHandler.java"}
io.noties.markwon.html.tag.ImageSizeParserImpl -> io.noties.markwon.html.tag.ImageSizeParserImpl:
# {"id":"sourceFile","fileName":"ImageSizeParserImpl.java"}
    19:21:void <init>(io.noties.markwon.html.CssInlineStyleParser) -> <init>
    82:109:io.noties.markwon.image.ImageSize$Dimension dimension(java.lang.String) -> dimension
    29:75:io.noties.markwon.image.ImageSize parse(java.util.Map) -> parse
io.noties.markwon.html.tag.LinkHandler -> io.noties.markwon.html.tag.LinkHandler:
# {"id":"sourceFile","fileName":"LinkHandler.java"}
    19:19:void <init>() -> <init>
    23:36:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    42:42:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.ListHandler -> io.noties.markwon.html.tag.ListHandler:
# {"id":"sourceFile","fileName":"ListHandler.java"}
    20:20:void <init>() -> <init>
    78:85:int currentBulletListLevel(io.noties.markwon.html.HtmlTag$Block) -> currentBulletListLevel
    28:69:void handle(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlRenderer,io.noties.markwon.html.HtmlTag) -> handle
    74:74:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.SimpleTagHandler -> io.noties.markwon.html.tag.SimpleTagHandler:
# {"id":"sourceFile","fileName":"SimpleTagHandler.java"}
    16:16:void <init>() -> <init>
    32:40:void handle(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlRenderer,io.noties.markwon.html.HtmlTag) -> handle
io.noties.markwon.html.tag.StrikeHandler -> io.noties.markwon.html.tag.StrikeHandler:
# {"id":"sourceFile","fileName":"StrikeHandler.java"}
    30:36:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    64:70:java.lang.Object getMarkdownSpans(io.noties.markwon.MarkwonVisitor) -> getMarkdownSpans
    44:54:void handle(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlRenderer,io.noties.markwon.html.HtmlTag) -> handle
    59:59:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.StrongEmphasisHandler -> io.noties.markwon.html.tag.StrongEmphasisHandler:
# {"id":"sourceFile","fileName":"StrongEmphasisHandler.java"}
    16:16:void <init>() -> <init>
    23:27:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    33:33:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.SubScriptHandler -> io.noties.markwon.html.tag.SubScriptHandler:
# {"id":"sourceFile","fileName":"SubScriptHandler.java"}
    14:14:void <init>() -> <init>
    18:18:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    24:24:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.SuperScriptHandler -> io.noties.markwon.html.tag.SuperScriptHandler:
# {"id":"sourceFile","fileName":"SuperScriptHandler.java"}
    14:14:void <init>() -> <init>
    18:18:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps,io.noties.markwon.html.HtmlTag) -> getSpans
    24:24:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.html.tag.UnderlineHandler -> io.noties.markwon.html.tag.UnderlineHandler:
# {"id":"sourceFile","fileName":"UnderlineHandler.java"}
    16:16:void <init>() -> <init>
    27:37:void handle(io.noties.markwon.MarkwonVisitor,io.noties.markwon.html.MarkwonHtmlRenderer,io.noties.markwon.html.HtmlTag) -> handle
    42:42:java.util.Collection supportedTags() -> supportedTags
io.noties.markwon.image.AsyncDrawable -> io.noties.markwon.image.AsyncDrawable:
# {"id":"sourceFile","fileName":"AsyncDrawable.java"}
    35:55:void <init>(java.lang.String,io.noties.markwon.image.AsyncDrawableLoader,io.noties.markwon.image.ImageSizeResolver,io.noties.markwon.image.ImageSize) -> <init>
    325:328:void draw(android.graphics.Canvas) -> draw
    59:59:java.lang.String getDestination() -> getDestination
    68:68:io.noties.markwon.image.ImageSize getImageSize() -> getImageSize
    366:372:int getIntrinsicHeight() -> getIntrinsicHeight
    354:360:int getIntrinsicWidth() -> getIntrinsicWidth
    102:102:float getLastKnowTextSize() -> getLastKnowTextSize
    93:93:int getLastKnownCanvasWidth() -> getLastKnownCanvasWidth
    343:348:int getOpacity() -> getOpacity
    106:106:android.graphics.drawable.Drawable getResult() -> getResult
    110:110:boolean hasResult() -> hasResult
    266:290:void initBounds() -> initBounds
    315:321:void initWithKnownDimensions(int,float) -> initWithKnownDimensions
    114:114:boolean isAttached() -> isAttached
    297:307:android.graphics.Rect noDimensionsBounds(android.graphics.drawable.Drawable) -> noDimensionsBounds
    383:383:android.graphics.Rect resolveBounds() -> resolveBounds
    333:333:void setAlpha(int) -> setAlpha
    122:171:void setCallback2(android.graphics.drawable.Drawable$Callback) -> setCallback2
    338:338:void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    186:228:void setPlaceholderResult(android.graphics.drawable.Drawable) -> setPlaceholderResult
    233:244:void setResult(android.graphics.drawable.Drawable) -> setResult
    389:389:java.lang.String toString() -> toString
io.noties.markwon.image.AsyncDrawable$WrappedCallback -> io.noties.markwon.image.AsyncDrawable$WrappedCallback:
# {"id":"sourceFile","fileName":"AsyncDrawable.java"}
    405:407:void <init>(io.noties.markwon.image.AsyncDrawable,android.graphics.drawable.Drawable$Callback) -> <init>
    411:412:void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    416:417:void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    421:422:void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
io.noties.markwon.image.AsyncDrawableLoader -> io.noties.markwon.image.AsyncDrawableLoader:
# {"id":"sourceFile","fileName":"AsyncDrawableLoader.java"}
    8:8:void <init>() -> <init>
    15:15:io.noties.markwon.image.AsyncDrawableLoader noOp() -> noOp
io.noties.markwon.image.AsyncDrawableLoaderBuilder -> io.noties.markwon.image.AsyncDrawableLoaderBuilder:
# {"id":"sourceFile","fileName":"AsyncDrawableLoaderBuilder.java"}
    21:47:void <init>() -> <init>
    62:66:void addMediaDecoder(io.noties.markwon.image.MediaDecoder) -> addMediaDecoder
    55:59:void addSchemeHandler(io.noties.markwon.image.SchemeHandler) -> addSchemeHandler
    102:110:io.noties.markwon.image.AsyncDrawableLoader build() -> build
    114:118:void checkState() -> checkState
io.noties.markwon.image.AsyncDrawableLoaderImpl -> io.noties.markwon.image.AsyncDrawableLoaderImpl:
# {"id":"sourceFile","fileName":"AsyncDrawableLoaderImpl.java"}
    37:38:void <init>(io.noties.markwon.image.AsyncDrawableLoaderBuilder) -> <init>
    34:50:void <init>(io.noties.markwon.image.AsyncDrawableLoaderBuilder,android.os.Handler) -> <init>
    21:21:java.util.Map access$000(io.noties.markwon.image.AsyncDrawableLoaderImpl) -> access$000
    21:21:java.util.Map access$100(io.noties.markwon.image.AsyncDrawableLoaderImpl) -> access$100
    21:21:io.noties.markwon.image.MediaDecoder access$200(io.noties.markwon.image.AsyncDrawableLoaderImpl) -> access$200
    21:21:io.noties.markwon.image.ImagesPlugin$ErrorHandler access$300(io.noties.markwon.image.AsyncDrawableLoaderImpl) -> access$300
    21:21:java.util.Map access$400(io.noties.markwon.image.AsyncDrawableLoaderImpl) -> access$400
    21:21:android.os.Handler access$500(io.noties.markwon.image.AsyncDrawableLoaderImpl) -> access$500
    63:69:void cancel(io.noties.markwon.image.AsyncDrawable) -> cancel
    81:81:java.util.concurrent.Future execute(io.noties.markwon.image.AsyncDrawable) -> execute
    54:58:void load(io.noties.markwon.image.AsyncDrawable) -> load
    74:76:android.graphics.drawable.Drawable placeholder(io.noties.markwon.image.AsyncDrawable) -> placeholder
io.noties.markwon.image.AsyncDrawableLoaderImpl$1 -> io.noties.markwon.image.AsyncDrawableLoaderImpl$1:
# {"id":"sourceFile","fileName":"AsyncDrawableLoaderImpl.java"}
    81:81:void <init>(io.noties.markwon.image.AsyncDrawableLoaderImpl,io.noties.markwon.image.AsyncDrawable) -> <init>
    85:176:void run() -> run
io.noties.markwon.image.AsyncDrawableLoaderImpl$1$1 -> io.noties.markwon.image.AsyncDrawableLoaderImpl$1$1:
# {"id":"sourceFile","fileName":"AsyncDrawableLoaderImpl.java"}
    161:161:void <init>(io.noties.markwon.image.AsyncDrawableLoaderImpl$1,android.graphics.drawable.Drawable) -> <init>
    168:174:void run() -> run
io.noties.markwon.image.AsyncDrawableLoaderNoOp -> io.noties.markwon.image.AsyncDrawableLoaderNoOp:
# {"id":"sourceFile","fileName":"AsyncDrawableLoaderNoOp.java"}
    8:8:void <init>() -> <init>
    17:17:void cancel(io.noties.markwon.image.AsyncDrawable) -> cancel
    12:12:void load(io.noties.markwon.image.AsyncDrawable) -> load
    22:22:android.graphics.drawable.Drawable placeholder(io.noties.markwon.image.AsyncDrawable) -> placeholder
io.noties.markwon.image.AsyncDrawableScheduler -> io.noties.markwon.image.AsyncDrawableScheduler:
# {"id":"sourceFile","fileName":"AsyncDrawableScheduler.java"}
    94:107:io.noties.markwon.image.AsyncDrawableSpan[] extractSpans(android.widget.TextView) -> extractSpans
    28:70:void schedule(android.widget.TextView) -> schedule
    76:89:void unschedule(android.widget.TextView) -> unschedule
io.noties.markwon.image.AsyncDrawableScheduler$1 -> io.noties.markwon.image.AsyncDrawableScheduler$1:
# {"id":"sourceFile","fileName":"AsyncDrawableScheduler.java"}
    43:43:void <init>(android.widget.TextView) -> <init>
    47:47:void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    51:54:void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl -> io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl:
# {"id":"sourceFile","fileName":"AsyncDrawableScheduler.java"}
    129:133:void <init>(android.widget.TextView,io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl$Invalidator,android.graphics.Rect) -> <init>
    138:163:void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    167:169:void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    173:174:void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl$1 -> io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl$1:
# {"id":"sourceFile","fileName":"AsyncDrawableScheduler.java"}
    139:139:void <init>(io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl,android.graphics.drawable.Drawable) -> <init>
    142:143:void run() -> run
io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl$Invalidator -> io.noties.markwon.image.AsyncDrawableScheduler$DrawableCallbackImpl$Invalidator:
# {"id":"sourceFile","fileName":"AsyncDrawableScheduler.java"}
io.noties.markwon.image.AsyncDrawableScheduler$TextViewInvalidator -> io.noties.markwon.image.AsyncDrawableScheduler$TextViewInvalidator:
# {"id":"sourceFile","fileName":"AsyncDrawableScheduler.java"}
    181:183:void <init>(android.widget.TextView) -> <init>
    187:189:void invalidate() -> invalidate
    193:194:void run() -> run
io.noties.markwon.image.AsyncDrawableSpan -> io.noties.markwon.image.AsyncDrawableSpan:
# {"id":"sourceFile","fileName":"AsyncDrawableSpan.java"}
    40:49:void <init>(io.noties.markwon.core.MarkwonTheme,io.noties.markwon.image.AsyncDrawable,int,boolean) -> <init>
    104:143:void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    147:147:io.noties.markwon.image.AsyncDrawable getDrawable() -> getDrawable
    63:88:int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt) -> getSize
    152:152:float textCenterY(int,int,android.graphics.Paint) -> textCenterY
io.noties.markwon.image.DefaultMediaDecoder -> io.noties.markwon.image.DefaultMediaDecoder:
# {"id":"sourceFile","fileName":"DefaultMediaDecoder.java"}
    41:43:void <init>(android.content.res.Resources) -> <init>
    30:30:io.noties.markwon.image.DefaultMediaDecoder create() -> create
    52:57:android.graphics.drawable.Drawable decode(java.lang.String,java.io.InputStream) -> decode
    63:63:java.util.Collection supportedTypes() -> supportedTypes
io.noties.markwon.image.DrawableUtils -> io.noties.markwon.image.DrawableUtils:
# {"id":"sourceFile","fileName":"DrawableUtils.java"}
    21:22:void applyIntrinsicBounds(android.graphics.drawable.Drawable) -> applyIntrinsicBounds
    25:28:void applyIntrinsicBoundsIfEmpty(android.graphics.drawable.Drawable) -> applyIntrinsicBoundsIfEmpty
    17:17:android.graphics.Rect intrinsicBounds(android.graphics.drawable.Drawable) -> intrinsicBounds
io.noties.markwon.image.ImageItem -> io.noties.markwon.image.ImageItem:
# {"id":"sourceFile","fileName":"ImageItem.java"}
    13:13:void <init>(io.noties.markwon.image.ImageItem$1) -> <init>
    42:43:void <init>() -> <init>
    38:38:io.noties.markwon.image.ImageItem withDecodingNeeded(java.lang.String,java.io.InputStream) -> withDecodingNeeded
io.noties.markwon.image.ImageItem$1 -> io.noties.markwon.image.ImageItem$1:
# {"id":"sourceFile","fileName":"ImageItem.java"}
io.noties.markwon.image.ImageItem$WithDecodingNeeded -> io.noties.markwon.image.ImageItem$WithDecodingNeeded:
# {"id":"sourceFile","fileName":"ImageItem.java"}
    111:111:void <init>(java.lang.String,java.io.InputStream,io.noties.markwon.image.ImageItem$1) -> <init>
    118:121:void <init>(java.lang.String,java.io.InputStream) -> <init>
    125:125:java.lang.String contentType() -> contentType
    152:152:io.noties.markwon.image.ImageItem$WithDecodingNeeded getAsWithDecodingNeeded() -> getAsWithDecodingNeeded
    146:146:io.noties.markwon.image.ImageItem$WithResult getAsWithResult() -> getAsWithResult
    140:140:boolean hasDecodingNeeded() -> hasDecodingNeeded
    130:130:java.io.InputStream inputStream() -> inputStream
io.noties.markwon.image.ImageItem$WithResult -> io.noties.markwon.image.ImageItem$WithResult:
# {"id":"sourceFile","fileName":"ImageItem.java"}
io.noties.markwon.image.ImageProps -> io.noties.markwon.image.ImageProps:
# {"id":"sourceFile","fileName":"ImageProps.java"}
    10:15:void <clinit>() -> <clinit>
io.noties.markwon.image.ImageSize -> io.noties.markwon.image.ImageSize:
# {"id":"sourceFile","fileName":"ImageSize.java"}
    33:36:void <init>(io.noties.markwon.image.ImageSize$Dimension,io.noties.markwon.image.ImageSize$Dimension) -> <init>
    40:40:java.lang.String toString() -> toString
io.noties.markwon.image.ImageSize$Dimension -> io.noties.markwon.image.ImageSize$Dimension:
# {"id":"sourceFile","fileName":"ImageSize.java"}
    16:19:void <init>(float,java.lang.String) -> <init>
    23:23:java.lang.String toString() -> toString
io.noties.markwon.image.ImageSizeResolver -> io.noties.markwon.image.ImageSizeResolver:
# {"id":"sourceFile","fileName":"ImageSizeResolver.java"}
    12:12:void <init>() -> <init>
io.noties.markwon.image.ImageSizeResolverDef -> io.noties.markwon.image.ImageSizeResolverDef:
# {"id":"sourceFile","fileName":"ImageSizeResolverDef.java"}
    12:12:void <init>() -> <init>
    103:108:int resolveAbsolute(io.noties.markwon.image.ImageSize$Dimension,int,float) -> resolveAbsolute
    21:25:android.graphics.Rect resolveImageSize(io.noties.markwon.image.AsyncDrawable) -> resolveImageSize
    36:98:android.graphics.Rect resolveImageSize(io.noties.markwon.image.ImageSize,android.graphics.Rect,int,float) -> resolveImageSize
io.noties.markwon.image.ImageSpanFactory -> io.noties.markwon.image.ImageSpanFactory:
# {"id":"sourceFile","fileName":"ImageSpanFactory.java"}
    10:10:void <init>() -> <init>
    14:23:java.lang.Object getSpans(io.noties.markwon.MarkwonConfiguration,io.noties.markwon.RenderProps) -> getSpans
io.noties.markwon.image.ImagesPlugin -> io.noties.markwon.image.ImagesPlugin:
# {"id":"sourceFile","fileName":"ImagesPlugin.java"}
    79:80:void <init>() -> <init>
    84:86:void <init>(io.noties.markwon.image.AsyncDrawableLoaderBuilder) -> <init>
    192:193:void afterSetText(android.widget.TextView) -> afterSetText
    187:188:void beforeSetText(android.widget.TextView,android.text.Spanned) -> beforeSetText
    177:178:void configureConfiguration(io.noties.markwon.MarkwonConfiguration$Builder) -> configureConfiguration
    182:183:void configureSpansFactory(io.noties.markwon.MarkwonSpansFactory$Builder) -> configureSpansFactory
    65:65:io.noties.markwon.image.ImagesPlugin create() -> create
io.noties.markwon.image.ImagesPlugin$ErrorHandler -> io.noties.markwon.image.ImagesPlugin$ErrorHandler:
# {"id":"sourceFile","fileName":"ImagesPlugin.java"}
io.noties.markwon.image.MediaDecoder -> io.noties.markwon.image.MediaDecoder:
# {"id":"sourceFile","fileName":"MediaDecoder.java"}
    14:14:void <init>() -> <init>
io.noties.markwon.image.SchemeHandler -> io.noties.markwon.image.SchemeHandler:
# {"id":"sourceFile","fileName":"SchemeHandler.java"}
    12:12:void <init>() -> <init>
io.noties.markwon.image.data.DataUri -> io.noties.markwon.image.data.DataUri:
# {"id":"sourceFile","fileName":"DataUri.java"}
    11:15:void <init>(java.lang.String,boolean,java.lang.String) -> <init>
    23:23:boolean base64() -> base64
    19:19:java.lang.String contentType() -> contentType
    28:28:java.lang.String data() -> data
    42:50:boolean equals(java.lang.Object) -> equals
    55:58:int hashCode() -> hashCode
    33:33:java.lang.String toString() -> toString
io.noties.markwon.image.data.DataUriDecoder -> io.noties.markwon.image.data.DataUriDecoder:
# {"id":"sourceFile","fileName":"DataUriDecoder.java"}
    8:8:void <init>() -> <init>
    15:15:io.noties.markwon.image.data.DataUriDecoder create() -> create
io.noties.markwon.image.data.DataUriDecoder$Impl -> io.noties.markwon.image.data.DataUriDecoder$Impl:
# {"id":"sourceFile","fileName":"DataUriDecoder.java"}
    18:18:void <init>() -> <init>
    26:35:byte[] decode(io.noties.markwon.image.data.DataUri) -> decode
io.noties.markwon.image.data.DataUriParser -> io.noties.markwon.image.data.DataUriParser:
# {"id":"sourceFile","fileName":"DataUriParser.java"}
    6:6:void <init>() -> <init>
    14:14:io.noties.markwon.image.data.DataUriParser create() -> create
io.noties.markwon.image.data.DataUriParser$Impl -> io.noties.markwon.image.data.DataUriParser$Impl:
# {"id":"sourceFile","fileName":"DataUriParser.java"}
    17:17:void <init>() -> <init>
    23:76:io.noties.markwon.image.data.DataUri parse(java.lang.String) -> parse
io.noties.markwon.image.data.DataUriSchemeHandler -> io.noties.markwon.image.data.DataUriSchemeHandler:
# {"id":"sourceFile","fileName":"DataUriSchemeHandler.java"}
    31:34:void <init>(io.noties.markwon.image.data.DataUriParser,io.noties.markwon.image.data.DataUriDecoder) -> <init>
    22:22:io.noties.markwon.image.data.DataUriSchemeHandler create() -> create
    40:63:io.noties.markwon.image.ImageItem handle(java.lang.String,android.net.Uri) -> handle
    70:70:java.util.Collection supportedSchemes() -> supportedSchemes
io.noties.markwon.image.destination.ImageDestinationProcessor -> io.noties.markwon.image.destination.ImageDestinationProcessor:
# {"id":"sourceFile","fileName":"ImageDestinationProcessor.java"}
    10:10:void <init>() -> <init>
    16:16:io.noties.markwon.image.destination.ImageDestinationProcessor noOp() -> noOp
io.noties.markwon.image.destination.ImageDestinationProcessor$1 -> io.noties.markwon.image.destination.ImageDestinationProcessor$1:
# {"id":"sourceFile","fileName":"ImageDestinationProcessor.java"}
io.noties.markwon.image.destination.ImageDestinationProcessor$NoOp -> io.noties.markwon.image.destination.ImageDestinationProcessor$NoOp:
# {"id":"sourceFile","fileName":"ImageDestinationProcessor.java"}
    19:19:void <init>() -> <init>
    19:19:void <init>(io.noties.markwon.image.destination.ImageDestinationProcessor$1) -> <init>
    24:24:java.lang.String process(java.lang.String) -> process
io.noties.markwon.image.gif.GifMediaDecoder -> io.noties.markwon.image.gif.GifMediaDecoder:
# {"id":"sourceFile","fileName":"GifMediaDecoder.java"}
    42:47:void <init>(boolean) -> <init>
    32:32:io.noties.markwon.image.gif.GifMediaDecoder create() -> create
    37:37:io.noties.markwon.image.gif.GifMediaDecoder create(boolean) -> create
    55:71:android.graphics.drawable.Drawable decode(java.lang.String,java.io.InputStream) -> decode
    82:82:pl.droidsonroids.gif.GifDrawable newGifDrawable(byte[]) -> newGifDrawable
    87:94:byte[] readBytes(java.io.InputStream) -> readBytes
    77:77:java.util.Collection supportedTypes() -> supportedTypes
    98:101:void validate() -> validate
io.noties.markwon.image.gif.GifSupport -> io.noties.markwon.image.gif.GifSupport:
# {"id":"sourceFile","fileName":"GifSupport.java"}
    18:27:void <clinit>() -> <clinit>
    30:30:boolean hasGifSupport() -> hasGifSupport
    38:38:java.lang.String missingMessage() -> missingMessage
io.noties.markwon.image.network.NetworkSchemeHandler -> io.noties.markwon.image.network.NetworkSchemeHandler:
# {"id":"sourceFile","fileName":"NetworkSchemeHandler.java"}
    35:37:void <init>() -> <init>
    75:84:java.lang.String contentType(java.lang.String) -> contentType
    31:31:io.noties.markwon.image.network.NetworkSchemeHandler create() -> create
    46:63:io.noties.markwon.image.ImageItem handle(java.lang.String,android.net.Uri) -> handle
    69:69:java.util.Collection supportedSchemes() -> supportedSchemes
io.noties.markwon.image.svg.SvgMediaDecoder -> io.noties.markwon.image.svg.SvgMediaDecoder:
# {"id":"sourceFile","fileName":"SvgMediaDecoder.java"}
    45:50:void <init>(android.content.res.Resources) -> <init>
    34:34:io.noties.markwon.image.svg.SvgMediaDecoder create() -> create
    39:39:io.noties.markwon.image.svg.SvgMediaDecoder create(android.content.res.Resources) -> create
    58:75:android.graphics.drawable.Drawable decode(java.lang.String,java.io.InputStream) -> decode
    81:81:java.util.Collection supportedTypes() -> supportedTypes
    85:88:void validate() -> validate
io.noties.markwon.image.svg.SvgSupport -> io.noties.markwon.image.svg.SvgSupport:
# {"id":"sourceFile","fileName":"SvgSupport.java"}
    17:26:void <clinit>() -> <clinit>
    29:29:boolean hasSvgSupport() -> hasSvgSupport
    37:37:java.lang.String missingMessage() -> missingMessage
io.noties.markwon.inlineparser.AutolinkInlineProcessor -> io.noties.markwon.inlineparser.AutolinkInlineProcessor:
# {"id":"sourceFile","fileName":"AutolinkInlineProcessor.java"}
    16:20:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    30:41:org.commonmark.node.Node parse() -> parse
    24:24:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.BackslashInlineProcessor -> io.noties.markwon.inlineparser.BackslashInlineProcessor:
# {"id":"sourceFile","fileName":"BackslashInlineProcessor.java"}
    13:13:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    22:33:org.commonmark.node.Node parse() -> parse
    17:17:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.BackticksInlineProcessor -> io.noties.markwon.inlineparser.BackticksInlineProcessor:
# {"id":"sourceFile","fileName":"BackticksInlineProcessor.java"}
    16:18:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    27:54:org.commonmark.node.Node parse() -> parse
    22:22:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.BangInlineProcessor -> io.noties.markwon.inlineparser.BangInlineProcessor:
# {"id":"sourceFile","fileName":"BangInlineProcessor.java"}
    12:12:void <init>() -> <init>
    20:32:org.commonmark.node.Node parse() -> parse
    15:15:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.CloseBracketInlineProcessor -> io.noties.markwon.inlineparser.CloseBracketInlineProcessor:
# {"id":"sourceFile","fileName":"CloseBracketInlineProcessor.java"}
    22:22:void <clinit>() -> <clinit>
    20:20:void <init>() -> <init>
    31:137:org.commonmark.node.Node parse() -> parse
    26:26:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.EntityInlineProcessor -> io.noties.markwon.inlineparser.EntityInlineProcessor:
# {"id":"sourceFile","fileName":"EntityInlineProcessor.java"}
    16:16:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    26:29:org.commonmark.node.Node parse() -> parse
    20:20:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.HtmlInlineProcessor -> io.noties.markwon.inlineparser.HtmlInlineProcessor:
# {"id":"sourceFile","fileName":"HtmlInlineProcessor.java"}
    22:22:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    31:37:org.commonmark.node.Node parse() -> parse
    26:26:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.InlineParserUtils -> io.noties.markwon.inlineparser.InlineParserUtils:
# {"id":"sourceFile","fileName":"InlineParserUtils.java"}
    22:27:void mergeChildTextNodes(org.commonmark.node.Node) -> mergeChildTextNodes
    59:73:void mergeIfNeeded(org.commonmark.node.Text,org.commonmark.node.Text,int) -> mergeIfNeeded
    13:18:void mergeTextNodesBetweenExclusive(org.commonmark.node.Node,org.commonmark.node.Node) -> mergeTextNodesBetweenExclusive
    30:56:void mergeTextNodesInclusive(org.commonmark.node.Node,org.commonmark.node.Node) -> mergeTextNodesInclusive
io.noties.markwon.inlineparser.InlineProcessor -> io.noties.markwon.inlineparser.InlineProcessor:
# {"id":"sourceFile","fileName":"InlineProcessor.java"}
    29:29:void <init>() -> <init>
    72:73:void addBracket(org.commonmark.internal.Bracket) -> addBracket
    64:64:org.commonmark.internal.Bracket lastBracket() -> lastBracket
    68:68:org.commonmark.internal.Delimiter lastDelimiter() -> lastDelimiter
    88:95:java.lang.String match(java.util.regex.Pattern) -> match
    50:60:org.commonmark.node.Node parse(io.noties.markwon.inlineparser.MarkwonInlineParserContext) -> parse
    100:103:java.lang.String parseLinkDestination() -> parseLinkDestination
    115:118:int parseLinkLabel() -> parseLinkLabel
    108:111:java.lang.String parseLinkTitle() -> parseLinkTitle
    138:139:char peek() -> peek
    122:125:void processDelimiters(org.commonmark.internal.Delimiter) -> processDelimiters
    76:77:void removeLastBracket() -> removeLastBracket
    80:83:void spnl() -> spnl
    129:129:org.commonmark.node.Text text(java.lang.String) -> text
    134:134:org.commonmark.node.Text text(java.lang.String,int,int) -> text
io.noties.markwon.inlineparser.MarkwonInlineParser -> io.noties.markwon.inlineparser.MarkwonInlineParser:
# {"id":"sourceFile","fileName":"MarkwonInlineParser.java"}
    103:111:void <clinit>() -> <clinit>
    143:151:void <init>(org.commonmark.parser.InlineParserContext,boolean,java.util.List,java.util.List) -> <init>
    388:392:void addBracket(org.commonmark.internal.Bracket) -> addBracket
    214:218:void addDelimiterProcessorForChar(char,org.commonmark.parser.delimiter.DelimiterProcessor,java.util.Map) -> addDelimiterProcessorForChar
    188:211:void addDelimiterProcessors(java.lang.Iterable,java.util.Map) -> addDelimiterProcessors
    357:357:org.commonmark.node.Node block() -> block
    182:184:java.util.Map calculateDelimiterProcessors(java.util.List) -> calculateDelimiterProcessors
    155:166:java.util.Map calculateInlines(java.util.List) -> calculateInlines
    171:178:java.util.BitSet calculateSpecialCharacters(java.util.Set,java.util.Set) -> calculateSpecialCharacters
    89:89:io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder factoryBuilder() -> factoryBuilder
    337:339:org.commonmark.node.LinkReferenceDefinition getLinkReferenceDefinition(java.lang.String) -> getLinkReferenceDefinition
    368:368:int index() -> index
    363:363:java.lang.String input() -> input
    378:378:org.commonmark.internal.Bracket lastBracket() -> lastBracket
    383:383:org.commonmark.internal.Delimiter lastDelimiter() -> lastDelimiter
    308:318:java.lang.String match(java.util.regex.Pattern) -> match
    225:241:void parse(java.lang.String,org.commonmark.node.Node) -> parse
    412:430:org.commonmark.node.Node parseDelimiters(org.commonmark.parser.delimiter.DelimiterProcessor,char) -> parseDelimiters
    258:298:org.commonmark.node.Node parseInline() -> parseInline
    439:453:java.lang.String parseLinkDestination() -> parseLinkDestination
    478:493:int parseLinkLabel() -> parseLinkLabel
    462:470:java.lang.String parseLinkTitle() -> parseLinkTitle
    500:511:org.commonmark.node.Node parseString() -> parseString
    347:350:char peek() -> peek
    569:660:void processDelimiters(org.commonmark.internal.Delimiter) -> processDelimiters
    688:697:void removeDelimiter(org.commonmark.internal.Delimiter) -> removeDelimiter
    675:678:void removeDelimiterAndNode(org.commonmark.internal.Delimiter) -> removeDelimiterAndNode
    684:685:void removeDelimiterKeepNode(org.commonmark.internal.Delimiter) -> removeDelimiterKeepNode
    663:669:void removeDelimitersBetween(org.commonmark.internal.Delimiter,org.commonmark.internal.Delimiter) -> removeDelimitersBetween
    396:397:void removeLastBracket() -> removeLastBracket
    244:248:void reset(java.lang.String) -> reset
    522:563:io.noties.markwon.inlineparser.MarkwonInlineParser$DelimiterData scanDelimiters(org.commonmark.parser.delimiter.DelimiterProcessor,char) -> scanDelimiters
    373:374:void setIndex(int) -> setIndex
    404:405:void spnl() -> spnl
    325:325:org.commonmark.node.Text text(java.lang.String) -> text
    331:331:org.commonmark.node.Text text(java.lang.String,int,int) -> text
io.noties.markwon.inlineparser.MarkwonInlineParser$DelimiterData -> io.noties.markwon.inlineparser.MarkwonInlineParser$DelimiterData:
# {"id":"sourceFile","fileName":"MarkwonInlineParser.java"}
    705:709:void <init>(int,boolean,boolean) -> <init>
io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder -> io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder:
# {"id":"sourceFile","fileName":"MarkwonInlineParser.java"}
io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilderImpl -> io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilderImpl:
# {"id":"sourceFile","fileName":"MarkwonInlineParser.java"}
    712:715:void <init>() -> <init>
    721:722:io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder addInlineProcessor(io.noties.markwon.inlineparser.InlineProcessor) -> addInlineProcessor
    791:791:org.commonmark.parser.InlineParserFactory build() -> build
    744:761:io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder includeDefaults() -> includeDefaults
io.noties.markwon.inlineparser.MarkwonInlineParser$InlineParserFactoryImpl -> io.noties.markwon.inlineparser.MarkwonInlineParser$InlineParserFactoryImpl:
# {"id":"sourceFile","fileName":"MarkwonInlineParser.java"}
    804:808:void <init>(boolean,java.util.List,java.util.List) -> <init>
    813:824:org.commonmark.parser.InlineParser create(org.commonmark.parser.InlineParserContext) -> create
io.noties.markwon.inlineparser.MarkwonInlineParserContext -> io.noties.markwon.inlineparser.MarkwonInlineParserContext:
# {"id":"sourceFile","fileName":"MarkwonInlineParserContext.java"}
io.noties.markwon.inlineparser.MarkwonInlineParserPlugin -> io.noties.markwon.inlineparser.MarkwonInlineParserPlugin:
# {"id":"sourceFile","fileName":"MarkwonInlineParserPlugin.java"}
    46:48:void <init>(io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder) -> <init>
    52:53:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    20:20:io.noties.markwon.inlineparser.MarkwonInlineParserPlugin create() -> create
    32:32:io.noties.markwon.inlineparser.MarkwonInlineParserPlugin create(io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder) -> create
    57:57:io.noties.markwon.inlineparser.MarkwonInlineParser$FactoryBuilder factoryBuilder() -> factoryBuilder
io.noties.markwon.inlineparser.NewLineInlineProcessor -> io.noties.markwon.inlineparser.NewLineInlineProcessor:
# {"id":"sourceFile","fileName":"NewLineInlineProcessor.java"}
    16:16:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    25:45:org.commonmark.node.Node parse() -> parse
    20:20:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.OpenBracketInlineProcessor -> io.noties.markwon.inlineparser.OpenBracketInlineProcessor:
# {"id":"sourceFile","fileName":"OpenBracketInlineProcessor.java"}
    12:12:void <init>() -> <init>
    20:28:org.commonmark.node.Node parse() -> parse
    15:15:char specialCharacter() -> specialCharacter
io.noties.markwon.inlineparser.StaggeredDelimiterProcessor -> io.noties.markwon.inlineparser.StaggeredDelimiterProcessor:
# {"id":"sourceFile","fileName":"StaggeredDelimiterProcessor.java"}
    13:18:void <init>(char) -> <init>
    36:55:void add(org.commonmark.parser.delimiter.DelimiterProcessor) -> add
    58:63:org.commonmark.parser.delimiter.DelimiterProcessor findProcessor(int) -> findProcessor
    27:27:char getClosingCharacter() -> getClosingCharacter
    68:68:int getDelimiterUse(org.commonmark.parser.delimiter.DelimiterRun,org.commonmark.parser.delimiter.DelimiterRun) -> getDelimiterUse
    32:32:int getMinLength() -> getMinLength
    22:22:char getOpeningCharacter() -> getOpeningCharacter
    73:74:void process(org.commonmark.node.Text,org.commonmark.node.Text,int) -> process
io.noties.markwon.linkify.LinkifyPlugin -> io.noties.markwon.linkify.LinkifyPlugin:
# {"id":"sourceFile","fileName":"LinkifyPlugin.java"}
    72:75:void <init>(int,boolean) -> <init>
    25:25:boolean access$000(io.noties.markwon.linkify.LinkifyPlugin) -> access$000
    25:25:int access$100(io.noties.markwon.linkify.LinkifyPlugin) -> access$100
    79:92:void configure(io.noties.markwon.MarkwonPlugin$Registry) -> configure
    38:38:io.noties.markwon.linkify.LinkifyPlugin create() -> create
    49:49:io.noties.markwon.linkify.LinkifyPlugin create(boolean) -> create
    65:65:io.noties.markwon.linkify.LinkifyPlugin create(int,boolean) -> create
io.noties.markwon.linkify.LinkifyPlugin$1 -> io.noties.markwon.linkify.LinkifyPlugin$1:
# {"id":"sourceFile","fileName":"LinkifyPlugin.java"}
    79:79:void <init>(io.noties.markwon.linkify.LinkifyPlugin) -> <init>
    79:79:void apply(io.noties.markwon.MarkwonPlugin) -> apply
    84:90:void apply(io.noties.markwon.core.CorePlugin) -> apply
io.noties.markwon.linkify.LinkifyPlugin$LinkifyCompatTextAddedListener -> io.noties.markwon.linkify.LinkifyPlugin$LinkifyCompatTextAddedListener:
# {"id":"sourceFile","fileName":"LinkifyPlugin.java"}
    147:148:void <init>(int) -> <init>
    152:152:boolean addLinks(android.text.Spannable,int) -> addLinks
io.noties.markwon.linkify.LinkifyPlugin$LinkifyTextAddedListener -> io.noties.markwon.linkify.LinkifyPlugin$LinkifyTextAddedListener:
# {"id":"sourceFile","fileName":"LinkifyPlugin.java"}
    98:100:void <init>(int) -> <init>
    139:139:boolean addLinks(android.text.Spannable,int) -> addLinks
    107:136:void onTextAdded(io.noties.markwon.MarkwonVisitor,java.lang.String,int) -> onTextAdded
io.noties.markwon.simple.ext.SimpleExtBuilder -> io.noties.markwon.simple.ext.SimpleExtBuilder:
# {"id":"sourceFile","fileName":"SimpleExtBuilder.java"}
    13:15:void <init>() -> <init>
    51:55:java.util.List build() -> build
    59:63:void checkState() -> checkState
io.noties.markwon.simple.ext.SimpleExtNode -> io.noties.markwon.simple.ext.SimpleExtNode:
# {"id":"sourceFile","fileName":"SimpleExtNode.java"}
io.noties.markwon.simple.ext.SimpleExtPlugin -> io.noties.markwon.simple.ext.SimpleExtPlugin:
# {"id":"sourceFile","fileName":"SimpleExtPlugin.java"}
    34:38:void <init>() -> <init>
    61:64:void configureParser(org.commonmark.parser.Parser$Builder) -> configureParser
    68:84:void configureVisitor(io.noties.markwon.MarkwonVisitor$Builder) -> configureVisitor
    24:24:io.noties.markwon.simple.ext.SimpleExtPlugin create() -> create
io.noties.markwon.simple.ext.SimpleExtPlugin$1 -> io.noties.markwon.simple.ext.SimpleExtPlugin$1:
# {"id":"sourceFile","fileName":"SimpleExtPlugin.java"}
    68:68:void <init>(io.noties.markwon.simple.ext.SimpleExtPlugin) -> <init>
    68:68:void visit(io.noties.markwon.MarkwonVisitor,org.commonmark.node.Node) -> visit
    72:82:void visit(io.noties.markwon.MarkwonVisitor,io.noties.markwon.simple.ext.SimpleExtNode) -> visit
io.noties.markwon.simple.ext.SimpleExtPlugin$1$$ExternalSyntheticThrowCCEIfNotNull0 -> io.noties.markwon.simple.ext.SimpleExtPlugin$1$$ExternalSyntheticThrowCCEIfNotNull0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    0:0:void io.noties.markwon.simple.ext.SimpleExtPlugin$1$$InternalSyntheticThrowCCEIfNotNull$6$81246becc8f09cf7f95b86d48a2ac0a3ca73bd6eeb4bd67c861c57eee27bf3f2$0.m(java.lang.Object) -> m
      # {"id":"com.android.tools.r8.synthesized"}
io.noties.markwon.syntax.SyntaxHighlight -> io.noties.markwon.syntax.SyntaxHighlight:
# {"id":"sourceFile","fileName":"SyntaxHighlight.java"}
io.noties.markwon.syntax.SyntaxHighlightNoOp -> io.noties.markwon.syntax.SyntaxHighlightNoOp:
# {"id":"sourceFile","fileName":"SyntaxHighlightNoOp.java"}
    6:6:void <init>() -> <init>
    10:10:java.lang.CharSequence highlight(java.lang.String,java.lang.String) -> highlight
io.noties.markwon.utils.ColorUtils -> io.noties.markwon.utils.ColorUtils:
# {"id":"sourceFile","fileName":"ColorUtils.java"}
    15:15:int applyAlpha(int,int) -> applyAlpha
io.noties.markwon.utils.Dip -> io.noties.markwon.utils.Dip:
# {"id":"sourceFile","fileName":"Dip.java"}
    22:24:void <init>(float) -> <init>
    11:11:io.noties.markwon.utils.Dip create(android.content.Context) -> create
    27:27:int toPx(int) -> toPx
io.noties.markwon.utils.LeadingMarginUtils -> io.noties.markwon.utils.LeadingMarginUtils:
# {"id":"sourceFile","fileName":"LeadingMarginUtils.java"}
    12:12:boolean selfEnd(int,java.lang.CharSequence,java.lang.Object) -> selfEnd
    8:8:boolean selfStart(int,java.lang.CharSequence,java.lang.Object) -> selfStart
io.noties.markwon.utils.ParserUtils -> io.noties.markwon.utils.ParserUtils:
# {"id":"sourceFile","fileName":"ParserUtils.java"}
    13:21:void moveChildren(org.commonmark.node.Node,org.commonmark.node.Node) -> moveChildren
io.noties.markwon.utils.SpanUtils -> io.noties.markwon.utils.SpanUtils:
# {"id":"sourceFile","fileName":"SpanUtils.java"}
    23:40:int width(android.graphics.Canvas,java.lang.CharSequence) -> width
org.client.scrcpy.App -> org.client.scrcpy.App:
# {"id":"sourceFile","fileName":"App.java"}
    0:0:void $r8$lambda$fNc1MhoapwmJG2dR3T4QI6wEM0Q() -> $r8$lambda$fNc1MhoapwmJG2dR3T4QI6wEM0Q
      # {"id":"com.android.tools.r8.synthesized"}
    26:28:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    81:94:java.lang.String adbCmd(java.lang.String[]) -> adbCmd
    39:42:void attachBaseContext(android.content.Context) -> attachBaseContext
    45:49:void init() -> init
    71:76:void lambda$startAdbServer$0() -> lambda$startAdbServer$0
    99:100:void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    129:130:void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
    115:115:void onActivityPaused(android.app.Activity) -> onActivityPaused
    110:110:void onActivityResumed(android.app.Activity) -> onActivityResumed
    125:125:void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    105:105:void onActivityStarted(android.app.Activity) -> onActivityStarted
    120:120:void onActivityStopped(android.app.Activity) -> onActivityStopped
    32:35:void onCreate() -> onCreate
    64:77:void startAdbServer() -> startAdbServer
org.client.scrcpy.App$$ExternalSyntheticLambda0 -> org.client.scrcpy.App$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    void org.client.scrcpy.App$$InternalSyntheticLambda$1$275fd4ed511387f8a17a86417540aa55446cf733c6720647c16a7bee67906f0b$0.<init>() -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.App$$InternalSyntheticLambda$1$275fd4ed511387f8a17a86417540aa55446cf733c6720647c16a7bee67906f0b$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.Dialog -> org.client.scrcpy.Dialog:
# {"id":"sourceFile","fileName":"Dialog.java"}
    0:0:void $r8$lambda$fd4stfrlgKxk96kjL1Oqr-gs7ug() -> $r8$lambda$fd4stfrlgKxk96kjL1Oqr-gs7ug
      # {"id":"com.android.tools.r8.synthesized"}
    28:28:void <clinit>() -> <clinit>
    31:32:void <init>(android.app.Activity,java.lang.String,java.lang.String,java.lang.Runnable,java.lang.Runnable) -> <init>
    35:36:void <init>(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.Runnable,java.lang.Runnable) -> <init>
    23:48:void <init>(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable) -> <init>
    13:13:java.util.ArrayList access$000() -> access$000
    13:13:android.app.AlertDialog access$100(org.client.scrcpy.Dialog) -> access$100
    13:13:java.lang.Runnable access$200(org.client.scrcpy.Dialog) -> access$200
    13:13:boolean access$300(org.client.scrcpy.Dialog) -> access$300
    13:13:org.client.scrcpy.Dialog$EditCallback access$400(org.client.scrcpy.Dialog) -> access$400
    13:13:java.lang.Runnable access$500(org.client.scrcpy.Dialog) -> access$500
    13:13:java.lang.Runnable access$600(org.client.scrcpy.Dialog) -> access$600
    122:124:void displayDialog(android.app.Activity,java.lang.String,java.lang.String,java.lang.Runnable,boolean) -> displayDialog
    131:132:void displayDialog(android.app.Activity,java.lang.String,java.lang.String,java.lang.Runnable,java.lang.Runnable) -> displayDialog
    123:123:void lambda$displayDialog$1() -> lambda$displayDialog$1
    154:255:void run() -> run
org.client.scrcpy.Dialog$$ExternalSyntheticLambda0 -> org.client.scrcpy.Dialog$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    void org.client.scrcpy.Dialog$$InternalSyntheticLambda$2$2f41ec7e1e86dee383796dc7b8f3a4e27f389a51874fee5c23e3c8d8b8a18049$0.<init>() -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.Dialog$$InternalSyntheticLambda$2$2f41ec7e1e86dee383796dc7b8f3a4e27f389a51874fee5c23e3c8d8b8a18049$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.Dialog$2 -> org.client.scrcpy.Dialog$2:
# {"id":"sourceFile","fileName":"Dialog.java"}
    173:173:void <init>(org.client.scrcpy.Dialog,android.widget.EditText) -> <init>
    175:186:void onClick(android.content.DialogInterface,int) -> onClick
org.client.scrcpy.Dialog$3 -> org.client.scrcpy.Dialog$3:
# {"id":"sourceFile","fileName":"Dialog.java"}
    189:189:void <init>(org.client.scrcpy.Dialog,android.widget.EditText) -> <init>
    192:203:void onClick(android.content.DialogInterface,int) -> onClick
org.client.scrcpy.Dialog$4 -> org.client.scrcpy.Dialog$4:
# {"id":"sourceFile","fileName":"Dialog.java"}
    207:207:void <init>(org.client.scrcpy.Dialog,android.widget.EditText) -> <init>
    209:221:void onClick(android.content.DialogInterface,int) -> onClick
org.client.scrcpy.Dialog$5 -> org.client.scrcpy.Dialog$5:
# {"id":"sourceFile","fileName":"Dialog.java"}
    236:236:void <init>(org.client.scrcpy.Dialog,android.widget.EditText) -> <init>
    241:248:void onShow(android.content.DialogInterface) -> onShow
org.client.scrcpy.Dialog$EditCallback -> org.client.scrcpy.Dialog$EditCallback:
# {"id":"sourceFile","fileName":"Dialog.java"}
org.client.scrcpy.DisplayWindow -> org.client.scrcpy.DisplayWindow:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    33:35:void <init>(android.content.Context) -> <init>
    38:40:void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    43:45:void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    17:17:float access$000(org.client.scrcpy.DisplayWindow) -> access$000
    17:17:float access$002(org.client.scrcpy.DisplayWindow,float) -> access$002
    17:17:float access$100(org.client.scrcpy.DisplayWindow) -> access$100
    17:17:float access$102(org.client.scrcpy.DisplayWindow,float) -> access$102
    195:195:android.view.Surface getDisplaySurface() -> getDisplaySurface
    203:203:int getSurfaceHeight() -> getSurfaceHeight
    158:158:android.view.SurfaceView getSurfaceView() -> getSurfaceView
    199:199:int getSurfaceWidth() -> getSurfaceWidth
    191:192:void hideHintTip() -> hideHintTip
    48:139:void init() -> init
    150:151:void setActionCallback(org.client.scrcpy.DisplayWindow$OnActionCallback) -> setActionCallback
    142:143:void setCloseListener(android.view.View$OnClickListener) -> setCloseListener
    146:147:void setMoveCallback(org.client.scrcpy.DisplayWindow$OnMoveCallback) -> setMoveCallback
    154:155:void setOnDisplayTouchListener(android.view.View$OnTouchListener) -> setOnDisplayTouchListener
    162:188:void setRemote(int,int) -> setRemote
org.client.scrcpy.DisplayWindow$1 -> org.client.scrcpy.DisplayWindow$1:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    56:56:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    59:62:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$2 -> org.client.scrcpy.DisplayWindow$2:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    67:67:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    70:88:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$3 -> org.client.scrcpy.DisplayWindow$3:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    91:91:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    94:103:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$4 -> org.client.scrcpy.DisplayWindow$4:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    106:106:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    109:112:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$5 -> org.client.scrcpy.DisplayWindow$5:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    115:115:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    118:121:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$6 -> org.client.scrcpy.DisplayWindow$6:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    124:124:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    127:130:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$7 -> org.client.scrcpy.DisplayWindow$7:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    133:133:void <init>(org.client.scrcpy.DisplayWindow) -> <init>
    136:136:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.DisplayWindow$8 -> org.client.scrcpy.DisplayWindow$8:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
    169:169:void <init>(org.client.scrcpy.DisplayWindow,int,int,float) -> <init>
    173:185:void run() -> run
org.client.scrcpy.DisplayWindow$OnActionCallback -> org.client.scrcpy.DisplayWindow$OnActionCallback:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
org.client.scrcpy.DisplayWindow$OnMoveCallback -> org.client.scrcpy.DisplayWindow$OnMoveCallback:
# {"id":"sourceFile","fileName":"DisplayWindow.java"}
org.client.scrcpy.FloatService -> org.client.scrcpy.FloatService:
# {"id":"sourceFile","fileName":"FloatService.java"}
    0:0:void $r8$lambda$GodYMbel5Z9RIoU6eVTpH3U_AKg(org.client.scrcpy.FloatService,android.view.View) -> $r8$lambda$GodYMbel5Z9RIoU6eVTpH3U_AKg
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$HYLvF-awZenDq8yzF5VgZ1Jer5U(org.client.scrcpy.FloatService,float,float) -> $r8$lambda$HYLvF-awZenDq8yzF5VgZ1Jer5U
      # {"id":"com.android.tools.r8.synthesized"}
    14:14:void <init>() -> <init>
    14:14:void access$000(org.client.scrcpy.FloatService,java.lang.String,int,int,int) -> access$000
    102:105:void lambda$setupDisplay$0(android.view.View) -> lambda$setupDisplay$0
    107:110:void lambda$setupDisplay$1(float,float) -> lambda$setupDisplay$1
    28:28:android.os.IBinder onBind(android.content.Intent) -> onBind
    87:90:void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    56:71:void onCreate() -> onCreate
    94:97:void onDestroy() -> onDestroy
    33:51:int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    100:133:void setupDisplay() -> setupDisplay
    74:83:void startCopy(java.lang.String,int,int,int) -> startCopy
org.client.scrcpy.FloatService$$ExternalSyntheticLambda0 -> org.client.scrcpy.FloatService$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.FloatService org.client.scrcpy.FloatService$$InternalSyntheticLambda$1$2495273afc98a331e9b82de6f7f2ddfa87c6a6cd60f4fbccc939dbedc2bfae0e$0.f$0 -> f$0
    0:0:void org.client.scrcpy.FloatService$$InternalSyntheticLambda$1$2495273afc98a331e9b82de6f7f2ddfa87c6a6cd60f4fbccc939dbedc2bfae0e$0.<init>(org.client.scrcpy.FloatService) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.FloatService$$InternalSyntheticLambda$1$2495273afc98a331e9b82de6f7f2ddfa87c6a6cd60f4fbccc939dbedc2bfae0e$0.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.FloatService$$ExternalSyntheticLambda1 -> org.client.scrcpy.FloatService$$ExternalSyntheticLambda1:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.FloatService org.client.scrcpy.FloatService$$InternalSyntheticLambda$1$2495273afc98a331e9b82de6f7f2ddfa87c6a6cd60f4fbccc939dbedc2bfae0e$1.f$0 -> f$0
    0:0:void org.client.scrcpy.FloatService$$InternalSyntheticLambda$1$2495273afc98a331e9b82de6f7f2ddfa87c6a6cd60f4fbccc939dbedc2bfae0e$1.<init>(org.client.scrcpy.FloatService) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.FloatService$$InternalSyntheticLambda$1$2495273afc98a331e9b82de6f7f2ddfa87c6a6cd60f4fbccc939dbedc2bfae0e$1.onMove(float,float) -> onMove
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.FloatService$1 -> org.client.scrcpy.FloatService$1:
# {"id":"sourceFile","fileName":"FloatService.java"}
    44:44:void <init>(org.client.scrcpy.FloatService,java.lang.String,int) -> <init>
    47:48:void run() -> run
org.client.scrcpy.FloatService$2 -> org.client.scrcpy.FloatService$2:
# {"id":"sourceFile","fileName":"FloatService.java"}
    75:75:void <init>(org.client.scrcpy.FloatService) -> <init>
    78:80:void onConnect(float,float) -> onConnect
org.client.scrcpy.FloatService$3 -> org.client.scrcpy.FloatService$3:
# {"id":"sourceFile","fileName":"FloatService.java"}
    111:111:void <init>(org.client.scrcpy.FloatService) -> <init>
    114:125:void onAction(int) -> onAction
org.client.scrcpy.FloatService$4 -> org.client.scrcpy.FloatService$4:
# {"id":"sourceFile","fileName":"FloatService.java"}
    127:127:void <init>(org.client.scrcpy.FloatService) -> <init>
    130:130:boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.client.scrcpy.MainActivity -> org.client.scrcpy.MainActivity:
# {"id":"sourceFile","fileName":"MainActivity.java"}
    0:0:void $r8$lambda$03DD_LYzgGu2d4DVdtmmmTDoRNk(org.client.scrcpy.MainActivity,android.widget.EditText,android.view.View) -> $r8$lambda$03DD_LYzgGu2d4DVdtmmmTDoRNk
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$5Rd7CuL7nUKPNMlROHMIifisFds(org.client.scrcpy.MainActivity,android.view.View) -> $r8$lambda$5Rd7CuL7nUKPNMlROHMIifisFds
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$BgSMuT8A_uimljACy4JF-A6ANC4(android.widget.Switch,android.widget.Switch,android.view.View) -> $r8$lambda$BgSMuT8A_uimljACy4JF-A6ANC4
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$CO32DBWo3XuDcrTqmYqFDaXGXkE(org.client.scrcpy.MainActivity,android.view.View) -> $r8$lambda$CO32DBWo3XuDcrTqmYqFDaXGXkE
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$GNfEuRaOp_E-b_d-XjHrTrSldzg(org.client.scrcpy.MainActivity) -> $r8$lambda$GNfEuRaOp_E-b_d-XjHrTrSldzg
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$MGX4HXNlL4XW_TVgwC219cOHPaM(org.client.scrcpy.MainActivity,org.client.scrcpy.MarkdownView,java.lang.String) -> $r8$lambda$MGX4HXNlL4XW_TVgwC219cOHPaM
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$SYfhvcL53_ZDeL8Rc8sEpIK9VXE(org.client.scrcpy.MainActivity) -> $r8$lambda$SYfhvcL53_ZDeL8Rc8sEpIK9VXE
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$UrFHyHQRD96pgmDlkBbKTA9Wu5A(org.client.scrcpy.MainActivity) -> $r8$lambda$UrFHyHQRD96pgmDlkBbKTA9Wu5A
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$W2PWMG1G2llxCP25Iws-ucKMwHI(org.client.scrcpy.MainActivity) -> $r8$lambda$W2PWMG1G2llxCP25Iws-ucKMwHI
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$gWPiMT5EBIff1sDnaifjERwjlnQ(org.client.scrcpy.MainActivity,java.lang.String,int,int) -> $r8$lambda$gWPiMT5EBIff1sDnaifjERwjlnQ
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$nbmlbDaqR0C_5u6YPO_8ps7QSVc(org.client.scrcpy.MainActivity,org.client.scrcpy.MarkdownView) -> $r8$lambda$nbmlbDaqR0C_5u6YPO_8ps7QSVc
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$sTMTq79j6ie8Lw2YS8965VCVZjo(org.client.scrcpy.MainActivity,android.view.View) -> $r8$lambda$sTMTq79j6ie8Lw2YS8965VCVZjo
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:boolean $r8$lambda$szkRlGPcJCS656ecO3EE61bqu3A(org.client.scrcpy.MainActivity,android.view.View,android.view.MotionEvent) -> $r8$lambda$szkRlGPcJCS656ecO3EE61bqu3A
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$uC5-JsC45A6Xjw7y_ki4hMUXa98(org.client.scrcpy.MainActivity,android.view.View) -> $r8$lambda$uC5-JsC45A6Xjw7y_ki4hMUXa98
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void <clinit>() -> <clinit>
    60:90:void <init>() -> <init>
    60:60:org.client.scrcpy.Scrcpy access$000(org.client.scrcpy.MainActivity) -> access$000
    60:60:org.client.scrcpy.Scrcpy access$002(org.client.scrcpy.MainActivity,org.client.scrcpy.Scrcpy) -> access$002
    60:60:boolean access$100(org.client.scrcpy.MainActivity) -> access$100
    60:60:boolean access$102(org.client.scrcpy.MainActivity,boolean) -> access$102
    60:60:boolean access$200(org.client.scrcpy.MainActivity) -> access$200
    60:60:boolean access$202(org.client.scrcpy.MainActivity,boolean) -> access$202
    60:60:android.view.Surface access$300(org.client.scrcpy.MainActivity) -> access$300
    60:60:int access$400(org.client.scrcpy.MainActivity) -> access$400
    60:60:int access$500(org.client.scrcpy.MainActivity) -> access$500
    60:60:void access$600(org.client.scrcpy.MainActivity) -> access$600
    60:60:android.content.Context access$700(org.client.scrcpy.MainActivity) -> access$700
    310:311:void checkFree() -> checkFree
    317:317:void checkFree(java.lang.String) -> checkFree
    882:883:void connectExitExt() -> connectExitExt
    889:915:void connectExitExt(boolean) -> connectExitExt
    819:871:void connectScrcpyServer(java.lang.String) -> connectScrcpyServer
    877:879:void connectSuccessExt() -> connectSuccessExt
    717:726:void errorDisconnect() -> errorDisconnect
    541:562:void getAttributes() -> getAttributes
    565:579:java.lang.String[] getHistoryList() -> getHistoryList
    321:333:java.lang.String getRemoteData(java.lang.String) -> getRemoteData
    380:413:void get_saved_preferences() -> get_saved_preferences
    903:904:void lambda$connectExitExt$12() -> lambda$connectExitExt$12
    907:908:void lambda$connectExitExt$13() -> lambda$connectExitExt$13
    855:860:void lambda$connectScrcpyServer$10() -> lambda$connectScrcpyServer$10
    828:866:void lambda$connectScrcpyServer$11(java.lang.String,int,int) -> lambda$connectScrcpyServer$11
    719:725:void lambda$errorDisconnect$9() -> lambda$errorDisconnect$9
    403:412:void lambda$get_saved_preferences$4(android.widget.Switch,android.widget.Switch,android.view.View) -> lambda$get_saved_preferences$4
    256:258:void lambda$scrcpy_main$0(android.view.View) -> lambda$scrcpy_main$0
    269:272:void lambda$scrcpy_main$1(android.widget.EditText,android.view.View) -> lambda$scrcpy_main$1
    295:299:void lambda$scrcpy_main$2(org.client.scrcpy.MarkdownView,java.lang.String) -> lambda$scrcpy_main$2
    291:304:void lambda$scrcpy_main$3(org.client.scrcpy.MarkdownView) -> lambda$scrcpy_main$3
    493:493:boolean lambda$set_display_nd_touch$5(android.view.View,android.view.MotionEvent) -> lambda$set_display_nd_touch$5
    503:503:void lambda$set_display_nd_touch$6(android.view.View) -> lambda$set_display_nd_touch$6
    506:506:void lambda$set_display_nd_touch$7(android.view.View) -> lambda$set_display_nd_touch$7
    509:509:void lambda$set_display_nd_touch$8(android.view.View) -> lambda$set_display_nd_touch$8
    693:711:void loadNewRotation() -> loadNewRotation
    816:816:void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    772:793:void onBackPressed() -> onBackPressed
    177:221:void onCreate(android.os.Bundle) -> onCreate
    731:740:void onPause() -> onPause
    744:768:void onResume() -> onResume
    225:235:void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    797:811:void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    586:613:boolean saveHistory(java.lang.String) -> saveHistory
    239:307:void scrcpy_main() -> scrcpy_main
    516:537:void setSpinner(int,int,java.lang.String) -> setSpinner
    417:512:void set_display_nd_touch() -> set_display_nd_touch
    337:357:void showListPopulWindow(android.widget.EditText) -> showListPopulWindow
    144:145:void showMainView() -> showMainView
    149:172:void showMainView(boolean) -> showMainView
    685:688:void start_Scrcpy_service() -> start_Scrcpy_service
    624:644:void start_screen_copy_magic() -> start_screen_copy_magic
    617:620:void swapDimensions() -> swapDimensions
org.client.scrcpy.MainActivity$$ExternalSyntheticApiModelOutline0 -> org.client.scrcpy.MainActivity$$ExternalSyntheticApiModelOutline0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticApiModelOutline$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$0.m(android.view.Window,int) -> m
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda1 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda1:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$55e904809e1dba675420235de20403d560afc31f9c664b5cd04593742ee11228$0.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$55e904809e1dba675420235de20403d560afc31f9c664b5cd04593742ee11228$0.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$55e904809e1dba675420235de20403d560afc31f9c664b5cd04593742ee11228$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda10 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda10:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    android.widget.Switch org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b4790abe2602c6c22aadaa178feaea40685ebc7ac4c87867ecbc05173ede00d9$0.f$1 -> f$1
    android.widget.Switch org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b4790abe2602c6c22aadaa178feaea40685ebc7ac4c87867ecbc05173ede00d9$0.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b4790abe2602c6c22aadaa178feaea40685ebc7ac4c87867ecbc05173ede00d9$0.<init>(android.widget.Switch,android.widget.Switch) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b4790abe2602c6c22aadaa178feaea40685ebc7ac4c87867ecbc05173ede00d9$0.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda11 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda11:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$0.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$0.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:boolean org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$0.onTouch(android.view.View,android.view.MotionEvent) -> onTouch
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda12 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda12:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$1.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$1.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$1.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda13 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda13:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$2.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$2.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$2.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda14 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda14:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$3.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$3.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$b49a8639edf9d62278286c6e71acbea583923aed03b290fbae37d3162f4f7a1c$3.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda15 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda15:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$c0dbf7b9059b35d97864292e48de3f36dd54c23134e7a95acb3dbbdcd306a13b$0.f$1 -> f$1
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$c0dbf7b9059b35d97864292e48de3f36dd54c23134e7a95acb3dbbdcd306a13b$0.f$0 -> f$0
    java.lang.String org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$c0dbf7b9059b35d97864292e48de3f36dd54c23134e7a95acb3dbbdcd306a13b$0.f$2 -> f$2
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$c0dbf7b9059b35d97864292e48de3f36dd54c23134e7a95acb3dbbdcd306a13b$0.<init>(org.client.scrcpy.MainActivity,org.client.scrcpy.MarkdownView,java.lang.String) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$c0dbf7b9059b35d97864292e48de3f36dd54c23134e7a95acb3dbbdcd306a13b$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda2 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda2:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$55e904809e1dba675420235de20403d560afc31f9c664b5cd04593742ee11228$1.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$55e904809e1dba675420235de20403d560afc31f9c664b5cd04593742ee11228$1.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$55e904809e1dba675420235de20403d560afc31f9c664b5cd04593742ee11228$1.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda3 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda3:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$769b200fce5ed93886ffc2bf5fafc1b600bd3c379fe1da04dc6433a792c7602d$0.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$769b200fce5ed93886ffc2bf5fafc1b600bd3c379fe1da04dc6433a792c7602d$0.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$769b200fce5ed93886ffc2bf5fafc1b600bd3c379fe1da04dc6433a792c7602d$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda4 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda4:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$2.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$2.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$2.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda5 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda5:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    android.widget.EditText org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$3.f$1 -> f$1
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$3.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$3.<init>(org.client.scrcpy.MainActivity,android.widget.EditText) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$3.onClick(android.view.View) -> onClick
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda6 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda6:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$4.f$1 -> f$1
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$4.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$4.<init>(org.client.scrcpy.MainActivity,org.client.scrcpy.MarkdownView) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$b017aff573e62d5baed5ac0a3fac733980f7d404b3491a4946e546e4cfca198b$4.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda7 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda7:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    int org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$e74f2dcfd36b9b491916a7ca2edbc772354f1ce55d3ff8eaaaee8e89ae1f03d0$0.f$3 -> f$3
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$e74f2dcfd36b9b491916a7ca2edbc772354f1ce55d3ff8eaaaee8e89ae1f03d0$0.f$0 -> f$0
    int org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$e74f2dcfd36b9b491916a7ca2edbc772354f1ce55d3ff8eaaaee8e89ae1f03d0$0.f$2 -> f$2
    java.lang.String org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$e74f2dcfd36b9b491916a7ca2edbc772354f1ce55d3ff8eaaaee8e89ae1f03d0$0.f$1 -> f$1
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$e74f2dcfd36b9b491916a7ca2edbc772354f1ce55d3ff8eaaaee8e89ae1f03d0$0.<init>(org.client.scrcpy.MainActivity,java.lang.String,int,int) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$1$e74f2dcfd36b9b491916a7ca2edbc772354f1ce55d3ff8eaaaee8e89ae1f03d0$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda8 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda8:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$36dc9941344a89615d8618f96ef0320f784f4e3cd888628dfc051e81e2bf21cc$0.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$36dc9941344a89615d8618f96ef0320f784f4e3cd888628dfc051e81e2bf21cc$0.<init>(org.client.scrcpy.MainActivity) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$36dc9941344a89615d8618f96ef0320f784f4e3cd888628dfc051e81e2bf21cc$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$$ExternalSyntheticLambda9 -> org.client.scrcpy.MainActivity$$ExternalSyntheticLambda9:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$36dc9941344a89615d8618f96ef0320f784f4e3cd888628dfc051e81e2bf21cc$1.<init>() -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$$InternalSyntheticLambda$2$36dc9941344a89615d8618f96ef0320f784f4e3cd888628dfc051e81e2bf21cc$1.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$1 -> org.client.scrcpy.MainActivity$1:
# {"id":"sourceFile","fileName":"MainActivity.java"}
    0:0:void $r8$lambda$Z4obEbxmr04cxrv7ez3JALMRXW0(org.client.scrcpy.MainActivity$1) -> $r8$lambda$Z4obEbxmr04cxrv7ez3JALMRXW0
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$jq1W_298LJnR1pGgg468zlZVtOY(org.client.scrcpy.MainActivity$1,int) -> $r8$lambda$jq1W_298LJnR1pGgg468zlZVtOY
      # {"id":"com.android.tools.r8.synthesized"}
    90:90:void <init>(org.client.scrcpy.MainActivity) -> <init>
    114:126:void lambda$onServiceConnected$0(int) -> lambda$onServiceConnected$0
    103:127:void lambda$onServiceConnected$1() -> lambda$onServiceConnected$1
    93:134:void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    138:140:void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.client.scrcpy.MainActivity$1$$ExternalSyntheticLambda0 -> org.client.scrcpy.MainActivity$1$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity$1 org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$1$05b05df80e212ab7e26168476555d9a911c45728fb6e33de08034f7638af59f5$0.f$0 -> f$0
    0:0:void org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$1$05b05df80e212ab7e26168476555d9a911c45728fb6e33de08034f7638af59f5$0.<init>(org.client.scrcpy.MainActivity$1) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$1$05b05df80e212ab7e26168476555d9a911c45728fb6e33de08034f7638af59f5$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$1$$ExternalSyntheticLambda1 -> org.client.scrcpy.MainActivity$1$$ExternalSyntheticLambda1:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MainActivity$1 org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$2$2a8abc78c4dbe47c2a724f9c75b1785d3218d54394723a20a9b62074f0a3e0db$0.f$0 -> f$0
    int org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$2$2a8abc78c4dbe47c2a724f9c75b1785d3218d54394723a20a9b62074f0a3e0db$0.f$1 -> f$1
    0:0:void org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$2$2a8abc78c4dbe47c2a724f9c75b1785d3218d54394723a20a9b62074f0a3e0db$0.<init>(org.client.scrcpy.MainActivity$1,int) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MainActivity$1$$InternalSyntheticLambda$2$2a8abc78c4dbe47c2a724f9c75b1785d3218d54394723a20a9b62074f0a3e0db$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MainActivity$2 -> org.client.scrcpy.MainActivity$2:
# {"id":"sourceFile","fileName":"MainActivity.java"}
    349:349:void <init>(org.client.scrcpy.MainActivity,android.widget.EditText,java.lang.String[],android.widget.ListPopupWindow) -> <init>
    352:354:void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.client.scrcpy.MainActivity$3 -> org.client.scrcpy.MainActivity$3:
# {"id":"sourceFile","fileName":"MainActivity.java"}
    520:520:void <init>(org.client.scrcpy.MainActivity,java.lang.String) -> <init>
    523:524:void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    528:529:void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
org.client.scrcpy.MarkdownView -> org.client.scrcpy.MarkdownView:
# {"id":"sourceFile","fileName":"MarkdownView.java"}
    0:0:void $r8$lambda$16OIGW-JK11BhjIhNJXWIC7WAyQ(org.client.scrcpy.MarkdownView,android.content.Context) -> $r8$lambda$16OIGW-JK11BhjIhNJXWIC7WAyQ
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$5sbteJmOQ22jaWGGfb10cudVD5U(org.client.scrcpy.MarkdownView,java.lang.String) -> $r8$lambda$5sbteJmOQ22jaWGGfb10cudVD5U
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$F2TflMBjEF0me6W-PXxTpAKv4eg(org.client.scrcpy.MarkdownView,java.lang.String) -> $r8$lambda$F2TflMBjEF0me6W-PXxTpAKv4eg
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$QS-NQ4x2p8W2Dsqm85IEIOCYZkg(org.client.scrcpy.MarkdownView,java.lang.String) -> $r8$lambda$QS-NQ4x2p8W2Dsqm85IEIOCYZkg
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$rTVKyj5DSKlxZ5FQ2r5TBrVzvW8(org.client.scrcpy.MarkdownView,android.text.Spanned) -> $r8$lambda$rTVKyj5DSKlxZ5FQ2r5TBrVzvW8
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$uEe3LwUfpatxANVWXWzHdoxlF0M(org.client.scrcpy.MarkdownView,android.text.Spanned) -> $r8$lambda$uEe3LwUfpatxANVWXWzHdoxlF0M
      # {"id":"com.android.tools.r8.synthesized"}
    29:36:void <init>(android.content.Context) -> <init>
    29:41:void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    29:46:void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    49:82:void init(android.content.Context) -> init
    74:75:void lambda$init$0(android.text.Spanned) -> lambda$init$0
    56:81:void lambda$init$1(android.content.Context) -> lambda$init$1
    89:90:void lambda$setMarkwon$2(java.lang.String) -> lambda$setMarkwon$2
    98:99:void lambda$setMarkwon$3(android.text.Spanned) -> lambda$setMarkwon$3
    102:103:void lambda$setMarkwon$4(java.lang.String) -> lambda$setMarkwon$4
    96:105:void lambda$setMarkwon$5(java.lang.String) -> lambda$setMarkwon$5
    86:106:void setMarkwon(java.lang.String) -> setMarkwon
org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda0 -> org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$0.f$0 -> f$0
    java.lang.String org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$0.f$1 -> f$1
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$0.<init>(org.client.scrcpy.MarkdownView,java.lang.String) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda1 -> org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda1:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$1.f$0 -> f$0
    java.lang.String org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$1.f$1 -> f$1
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$1.<init>(org.client.scrcpy.MarkdownView,java.lang.String) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$5cd0e67b88b21af03065c17f8fbe7d728ae12e2d2671d4cbe19afb7b3cde6b09$1.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda2 -> org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda2:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$b4f5ff2b2bfea354ebdc7c699fa8940a13995afd0b51cf5cfbabfdfb27afad0f$0.f$0 -> f$0
    android.content.Context org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$b4f5ff2b2bfea354ebdc7c699fa8940a13995afd0b51cf5cfbabfdfb27afad0f$0.f$1 -> f$1
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$b4f5ff2b2bfea354ebdc7c699fa8940a13995afd0b51cf5cfbabfdfb27afad0f$0.<init>(org.client.scrcpy.MarkdownView,android.content.Context) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$1$b4f5ff2b2bfea354ebdc7c699fa8940a13995afd0b51cf5cfbabfdfb27afad0f$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda3 -> org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda3:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$2967534c4ca6a2ed2a7e44d9bf5100c62d551aff52f3d887e166588a1415c692$0.f$0 -> f$0
    android.text.Spanned org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$2967534c4ca6a2ed2a7e44d9bf5100c62d551aff52f3d887e166588a1415c692$0.f$1 -> f$1
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$2967534c4ca6a2ed2a7e44d9bf5100c62d551aff52f3d887e166588a1415c692$0.<init>(org.client.scrcpy.MarkdownView,android.text.Spanned) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$2967534c4ca6a2ed2a7e44d9bf5100c62d551aff52f3d887e166588a1415c692$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda4 -> org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda4:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$0.f$0 -> f$0
    android.text.Spanned org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$0.f$1 -> f$1
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$0.<init>(org.client.scrcpy.MarkdownView,android.text.Spanned) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda5 -> org.client.scrcpy.MarkdownView$$ExternalSyntheticLambda5:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    org.client.scrcpy.MarkdownView org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$1.f$0 -> f$0
    java.lang.String org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$1.f$1 -> f$1
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$1.<init>(org.client.scrcpy.MarkdownView,java.lang.String) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.MarkdownView$$InternalSyntheticLambda$2$9d8d93ffa189b67c338ee249b95a57a3358f75f31457112f0ae6f6c1edbb1831$1.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.R$styleable -> org.client.scrcpy.R$styleable:
    0:0:void <clinit>() -> <clinit>
org.client.scrcpy.Scrcpy -> org.client.scrcpy.Scrcpy:
# {"id":"sourceFile","fileName":"Scrcpy.java"}
    0:0:void <clinit>() -> <clinit>
    31:53:void <init>() -> <init>
    107:112:void StopService() -> StopService
    31:31:java.lang.String access$000(org.client.scrcpy.Scrcpy) -> access$000
    31:31:int access$100(org.client.scrcpy.Scrcpy) -> access$100
    31:31:void access$200(org.client.scrcpy.Scrcpy,java.lang.String,int) -> access$200
    156:156:boolean check_socket_connection() -> check_socket_connection
    152:152:int[] get_remote_device_resolution() -> get_remote_device_resolution
    58:58:android.os.IBinder onBind(android.content.Intent) -> onBind
    94:97:void pause() -> pause
    100:104:void resume() -> resume
    160:174:void sendKeyevent(int) -> sendKeyevent
    66:72:void setParms(android.view.Surface,int,int) -> setParms
    62:63:void setServiceCallbacks(org.client.scrcpy.Scrcpy$ServiceCallbacks) -> setServiceCallbacks
    75:91:void start(android.view.Surface,java.lang.String,int,int) -> start
    177:256:void startConnection(java.lang.String,int) -> startConnection
    256:323:void startConnection(java.lang.String,int) -> startConnection
    299:323:void startConnection(java.lang.String,int) -> startConnection
    259:323:void startConnection(java.lang.String,int) -> startConnection
    239:323:void startConnection(java.lang.String,int) -> startConnection
    216:347:void startConnection(java.lang.String,int) -> startConnection
    323:347:void startConnection(java.lang.String,int) -> startConnection
    347:351:void startConnection(java.lang.String,int) -> startConnection
    121:148:boolean touchevent(android.view.MotionEvent,boolean,int,int) -> touchevent
org.client.scrcpy.Scrcpy$1 -> org.client.scrcpy.Scrcpy$1:
# {"id":"sourceFile","fileName":"Scrcpy.java"}
    84:84:void <init>(org.client.scrcpy.Scrcpy) -> <init>
    87:88:void run() -> run
org.client.scrcpy.Scrcpy$MyServiceBinder -> org.client.scrcpy.Scrcpy$MyServiceBinder:
# {"id":"sourceFile","fileName":"Scrcpy.java"}
    359:359:void <init>(org.client.scrcpy.Scrcpy) -> <init>
    361:361:org.client.scrcpy.Scrcpy getService() -> getService
org.client.scrcpy.Scrcpy$ServiceCallbacks -> org.client.scrcpy.Scrcpy$ServiceCallbacks:
# {"id":"sourceFile","fileName":"Scrcpy.java"}
org.client.scrcpy.ScrcpyHost -> org.client.scrcpy.ScrcpyHost:
# {"id":"sourceFile","fileName":"ScrcpyHost.java"}
    33:34:void <clinit>() -> <clinit>
    28:55:void <init>() -> <init>
    28:28:org.client.scrcpy.Scrcpy access$000(org.client.scrcpy.ScrcpyHost) -> access$000
    28:28:org.client.scrcpy.Scrcpy access$002(org.client.scrcpy.ScrcpyHost,org.client.scrcpy.Scrcpy) -> access$002
    28:28:boolean access$100() -> access$100
    28:28:float access$1000() -> access$1000
    28:28:float access$1002(float) -> access$1002
    28:28:boolean access$102(boolean) -> access$102
    28:28:boolean access$200() -> access$200
    28:28:boolean access$202(boolean) -> access$202
    28:28:android.view.Surface access$300(org.client.scrcpy.ScrcpyHost) -> access$300
    28:28:java.lang.String access$400(org.client.scrcpy.ScrcpyHost) -> access$400
    28:28:int access$500() -> access$500
    28:28:int access$600() -> access$600
    28:28:android.content.ServiceConnection access$700(org.client.scrcpy.ScrcpyHost) -> access$700
    28:28:android.content.Context access$800(org.client.scrcpy.ScrcpyHost) -> access$800
    28:28:float access$900() -> access$900
    28:28:float access$902(float) -> access$902
    129:150:void connect(android.content.Context,java.lang.String,int,int,int,android.view.Surface) -> connect
    150:166:void connect(android.content.Context,java.lang.String,int,int,int,android.view.Surface) -> connect
    236:242:void destroy() -> destroy
    233:233:void errorDisconnect() -> errorDisconnect
    101:125:void exectJar() -> exectJar
    215:216:void keyEvent(int) -> keyEvent
    221:228:void loadNewRotation() -> loadNewRotation
    52:53:void setConnectCallBack(org.client.scrcpy.ScrcpyHost$ConnectCallBack) -> setConnectCallBack
    169:172:void start_screen_copy_magic() -> start_screen_copy_magic
    211:211:boolean touch(android.view.MotionEvent,int,int) -> touch
    178:207:java.lang.String wifiIpAddress() -> wifiIpAddress
org.client.scrcpy.ScrcpyHost$1 -> org.client.scrcpy.ScrcpyHost$1:
# {"id":"sourceFile","fileName":"ScrcpyHost.java"}
    55:55:void <init>(org.client.scrcpy.ScrcpyHost) -> <init>
    58:91:void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    95:96:void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.client.scrcpy.ScrcpyHost$ConnectCallBack -> org.client.scrcpy.ScrcpyHost$ConnectCallBack:
# {"id":"sourceFile","fileName":"ScrcpyHost.java"}
org.client.scrcpy.SendCommands -> org.client.scrcpy.SendCommands:
# {"id":"sourceFile","fileName":"SendCommands.java"}
    0:0:void $r8$lambda$LE-ginuI8jUXadMm6ojhOTTfK1Y(org.client.scrcpy.SendCommands,android.content.Context,java.lang.String,java.lang.String,int,int,java.lang.String[]) -> $r8$lambda$LE-ginuI8jUXadMm6ojhOTTfK1Y
      # {"id":"com.android.tools.r8.synthesized"}
    35:37:void <init>() -> <init>
    75:75:int SendAdbCommands(android.content.Context,java.lang.String,int,int,java.lang.String,int,int) -> SendAdbCommands
    79:139:int SendAdbCommands(android.content.Context,byte[],java.lang.String,int,int,java.lang.String,int,int) -> SendAdbCommands
    100:107:void lambda$SendAdbCommands$0(android.content.Context,java.lang.String,java.lang.String,int,int,java.lang.String[]) -> lambda$SendAdbCommands$0
    144:166:void newAdbServerStart(android.content.Context,java.lang.String,java.lang.String,int,int,java.lang.String[]) -> newAdbServerStart
org.client.scrcpy.SendCommands$$ExternalSyntheticLambda0 -> org.client.scrcpy.SendCommands$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    android.content.Context org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$1 -> f$1
    java.lang.String[] org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$6 -> f$6
    int org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$5 -> f$5
    int org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$4 -> f$4
    java.lang.String org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$2 -> f$2
    org.client.scrcpy.SendCommands org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$0 -> f$0
    java.lang.String org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.f$3 -> f$3
    0:0:void org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.<init>(org.client.scrcpy.SendCommands,android.content.Context,java.lang.String,java.lang.String,int,int,java.lang.String[]) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.SendCommands$$InternalSyntheticLambda$1$7d6ad6f1c5fb9e7e0223892f5266d9ba9bb0eb2c27bf8eda97ebb7d772c4054a$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.decoder.VideoDecoder -> org.client.scrcpy.decoder.VideoDecoder:
# {"id":"sourceFile","fileName":"VideoDecoder.java"}
    15:18:void <init>() -> <init>
    15:15:java.util.concurrent.atomic.AtomicBoolean access$200(org.client.scrcpy.decoder.VideoDecoder) -> access$200
    15:15:android.media.MediaCodec access$300(org.client.scrcpy.decoder.VideoDecoder) -> access$300
    15:15:android.media.MediaCodec access$302(org.client.scrcpy.decoder.VideoDecoder,android.media.MediaCodec) -> access$302
    27:30:void configure(android.view.Surface,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer) -> configure
    21:24:void decodeSample(byte[],int,int,long,int) -> decodeSample
    34:39:void start() -> start
    42:50:void stop() -> stop
org.client.scrcpy.decoder.VideoDecoder$Worker -> org.client.scrcpy.decoder.VideoDecoder$Worker:
# {"id":"sourceFile","fileName":"VideoDecoder.java"}
    54:57:void <init>(org.client.scrcpy.decoder.VideoDecoder) -> <init>
    52:52:void access$000(org.client.scrcpy.decoder.VideoDecoder$Worker,android.view.Surface,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer) -> access$000
    52:52:void access$100(org.client.scrcpy.decoder.VideoDecoder$Worker,boolean) -> access$100
    64:82:void configure(android.view.Surface,int,int,java.nio.ByteBuffer,java.nio.ByteBuffer) -> configure
    87:104:void decodeSample(byte[],int,int,long,int) -> decodeSample
    109:131:void run() -> run
    60:61:void setRunning(boolean) -> setRunning
org.client.scrcpy.decoder.VideoDecoder$Worker$$ExternalSyntheticApiModelOutline0 -> org.client.scrcpy.decoder.VideoDecoder$Worker$$ExternalSyntheticApiModelOutline0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    0:0:java.nio.ByteBuffer org.client.scrcpy.decoder.VideoDecoder$Worker$$InternalSyntheticApiModelOutline$1$bc07085dbee95da350f73b2bdc5b2cc60d620f919ec87b92d6250c15eb6cddd5$0.m(android.media.MediaCodec,int) -> m
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.model.ByteUtils -> org.client.scrcpy.model.ByteUtils:
# {"id":"sourceFile","fileName":"ByteUtils.java"}
    30:30:int bytesToInt(byte[]) -> bytesToInt
    20:20:long bytesToLong(byte[]) -> bytesToLong
org.client.scrcpy.model.MediaPacket -> org.client.scrcpy.model.MediaPacket:
# {"id":"sourceFile","fileName":"MediaPacket.java"}
    7:7:void <init>() -> <init>
org.client.scrcpy.model.MediaPacket$Type -> org.client.scrcpy.model.MediaPacket$Type:
# {"id":"sourceFile","fileName":"MediaPacket.java"}
    11:11:org.client.scrcpy.model.MediaPacket$Type[] $values() -> $values
    11:13:void <clinit>() -> <clinit>
    17:19:void <init>(java.lang.String,int,byte) -> <init>
    22:28:org.client.scrcpy.model.MediaPacket$Type getType(byte) -> getType
    32:32:byte getType() -> getType
    11:11:org.client.scrcpy.model.MediaPacket$Type valueOf(java.lang.String) -> valueOf
    11:11:org.client.scrcpy.model.MediaPacket$Type[] values() -> values
org.client.scrcpy.model.VideoPacket -> org.client.scrcpy.model.VideoPacket:
# {"id":"sourceFile","fileName":"VideoPacket.java"}
    16:17:void <init>() -> <init>
    28:49:org.client.scrcpy.model.VideoPacket fromArray(byte[]) -> fromArray
    84:111:org.client.scrcpy.model.VideoPacket$StreamSettings getStreamSettings(byte[]) -> getStreamSettings
org.client.scrcpy.model.VideoPacket$Flag -> org.client.scrcpy.model.VideoPacket$Flag:
# {"id":"sourceFile","fileName":"VideoPacket.java"}
    118:118:org.client.scrcpy.model.VideoPacket$Flag[] $values() -> $values
    118:120:void <clinit>() -> <clinit>
    124:126:void <init>(java.lang.String,int,byte) -> <init>
    129:135:org.client.scrcpy.model.VideoPacket$Flag getFlag(byte) -> getFlag
    139:139:byte getFlag() -> getFlag
    118:118:org.client.scrcpy.model.VideoPacket$Flag valueOf(java.lang.String) -> valueOf
    118:118:org.client.scrcpy.model.VideoPacket$Flag[] values() -> values
org.client.scrcpy.model.VideoPacket$StreamSettings -> org.client.scrcpy.model.VideoPacket$StreamSettings:
# {"id":"sourceFile","fileName":"VideoPacket.java"}
    143:143:void <init>() -> <init>
org.client.scrcpy.utils.ExecUtil -> org.client.scrcpy.utils.ExecUtil:
# {"id":"sourceFile","fileName":"ExecUtil.java"}
    71:130:java.lang.String adbCommend(java.lang.String[],java.util.Map,java.io.File) -> adbCommend
    116:133:java.lang.String adbCommend(java.lang.String[],java.util.Map,java.io.File) -> adbCommend
org.client.scrcpy.utils.HttpRequest -> org.client.scrcpy.utils.HttpRequest:
# {"id":"sourceFile","fileName":"HttpRequest.java"}
    22:93:java.lang.String sendGet(java.lang.String,java.util.Map) -> sendGet
    69:95:java.lang.String sendGet(java.lang.String,java.util.Map) -> sendGet
org.client.scrcpy.utils.PreUtils -> org.client.scrcpy.utils.PreUtils:
# {"id":"sourceFile","fileName":"PreUtils.java"}
    0:0:void <clinit>() -> <clinit>
    24:25:int get(android.content.Context,java.lang.String,int) -> get
    49:50:java.lang.String get(android.content.Context,java.lang.String,java.lang.String) -> get
    61:62:boolean get(android.content.Context,java.lang.String,boolean) -> get
    17:20:boolean put(android.content.Context,java.lang.String,int) -> put
    42:45:boolean put(android.content.Context,java.lang.String,java.lang.String) -> put
    54:57:boolean put(android.content.Context,java.lang.String,boolean) -> put
org.client.scrcpy.utils.Progress -> org.client.scrcpy.utils.Progress:
# {"id":"sourceFile","fileName":"Progress.java"}
    0:0:void $r8$lambda$SoQqMjWX7L2MuUPL-znuX73ojpw(android.app.Activity,java.lang.String,java.lang.String,boolean) -> $r8$lambda$SoQqMjWX7L2MuUPL-znuX73ojpw
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void $r8$lambda$z8c7rFTugFuA8TaYkaiGwOLm8Os() -> $r8$lambda$z8c7rFTugFuA8TaYkaiGwOLm8Os
      # {"id":"com.android.tools.r8.synthesized"}
    90:102:void closeDialog() -> closeDialog
    76:76:boolean isShowing() -> isShowing
    91:101:void lambda$closeDialog$4() -> lambda$closeDialog$4
    29:55:void lambda$showDialog$0(android.app.Activity,java.lang.String,java.lang.String,boolean) -> lambda$showDialog$0
    15:16:void showDialog(android.app.Activity,java.lang.String) -> showDialog
    23:24:void showDialog(android.app.Activity,java.lang.String,boolean) -> showDialog
    28:56:void showDialog(android.app.Activity,java.lang.String,java.lang.String,boolean) -> showDialog
org.client.scrcpy.utils.Progress$$ExternalSyntheticLambda0 -> org.client.scrcpy.utils.Progress$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    boolean org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$2$a6890f19ab474043886a0214d88e49c72e06e0969b0a368708fd883f68fe000c$0.f$3 -> f$3
    android.app.Activity org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$2$a6890f19ab474043886a0214d88e49c72e06e0969b0a368708fd883f68fe000c$0.f$0 -> f$0
    java.lang.String org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$2$a6890f19ab474043886a0214d88e49c72e06e0969b0a368708fd883f68fe000c$0.f$2 -> f$2
    java.lang.String org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$2$a6890f19ab474043886a0214d88e49c72e06e0969b0a368708fd883f68fe000c$0.f$1 -> f$1
    0:0:void org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$2$a6890f19ab474043886a0214d88e49c72e06e0969b0a368708fd883f68fe000c$0.<init>(android.app.Activity,java.lang.String,java.lang.String,boolean) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$2$a6890f19ab474043886a0214d88e49c72e06e0969b0a368708fd883f68fe000c$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.utils.Progress$$ExternalSyntheticLambda1 -> org.client.scrcpy.utils.Progress$$ExternalSyntheticLambda1:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    void org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$3$911cbb57b08b5abf50a6fd211a0150f1ce5baa047fb3f37e904c03b2e42e8dc7$0.<init>() -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.utils.Progress$$InternalSyntheticLambda$3$911cbb57b08b5abf50a6fd211a0150f1ce5baa047fb3f37e904c03b2e42e8dc7$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.utils.ThreadUtils -> org.client.scrcpy.utils.ThreadUtils:
# {"id":"sourceFile","fileName":"ThreadUtils.java"}
    0:0:void $r8$lambda$uawzZ11yTYoQ0_nTyluGCKROGTQ() -> $r8$lambda$uawzZ11yTYoQ0_nTyluGCKROGTQ
      # {"id":"com.android.tools.r8.synthesized"}
    17:167:void <clinit>() -> <clinit>
    16:16:java.util.concurrent.ExecutorService access$000() -> access$000
    16:16:java.lang.Object access$200() -> access$200
    16:16:java.util.List access$300() -> access$300
    16:16:boolean access$402(boolean) -> access$402
    16:16:int access$500(long) -> access$500
    111:114:void execute(java.lang.Runnable) -> execute
    370:385:int getMinTimeImIndex(long) -> getMinTimeImIndex
    37:48:void lambda$static$0() -> lambda$static$0
    92:93:void post(java.lang.Runnable) -> post
    68:71:void workPost(java.lang.Runnable) -> workPost
org.client.scrcpy.utils.ThreadUtils$$ExternalSyntheticLambda0 -> org.client.scrcpy.utils.ThreadUtils$$ExternalSyntheticLambda0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    void org.client.scrcpy.utils.ThreadUtils$$InternalSyntheticLambda$2$c0688e18428e8ab77ea333781a919128298a8a4e7677a5697c0c6738a7351248$0.<init>() -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.client.scrcpy.utils.ThreadUtils$$InternalSyntheticLambda$2$c0688e18428e8ab77ea333781a919128298a8a4e7677a5697c0c6738a7351248$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
org.client.scrcpy.utils.ThreadUtils$1 -> org.client.scrcpy.utils.ThreadUtils$1:
# {"id":"sourceFile","fileName":"ThreadUtils.java"}
    28:28:void <init>() -> <init>
    31:34:void run() -> run
org.client.scrcpy.utils.ThreadUtils$RunnableIm -> org.client.scrcpy.utils.ThreadUtils$RunnableIm:
# {"id":"sourceFile","fileName":"ThreadUtils.java"}
org.client.scrcpy.utils.ThreadUtils$TimerRunnable -> org.client.scrcpy.utils.ThreadUtils$TimerRunnable:
# {"id":"sourceFile","fileName":"ThreadUtils.java"}
    319:319:void <init>() -> <init>
    319:319:void <init>(org.client.scrcpy.utils.ThreadUtils$1) -> <init>
    357:361:void ThreadWait(long) -> ThreadWait
    323:353:void run() -> run
org.client.scrcpy.utils.Util -> org.client.scrcpy.utils.Util:
# {"id":"sourceFile","fileName":"Util.java"}
    130:147:java.lang.String getParamUrl(java.util.Map) -> getParamUrl
    26:48:java.lang.String[] getServerHostAndPort(java.lang.String) -> getServerHostAndPort
org.commonmark.Extension -> org.commonmark.Extension:
# {"id":"sourceFile","fileName":"Extension.java"}
org.commonmark.ext.gfm.strikethrough.Strikethrough -> org.commonmark.ext.gfm.strikethrough.Strikethrough:
# {"id":"sourceFile","fileName":"Strikethrough.java"}
    9:9:void <init>() -> <init>
org.commonmark.ext.gfm.strikethrough.StrikethroughExtension -> org.commonmark.ext.gfm.strikethrough.StrikethroughExtension:
# {"id":"sourceFile","fileName":"StrikethroughExtension.java"}
    30:31:void <init>() -> <init>
    34:34:org.commonmark.Extension create() -> create
    39:40:void extend(org.commonmark.parser.Parser$Builder) -> extend
org.commonmark.ext.gfm.strikethrough.internal.StrikethroughDelimiterProcessor -> org.commonmark.ext.gfm.strikethrough.internal.StrikethroughDelimiterProcessor:
# {"id":"sourceFile","fileName":"StrikethroughDelimiterProcessor.java"}
    9:9:void <init>() -> <init>
    18:18:char getClosingCharacter() -> getClosingCharacter
    28:32:int getDelimiterUse(org.commonmark.parser.delimiter.DelimiterRun,org.commonmark.parser.delimiter.DelimiterRun) -> getDelimiterUse
    23:23:int getMinLength() -> getMinLength
    13:13:char getOpeningCharacter() -> getOpeningCharacter
    39:49:void process(org.commonmark.node.Text,org.commonmark.node.Text,int) -> process
org.commonmark.ext.gfm.tables.TableBlock -> org.commonmark.ext.gfm.tables.TableBlock:
# {"id":"sourceFile","fileName":"TableBlock.java"}
    8:8:void <init>() -> <init>
org.commonmark.ext.gfm.tables.TableBody -> org.commonmark.ext.gfm.tables.TableBody:
# {"id":"sourceFile","fileName":"TableBody.java"}
    8:8:void <init>() -> <init>
org.commonmark.ext.gfm.tables.TableCell -> org.commonmark.ext.gfm.tables.TableCell:
# {"id":"sourceFile","fileName":"TableCell.java"}
    8:8:void <init>() -> <init>
    28:28:org.commonmark.ext.gfm.tables.TableCell$Alignment getAlignment() -> getAlignment
    17:17:boolean isHeader() -> isHeader
    32:33:void setAlignment(org.commonmark.ext.gfm.tables.TableCell$Alignment) -> setAlignment
    21:22:void setHeader(boolean) -> setHeader
org.commonmark.ext.gfm.tables.TableCell$Alignment -> org.commonmark.ext.gfm.tables.TableCell$Alignment:
# {"id":"sourceFile","fileName":"TableCell.java"}
    38:39:void <clinit>() -> <clinit>
    38:38:void <init>(java.lang.String,int) -> <init>
    38:38:org.commonmark.ext.gfm.tables.TableCell$Alignment valueOf(java.lang.String) -> valueOf
    38:38:org.commonmark.ext.gfm.tables.TableCell$Alignment[] values() -> values
org.commonmark.ext.gfm.tables.TableHead -> org.commonmark.ext.gfm.tables.TableHead:
# {"id":"sourceFile","fileName":"TableHead.java"}
    8:8:void <init>() -> <init>
org.commonmark.ext.gfm.tables.TableRow -> org.commonmark.ext.gfm.tables.TableRow:
# {"id":"sourceFile","fileName":"TableRow.java"}
    8:8:void <init>() -> <init>
org.commonmark.ext.gfm.tables.TablesExtension -> org.commonmark.ext.gfm.tables.TablesExtension:
# {"id":"sourceFile","fileName":"TablesExtension.java"}
    32:33:void <init>() -> <init>
    36:36:org.commonmark.Extension create() -> create
    41:42:void extend(org.commonmark.parser.Parser$Builder) -> extend
org.commonmark.ext.gfm.tables.internal.TableBlockParser -> org.commonmark.ext.gfm.tables.internal.TableBlockParser:
# {"id":"sourceFile","fileName":"TableBlockParser.java"}
    12:12:void <init>(java.util.List,java.util.List,org.commonmark.ext.gfm.tables.internal.TableBlockParser$1) -> <init>
    14:24:void <init>(java.util.List,java.util.List) -> <init>
    12:12:java.util.List access$000(java.lang.CharSequence) -> access$000
    12:12:java.util.List access$100(java.lang.CharSequence) -> access$100
    47:52:void addLine(java.lang.CharSequence) -> addLine
    28:28:boolean canHaveLazyContinuationLines() -> canHaveLazyContinuationLines
    211:218:org.commonmark.ext.gfm.tables.TableCell$Alignment getAlignment(boolean,boolean) -> getAlignment
    33:33:org.commonmark.node.Block getBlock() -> getBlock
    92:100:org.commonmark.ext.gfm.tables.TableCell parseCell(java.lang.String,int,org.commonmark.parser.InlineParser) -> parseCell
    56:89:void parseInlines(org.commonmark.parser.InlineParser) -> parseInlines
    148:207:java.util.List parseSeparator(java.lang.CharSequence) -> parseSeparator
    104:136:java.util.List split(java.lang.CharSequence) -> split
    38:41:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.ext.gfm.tables.internal.TableBlockParser$1 -> org.commonmark.ext.gfm.tables.internal.TableBlockParser$1:
# {"id":"sourceFile","fileName":"TableBlockParser.java"}
org.commonmark.ext.gfm.tables.internal.TableBlockParser$Factory -> org.commonmark.ext.gfm.tables.internal.TableBlockParser$Factory:
# {"id":"sourceFile","fileName":"TableBlockParser.java"}
    222:222:void <init>() -> <init>
    226:240:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.BlockContent -> org.commonmark.internal.BlockContent:
# {"id":"sourceFile","fileName":"BlockContent.java"}
    7:11:void <init>() -> <init>
    18:23:void add(java.lang.CharSequence) -> add
    26:26:java.lang.String getString() -> getString
org.commonmark.internal.BlockContinueImpl -> org.commonmark.internal.BlockContinueImpl:
# {"id":"sourceFile","fileName":"BlockContinueImpl.java"}
    11:15:void <init>(int,int,boolean) -> <init>
    22:22:int getNewColumn() -> getNewColumn
    18:18:int getNewIndex() -> getNewIndex
    26:26:boolean isFinalize() -> isFinalize
org.commonmark.internal.BlockQuoteParser -> org.commonmark.internal.BlockQuoteParser:
# {"id":"sourceFile","fileName":"BlockQuoteParser.java"}
    8:10:void <init>() -> <init>
    8:8:boolean access$000(org.commonmark.parser.block.ParserState,int) -> access$000
    19:19:boolean canContain(org.commonmark.node.Block) -> canContain
    8:8:org.commonmark.node.Block getBlock() -> getBlock
    24:24:org.commonmark.node.BlockQuote getBlock() -> getBlock
    14:14:boolean isContainer() -> isContainer
    43:44:boolean isMarker(org.commonmark.parser.block.ParserState,int) -> isMarker
    29:38:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.BlockQuoteParser$Factory -> org.commonmark.internal.BlockQuoteParser$Factory:
# {"id":"sourceFile","fileName":"BlockQuoteParser.java"}
    47:47:void <init>() -> <init>
    49:58:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.BlockStartImpl -> org.commonmark.internal.BlockStartImpl:
# {"id":"sourceFile","fileName":"BlockStartImpl.java"}
    9:15:void <init>(org.commonmark.parser.block.BlockParser[]) -> <init>
    41:42:org.commonmark.parser.block.BlockStart atColumn(int) -> atColumn
    35:36:org.commonmark.parser.block.BlockStart atIndex(int) -> atIndex
    18:18:org.commonmark.parser.block.BlockParser[] getBlockParsers() -> getBlockParsers
    26:26:int getNewColumn() -> getNewColumn
    22:22:int getNewIndex() -> getNewIndex
    30:30:boolean isReplaceActiveBlockParser() -> isReplaceActiveBlockParser
    47:48:org.commonmark.parser.block.BlockStart replaceActiveBlockParser() -> replaceActiveBlockParser
org.commonmark.internal.Bracket -> org.commonmark.internal.Bracket:
# {"id":"sourceFile","fileName":"Bracket.java"}
    27:48:void <init>(org.commonmark.node.Text,int,org.commonmark.internal.Bracket,org.commonmark.internal.Delimiter,boolean) -> <init>
    39:39:org.commonmark.internal.Bracket image(org.commonmark.node.Text,int,org.commonmark.internal.Bracket,org.commonmark.internal.Delimiter) -> image
    35:35:org.commonmark.internal.Bracket link(org.commonmark.node.Text,int,org.commonmark.internal.Bracket,org.commonmark.internal.Delimiter) -> link
org.commonmark.internal.Delimiter -> org.commonmark.internal.Delimiter:
# {"id":"sourceFile","fileName":"Delimiter.java"}
    27:36:void <init>(org.commonmark.node.Text,char,boolean,boolean,org.commonmark.internal.Delimiter) -> <init>
    45:45:boolean canClose() -> canClose
    40:40:boolean canOpen() -> canOpen
    50:50:int length() -> length
    55:55:int originalLength() -> originalLength
org.commonmark.internal.DocumentBlockParser -> org.commonmark.internal.DocumentBlockParser:
# {"id":"sourceFile","fileName":"DocumentBlockParser.java"}
    9:11:void <init>() -> <init>
    35:35:void addLine(java.lang.CharSequence) -> addLine
    20:20:boolean canContain(org.commonmark.node.Block) -> canContain
    9:9:org.commonmark.node.Block getBlock() -> getBlock
    25:25:org.commonmark.node.Document getBlock() -> getBlock
    15:15:boolean isContainer() -> isContainer
    30:30:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.DocumentParser -> org.commonmark.internal.DocumentParser:
# {"id":"sourceFile","fileName":"DocumentParser.java"}
    17:38:void <clinit>() -> <clinit>
    46:81:void <init>(java.util.List,org.commonmark.parser.InlineParserFactory,java.util.List) -> <init>
    442:444:void activateBlockParser(org.commonmark.parser.block.BlockParser) -> activateBlockParser
    431:438:org.commonmark.parser.block.BlockParser addChild(org.commonmark.parser.block.BlockParser) -> addChild
    402:412:void addDefinitionsFrom(org.commonmark.internal.ParagraphParser) -> addDefinitionsFrom
    356:371:void addLine() -> addLine
    340:348:void advance() -> advance
    88:94:java.util.List calculateBlockParserFactories(java.util.List,java.util.Set) -> calculateBlockParserFactories
    447:448:void deactivateBlockParser() -> deactivateBlockParser
    390:399:void finalize(org.commonmark.parser.block.BlockParser) -> finalize
    479:481:org.commonmark.node.Document finalizeAndProcess() -> finalizeAndProcess
    472:476:void finalizeBlocks(java.util.List) -> finalizeBlocks
    374:381:org.commonmark.internal.BlockStartImpl findBlockStart(org.commonmark.parser.block.BlockParser) -> findBlockStart
    279:303:void findNextNonSpace() -> findNextNonSpace
    168:168:org.commonmark.parser.block.BlockParser getActiveBlockParser() -> getActiveBlockParser
    153:153:int getColumn() -> getColumn
    84:84:java.util.Set getDefaultBlockParserTypes() -> getDefaultBlockParserTypes
    158:158:int getIndent() -> getIndent
    143:143:int getIndex() -> getIndex
    138:138:java.lang.CharSequence getLine() -> getLine
    148:148:int getNextNonSpaceIndex() -> getNextNonSpaceIndex
    176:276:void incorporateLine(java.lang.CharSequence) -> incorporateLine
    163:163:boolean isBlank() -> isBlank
    101:117:org.commonmark.node.Document parse(java.lang.String) -> parse
    451:466:void prepareActiveBlockParserForReplacement() -> prepareActiveBlockParserForReplacement
    418:424:void processInlines() -> processInlines
    320:337:void setNewColumn(int) -> setNewColumn
    306:317:void setNewIndex(int) -> setNewIndex
org.commonmark.internal.DocumentParser$MatchedBlockParserImpl -> org.commonmark.internal.DocumentParser$MatchedBlockParserImpl:
# {"id":"sourceFile","fileName":"DocumentParser.java"}
    488:490:void <init>(org.commonmark.parser.block.BlockParser) -> <init>
    494:494:org.commonmark.parser.block.BlockParser getMatchedBlockParser() -> getMatchedBlockParser
    499:508:java.lang.CharSequence getParagraphContent() -> getParagraphContent
org.commonmark.internal.FencedCodeBlockParser -> org.commonmark.internal.FencedCodeBlockParser:
# {"id":"sourceFile","fileName":"FencedCodeBlockParser.java"}
    12:21:void <init>(char,int,int) -> <init>
    10:10:org.commonmark.internal.FencedCodeBlockParser access$000(java.lang.CharSequence,int,int) -> access$000
    10:10:org.commonmark.node.FencedCodeBlock access$100(org.commonmark.internal.FencedCodeBlockParser) -> access$100
    51:57:void addLine(java.lang.CharSequence) -> addLine
    88:114:org.commonmark.internal.FencedCodeBlockParser checkOpener(java.lang.CharSequence,int,int) -> checkOpener
    62:64:void closeBlock() -> closeBlock
    25:25:org.commonmark.node.Block getBlock() -> getBlock
    122:130:boolean isClosing(java.lang.CharSequence,int) -> isClosing
    30:46:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.FencedCodeBlockParser$Factory -> org.commonmark.internal.FencedCodeBlockParser$Factory:
# {"id":"sourceFile","fileName":"FencedCodeBlockParser.java"}
    66:66:void <init>() -> <init>
    70:80:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.HeadingParser -> org.commonmark.internal.HeadingParser:
# {"id":"sourceFile","fileName":"HeadingParser.java"}
    11:17:void <init>(int,java.lang.String) -> <init>
    9:9:org.commonmark.internal.HeadingParser access$000(java.lang.CharSequence,int) -> access$000
    9:9:int access$100(java.lang.CharSequence,int) -> access$100
    70:93:org.commonmark.internal.HeadingParser getAtxHeading(java.lang.CharSequence,int) -> getAtxHeading
    21:21:org.commonmark.node.Block getBlock() -> getBlock
    100:110:int getSetextHeadingLevel(java.lang.CharSequence,int) -> getSetextHeadingLevel
    114:116:boolean isSetextHeadingRest(java.lang.CharSequence,int,char) -> isSetextHeadingRest
    32:33:void parseInlines(org.commonmark.parser.InlineParser) -> parseInlines
    27:27:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.HeadingParser$Factory -> org.commonmark.internal.HeadingParser$Factory:
# {"id":"sourceFile","fileName":"HeadingParser.java"}
    35:35:void <init>() -> <init>
    39:61:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.HtmlBlockParser -> org.commonmark.internal.HtmlBlockParser:
# {"id":"sourceFile","fileName":"HtmlBlockParser.java"}
    13:56:void <clinit>() -> <clinit>
    11:11:void <init>(java.util.regex.Pattern,org.commonmark.internal.HtmlBlockParser$1) -> <init>
    61:69:void <init>(java.util.regex.Pattern) -> <init>
    11:11:java.util.regex.Pattern[][] access$000() -> access$000
    92:97:void addLine(java.lang.CharSequence) -> addLine
    101:103:void closeBlock() -> closeBlock
    73:73:org.commonmark.node.Block getBlock() -> getBlock
    78:86:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.HtmlBlockParser$1 -> org.commonmark.internal.HtmlBlockParser$1:
# {"id":"sourceFile","fileName":"HtmlBlockParser.java"}
org.commonmark.internal.HtmlBlockParser$Factory -> org.commonmark.internal.HtmlBlockParser$Factory:
# {"id":"sourceFile","fileName":"HtmlBlockParser.java"}
    105:105:void <init>() -> <init>
    109:126:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.IndentedCodeBlockParser -> org.commonmark.internal.IndentedCodeBlockParser:
# {"id":"sourceFile","fileName":"IndentedCodeBlockParser.java"}
    12:15:void <init>() -> <init>
    35:36:void addLine(java.lang.CharSequence) -> addLine
    40:56:void closeBlock() -> closeBlock
    19:19:org.commonmark.node.Block getBlock() -> getBlock
    24:29:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.IndentedCodeBlockParser$Factory -> org.commonmark.internal.IndentedCodeBlockParser$Factory:
# {"id":"sourceFile","fileName":"IndentedCodeBlockParser.java"}
    58:58:void <init>() -> <init>
    63:66:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.InlineParserContextImpl -> org.commonmark.internal.InlineParserContextImpl:
# {"id":"sourceFile","fileName":"InlineParserContextImpl.java"}
    16:19:void <init>(java.util.List,java.util.Map) -> <init>
    23:23:java.util.List getCustomDelimiterProcessors() -> getCustomDelimiterProcessors
    28:28:org.commonmark.node.LinkReferenceDefinition getLinkReferenceDefinition(java.lang.String) -> getLinkReferenceDefinition
org.commonmark.internal.InlineParserImpl -> org.commonmark.internal.InlineParserImpl:
# {"id":"sourceFile","fileName":"InlineParserImpl.java"}
    28:53:void <clinit>() -> <clinit>
    74:80:void <init>(org.commonmark.parser.InlineParserContext) -> <init>
    535:539:void addBracket(org.commonmark.internal.Bracket) -> addBracket
    138:142:void addDelimiterProcessorForChar(char,org.commonmark.parser.delimiter.DelimiterProcessor,java.util.Map) -> addDelimiterProcessorForChar
    112:135:void addDelimiterProcessors(java.lang.Iterable,java.util.Map) -> addDelimiterProcessors
    83:87:java.util.BitSet calculateDelimiterCharacters(java.util.Set) -> calculateDelimiterCharacters
    105:108:java.util.Map calculateDelimiterProcessors(java.util.List) -> calculateDelimiterProcessors
    91:101:java.util.BitSet calculateSpecialCharacters(java.util.BitSet) -> calculateSpecialCharacters
    247:257:java.lang.String match(java.util.regex.Pattern) -> match
    862:867:void mergeChildTextNodes(org.commonmark.node.Node) -> mergeChildTextNodes
    899:913:void mergeIfNeeded(org.commonmark.node.Text,org.commonmark.node.Text,int) -> mergeIfNeeded
    853:858:void mergeTextNodesBetweenExclusive(org.commonmark.node.Node,org.commonmark.node.Node) -> mergeTextNodesBetweenExclusive
    870:896:void mergeTextNodesInclusive(org.commonmark.node.Node,org.commonmark.node.Node) -> mergeTextNodesInclusive
    149:164:void parse(java.lang.String,org.commonmark.node.Node) -> parse
    608:619:org.commonmark.node.Node parseAutolink() -> parseAutolink
    310:321:org.commonmark.node.Node parseBackslash() -> parseBackslash
    328:355:org.commonmark.node.Node parseBackticks() -> parseBackticks
    403:415:org.commonmark.node.Node parseBang() -> parseBang
    424:530:org.commonmark.node.Node parseCloseBracket() -> parseCloseBracket
    362:380:org.commonmark.node.Node parseDelimiters(org.commonmark.parser.delimiter.DelimiterProcessor,char) -> parseDelimiters
    642:645:org.commonmark.node.Node parseEntity() -> parseEntity
    627:633:org.commonmark.node.Node parseHtmlInline() -> parseHtmlInline
    188:239:org.commonmark.node.Node parseInline(org.commonmark.node.Node) -> parseInline
    549:563:java.lang.String parseLinkDestination() -> parseLinkDestination
    585:600:int parseLinkLabel() -> parseLinkLabel
    570:578:java.lang.String parseLinkTitle() -> parseLinkTitle
    283:301:org.commonmark.node.Node parseNewline(org.commonmark.node.Node) -> parseNewline
    387:395:org.commonmark.node.Node parseOpenBracket() -> parseOpenBracket
    653:664:org.commonmark.node.Node parseString() -> parseString
    265:268:char peek() -> peek
    721:812:void processDelimiters(org.commonmark.internal.Delimiter) -> processDelimiters
    840:849:void removeDelimiter(org.commonmark.internal.Delimiter) -> removeDelimiter
    827:830:void removeDelimiterAndNode(org.commonmark.internal.Delimiter) -> removeDelimiterAndNode
    836:837:void removeDelimiterKeepNode(org.commonmark.internal.Delimiter) -> removeDelimiterKeepNode
    815:821:void removeDelimitersBetween(org.commonmark.internal.Delimiter,org.commonmark.internal.Delimiter) -> removeDelimitersBetween
    542:543:void removeLastBracket() -> removeLastBracket
    167:171:void reset(java.lang.String) -> reset
    675:716:org.commonmark.internal.InlineParserImpl$DelimiterData scanDelimiters(org.commonmark.parser.delimiter.DelimiterProcessor,char) -> scanDelimiters
    276:277:void spnl() -> spnl
    175:175:org.commonmark.node.Text text(java.lang.String,int,int) -> text
    179:179:org.commonmark.node.Text text(java.lang.String) -> text
org.commonmark.internal.InlineParserImpl$DelimiterData -> org.commonmark.internal.InlineParserImpl$DelimiterData:
# {"id":"sourceFile","fileName":"InlineParserImpl.java"}
    921:925:void <init>(int,boolean,boolean) -> <init>
org.commonmark.internal.LinkReferenceDefinitionParser -> org.commonmark.internal.LinkReferenceDefinitionParser:
# {"id":"sourceFile","fileName":"LinkReferenceDefinitionParser.java"}
    16:28:void <init>() -> <init>
    142:164:int destination(java.lang.CharSequence,int) -> destination
    232:245:void finishReference() -> finishReference
    78:79:java.util.List getDefinitions() -> getDefinitions
    74:74:java.lang.CharSequence getParagraphContent() -> getParagraphContent
    104:137:int label(java.lang.CharSequence,int) -> label
    31:71:void parse(java.lang.CharSequence) -> parse
    87:100:int startDefinition(java.lang.CharSequence,int) -> startDefinition
    168:198:int startTitle(java.lang.CharSequence,int) -> startTitle
    202:228:int title(java.lang.CharSequence,int) -> title
org.commonmark.internal.LinkReferenceDefinitionParser$1 -> org.commonmark.internal.LinkReferenceDefinitionParser$1:
# {"id":"sourceFile","fileName":"LinkReferenceDefinitionParser.java"}
    38:38:void <clinit>() -> <clinit>
org.commonmark.internal.LinkReferenceDefinitionParser$State -> org.commonmark.internal.LinkReferenceDefinitionParser$State:
# {"id":"sourceFile","fileName":"LinkReferenceDefinitionParser.java"}
    247:260:void <clinit>() -> <clinit>
    247:247:void <init>(java.lang.String,int) -> <init>
    247:247:org.commonmark.internal.LinkReferenceDefinitionParser$State valueOf(java.lang.String) -> valueOf
    247:247:org.commonmark.internal.LinkReferenceDefinitionParser$State[] values() -> values
org.commonmark.internal.ListBlockParser -> org.commonmark.internal.ListBlockParser:
# {"id":"sourceFile","fileName":"ListBlockParser.java"}
    14:16:void <init>(org.commonmark.node.ListBlock) -> <init>
    7:7:org.commonmark.internal.ListBlockParser$ListData access$000(java.lang.CharSequence,int,int,boolean) -> access$000
    7:7:boolean access$100(org.commonmark.node.ListBlock,org.commonmark.node.ListBlock) -> access$100
    25:36:boolean canContain(org.commonmark.node.Block) -> canContain
    199:199:boolean equals(java.lang.Object,java.lang.Object) -> equals
    42:42:org.commonmark.node.Block getBlock() -> getBlock
    20:20:boolean isContainer() -> isContainer
    171:180:boolean isSpaceTabOrEnd(java.lang.CharSequence,int) -> isSpaceTabOrEnd
    190:195:boolean listsMatch(org.commonmark.node.ListBlock,org.commonmark.node.ListBlock) -> listsMatch
    63:107:org.commonmark.internal.ListBlockParser$ListData parseList(java.lang.CharSequence,int,int,boolean) -> parseList
    111:125:org.commonmark.internal.ListBlockParser$ListMarkerData parseListMarker(java.lang.CharSequence,int) -> parseListMarker
    132:167:org.commonmark.internal.ListBlockParser$ListMarkerData parseOrderedList(java.lang.CharSequence,int) -> parseOrderedList
    47:55:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.ListBlockParser$Factory -> org.commonmark.internal.ListBlockParser$Factory:
# {"id":"sourceFile","fileName":"ListBlockParser.java"}
    202:202:void <init>() -> <init>
    206:232:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.ListBlockParser$ListData -> org.commonmark.internal.ListBlockParser$ListData:
# {"id":"sourceFile","fileName":"ListBlockParser.java"}
    241:244:void <init>(org.commonmark.node.ListBlock,int) -> <init>
org.commonmark.internal.ListBlockParser$ListMarkerData -> org.commonmark.internal.ListBlockParser$ListMarkerData:
# {"id":"sourceFile","fileName":"ListBlockParser.java"}
    251:254:void <init>(org.commonmark.node.ListBlock,int) -> <init>
org.commonmark.internal.ListItemParser -> org.commonmark.internal.ListItemParser:
# {"id":"sourceFile","fileName":"ListItemParser.java"}
    13:25:void <init>(int) -> <init>
    34:44:boolean canContain(org.commonmark.node.Block) -> canContain
    49:49:org.commonmark.node.Block getBlock() -> getBlock
    29:29:boolean isContainer() -> isContainer
    54:69:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.ParagraphParser -> org.commonmark.internal.ParagraphParser:
# {"id":"sourceFile","fileName":"ParagraphParser.java"}
    13:16:void <init>() -> <init>
    39:40:void addLine(java.lang.CharSequence) -> addLine
    20:20:boolean canHaveLazyContinuationLines() -> canHaveLazyContinuationLines
    44:47:void closeBlock() -> closeBlock
    25:25:org.commonmark.node.Block getBlock() -> getBlock
    58:58:java.lang.CharSequence getContentString() -> getContentString
    62:62:java.util.List getDefinitions() -> getDefinitions
    51:55:void parseInlines(org.commonmark.parser.InlineParser) -> parseInlines
    30:33:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.StaggeredDelimiterProcessor -> org.commonmark.internal.StaggeredDelimiterProcessor:
# {"id":"sourceFile","fileName":"StaggeredDelimiterProcessor.java"}
    19:24:void <init>(char) -> <init>
    43:62:void add(org.commonmark.parser.delimiter.DelimiterProcessor) -> add
    65:70:org.commonmark.parser.delimiter.DelimiterProcessor findProcessor(int) -> findProcessor
    34:34:char getClosingCharacter() -> getClosingCharacter
    75:75:int getDelimiterUse(org.commonmark.parser.delimiter.DelimiterRun,org.commonmark.parser.delimiter.DelimiterRun) -> getDelimiterUse
    39:39:int getMinLength() -> getMinLength
    29:29:char getOpeningCharacter() -> getOpeningCharacter
    80:81:void process(org.commonmark.node.Text,org.commonmark.node.Text,int) -> process
org.commonmark.internal.ThematicBreakParser -> org.commonmark.internal.ThematicBreakParser:
# {"id":"sourceFile","fileName":"ThematicBreakParser.java"}
    7:9:void <init>() -> <init>
    7:7:boolean access$000(java.lang.CharSequence,int) -> access$000
    13:13:org.commonmark.node.Block getBlock() -> getBlock
    42:66:boolean isThematicBreak(java.lang.CharSequence,int) -> isThematicBreak
    19:19:org.commonmark.parser.block.BlockContinue tryContinue(org.commonmark.parser.block.ParserState) -> tryContinue
org.commonmark.internal.ThematicBreakParser$Factory -> org.commonmark.internal.ThematicBreakParser$Factory:
# {"id":"sourceFile","fileName":"ThematicBreakParser.java"}
    22:22:void <init>() -> <init>
    26:34:org.commonmark.parser.block.BlockStart tryStart(org.commonmark.parser.block.ParserState,org.commonmark.parser.block.MatchedBlockParser) -> tryStart
org.commonmark.internal.inline.AsteriskDelimiterProcessor -> org.commonmark.internal.inline.AsteriskDelimiterProcessor:
# {"id":"sourceFile","fileName":"AsteriskDelimiterProcessor.java"}
    6:7:void <init>() -> <init>
org.commonmark.internal.inline.EmphasisDelimiterProcessor -> org.commonmark.internal.inline.EmphasisDelimiterProcessor:
# {"id":"sourceFile","fileName":"EmphasisDelimiterProcessor.java"}
    14:16:void <init>(char) -> <init>
    25:25:char getClosingCharacter() -> getClosingCharacter
    36:45:int getDelimiterUse(org.commonmark.parser.delimiter.DelimiterRun,org.commonmark.parser.delimiter.DelimiterRun) -> getDelimiterUse
    30:30:int getMinLength() -> getMinLength
    20:20:char getOpeningCharacter() -> getOpeningCharacter
    51:64:void process(org.commonmark.node.Text,org.commonmark.node.Text,int) -> process
org.commonmark.internal.inline.UnderscoreDelimiterProcessor -> org.commonmark.internal.inline.UnderscoreDelimiterProcessor:
# {"id":"sourceFile","fileName":"UnderscoreDelimiterProcessor.java"}
    6:7:void <init>() -> <init>
org.commonmark.internal.util.Escaping -> org.commonmark.internal.util.Escaping:
# {"id":"sourceFile","fileName":"Escaping.java"}
    14:39:void <clinit>() -> <clinit>
    8:8:char[] access$000() -> access$000
    121:123:java.lang.String normalizeLabelContent(java.lang.String) -> normalizeLabelContent
    116:117:java.lang.String normalizeReference(java.lang.String) -> normalizeReference
    127:144:java.lang.String replaceAll(java.util.regex.Pattern,java.lang.String,org.commonmark.internal.util.Escaping$Replacer) -> replaceAll
    103:106:java.lang.String unescapeString(java.lang.String) -> unescapeString
org.commonmark.internal.util.Escaping$1 -> org.commonmark.internal.util.Escaping$1:
# {"id":"sourceFile","fileName":"Escaping.java"}
    28:28:void <init>() -> <init>
    31:36:void replace(java.lang.String,java.lang.StringBuilder) -> replace
org.commonmark.internal.util.Escaping$2 -> org.commonmark.internal.util.Escaping$2:
# {"id":"sourceFile","fileName":"Escaping.java"}
    39:39:void <init>() -> <init>
    42:59:void replace(java.lang.String,java.lang.StringBuilder) -> replace
org.commonmark.internal.util.Escaping$Replacer -> org.commonmark.internal.util.Escaping$Replacer:
# {"id":"sourceFile","fileName":"Escaping.java"}
org.commonmark.internal.util.Html5Entities -> org.commonmark.internal.util.Html5Entities:
# {"id":"sourceFile","fileName":"Html5Entities.java"}
    15:16:void <clinit>() -> <clinit>
    20:39:java.lang.String entityToString(java.lang.String) -> entityToString
    45:63:java.util.Map readEntities() -> readEntities
org.commonmark.internal.util.Html5Entities$$ExternalSyntheticBackport0 -> org.commonmark.internal.util.Html5Entities$$ExternalSyntheticBackport0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    0:0:void org.commonmark.internal.util.Html5Entities$$InternalSyntheticBackport$3$03e522b4ae0b61d39a2cc6e3dfe61ef7ae9ce751062d7382ac1028ecd5f88814$1.m(java.lang.Throwable,java.lang.Throwable) -> m
      # {"id":"com.android.tools.r8.synthesized"}
org.commonmark.internal.util.LinkScanner -> org.commonmark.internal.util.LinkScanner:
# {"id":"sourceFile","fileName":"LinkScanner.java"}
    34:56:int scanLinkDestination(java.lang.CharSequence,int) -> scanLinkDestination
    112:141:int scanLinkDestinationWithBalancedParens(java.lang.CharSequence,int) -> scanLinkDestinationWithBalancedParens
    113:146:int scanLinkDestinationWithBalancedParens(java.lang.CharSequence,int) -> scanLinkDestinationWithBalancedParens
    11:27:int scanLinkLabelContent(java.lang.CharSequence,int) -> scanLinkLabelContent
    61:90:int scanLinkTitle(java.lang.CharSequence,int) -> scanLinkTitle
    94:105:int scanLinkTitleContent(java.lang.CharSequence,int,char) -> scanLinkTitleContent
org.commonmark.internal.util.Parsing -> org.commonmark.internal.util.Parsing:
# {"id":"sourceFile","fileName":"Parsing.java"}
    20:20:void <clinit>() -> <clinit>
    24:24:int columnsToNextTabStop(int) -> columnsToNextTabStop
    28:34:int find(char,java.lang.CharSequence,int) -> find
    38:46:int findLineBreak(java.lang.CharSequence,int) -> findLineBreak
    192:206:int findNonSpace(java.lang.CharSequence,int) -> findNonSpace
    54:56:boolean hasNonSpace(java.lang.CharSequence) -> hasNonSpace
    50:50:boolean isBlank(java.lang.CharSequence) -> isBlank
    76:113:boolean isEscapable(java.lang.CharSequence,int) -> isEscapable
    60:61:boolean isLetter(java.lang.CharSequence,int) -> isLetter
    65:72:boolean isSpaceOrTab(java.lang.CharSequence,int) -> isSpaceOrTab
    121:143:java.lang.CharSequence prepareLine(java.lang.CharSequence) -> prepareLine
    148:153:int skip(char,java.lang.CharSequence,int,int) -> skip
    157:162:int skipBackwards(char,java.lang.CharSequence,int,int) -> skipBackwards
    166:175:int skipSpaceTab(java.lang.CharSequence,int,int) -> skipSpaceTab
    179:188:int skipSpaceTabBackwards(java.lang.CharSequence,int,int) -> skipSpaceTabBackwards
org.commonmark.node.AbstractVisitor -> org.commonmark.node.AbstractVisitor:
# {"id":"sourceFile","fileName":"AbstractVisitor.java"}
    9:9:void <init>() -> <init>
    13:14:void visit(org.commonmark.node.BlockQuote) -> visit
    18:19:void visit(org.commonmark.node.BulletList) -> visit
    23:24:void visit(org.commonmark.node.Code) -> visit
    28:29:void visit(org.commonmark.node.Document) -> visit
    33:34:void visit(org.commonmark.node.Emphasis) -> visit
    38:39:void visit(org.commonmark.node.FencedCodeBlock) -> visit
    43:44:void visit(org.commonmark.node.HardLineBreak) -> visit
    48:49:void visit(org.commonmark.node.Heading) -> visit
    53:54:void visit(org.commonmark.node.ThematicBreak) -> visit
    58:59:void visit(org.commonmark.node.HtmlInline) -> visit
    63:64:void visit(org.commonmark.node.HtmlBlock) -> visit
    68:69:void visit(org.commonmark.node.Image) -> visit
    73:74:void visit(org.commonmark.node.IndentedCodeBlock) -> visit
    78:79:void visit(org.commonmark.node.Link) -> visit
    88:89:void visit(org.commonmark.node.OrderedList) -> visit
    93:94:void visit(org.commonmark.node.Paragraph) -> visit
    98:99:void visit(org.commonmark.node.SoftLineBreak) -> visit
    103:104:void visit(org.commonmark.node.StrongEmphasis) -> visit
    108:109:void visit(org.commonmark.node.Text) -> visit
    113:114:void visit(org.commonmark.node.LinkReferenceDefinition) -> visit
    118:119:void visit(org.commonmark.node.CustomBlock) -> visit
    123:124:void visit(org.commonmark.node.CustomNode) -> visit
    132:140:void visitChildren(org.commonmark.node.Node) -> visitChildren
org.commonmark.node.Block -> org.commonmark.node.Block:
# {"id":"sourceFile","fileName":"Block.java"}
    3:3:void <init>() -> <init>
    3:3:org.commonmark.node.Node getParent() -> getParent
    6:6:org.commonmark.node.Block getParent() -> getParent
    11:15:void setParent(org.commonmark.node.Node) -> setParent
org.commonmark.node.BlockQuote -> org.commonmark.node.BlockQuote:
# {"id":"sourceFile","fileName":"BlockQuote.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.BulletList -> org.commonmark.node.BulletList:
# {"id":"sourceFile","fileName":"BulletList.java"}
    3:3:void <init>() -> <init>
    9:10:void accept(org.commonmark.node.Visitor) -> accept
    13:13:char getBulletMarker() -> getBulletMarker
    17:18:void setBulletMarker(char) -> setBulletMarker
org.commonmark.node.Code -> org.commonmark.node.Code:
# {"id":"sourceFile","fileName":"Code.java"}
    7:8:void <init>() -> <init>
    16:17:void accept(org.commonmark.node.Visitor) -> accept
    20:20:java.lang.String getLiteral() -> getLiteral
    24:25:void setLiteral(java.lang.String) -> setLiteral
org.commonmark.node.CustomBlock -> org.commonmark.node.CustomBlock:
# {"id":"sourceFile","fileName":"CustomBlock.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.CustomNode -> org.commonmark.node.CustomNode:
# {"id":"sourceFile","fileName":"CustomNode.java"}
    3:3:void <init>() -> <init>
    6:7:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.Document -> org.commonmark.node.Document:
# {"id":"sourceFile","fileName":"Document.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.Emphasis -> org.commonmark.node.Emphasis:
# {"id":"sourceFile","fileName":"Emphasis.java"}
    10:12:void <init>(java.lang.String) -> <init>
    30:31:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.FencedCodeBlock -> org.commonmark.node.FencedCodeBlock:
# {"id":"sourceFile","fileName":"FencedCodeBlock.java"}
    3:3:void <init>() -> <init>
    14:15:void accept(org.commonmark.node.Visitor) -> accept
    18:18:char getFenceChar() -> getFenceChar
    34:34:int getFenceIndent() -> getFenceIndent
    26:26:int getFenceLength() -> getFenceLength
    45:45:java.lang.String getInfo() -> getInfo
    53:53:java.lang.String getLiteral() -> getLiteral
    22:23:void setFenceChar(char) -> setFenceChar
    38:39:void setFenceIndent(int) -> setFenceIndent
    30:31:void setFenceLength(int) -> setFenceLength
    49:50:void setInfo(java.lang.String) -> setInfo
    57:58:void setLiteral(java.lang.String) -> setLiteral
org.commonmark.node.HardLineBreak -> org.commonmark.node.HardLineBreak:
# {"id":"sourceFile","fileName":"HardLineBreak.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.Heading -> org.commonmark.node.Heading:
# {"id":"sourceFile","fileName":"Heading.java"}
    3:3:void <init>() -> <init>
    9:10:void accept(org.commonmark.node.Visitor) -> accept
    13:13:int getLevel() -> getLevel
    17:18:void setLevel(int) -> setLevel
org.commonmark.node.HtmlBlock -> org.commonmark.node.HtmlBlock:
# {"id":"sourceFile","fileName":"HtmlBlock.java"}
    8:8:void <init>() -> <init>
    14:15:void accept(org.commonmark.node.Visitor) -> accept
    18:18:java.lang.String getLiteral() -> getLiteral
    22:23:void setLiteral(java.lang.String) -> setLiteral
org.commonmark.node.HtmlInline -> org.commonmark.node.HtmlInline:
# {"id":"sourceFile","fileName":"HtmlInline.java"}
    8:8:void <init>() -> <init>
    14:15:void accept(org.commonmark.node.Visitor) -> accept
    18:18:java.lang.String getLiteral() -> getLiteral
    22:23:void setLiteral(java.lang.String) -> setLiteral
org.commonmark.node.Image -> org.commonmark.node.Image:
# {"id":"sourceFile","fileName":"Image.java"}
    11:14:void <init>(java.lang.String,java.lang.String) -> <init>
    18:19:void accept(org.commonmark.node.Visitor) -> accept
    22:22:java.lang.String getDestination() -> getDestination
    39:39:java.lang.String toStringAttributes() -> toStringAttributes
org.commonmark.node.IndentedCodeBlock -> org.commonmark.node.IndentedCodeBlock:
# {"id":"sourceFile","fileName":"IndentedCodeBlock.java"}
    3:3:void <init>() -> <init>
    9:10:void accept(org.commonmark.node.Visitor) -> accept
    13:13:java.lang.String getLiteral() -> getLiteral
    17:18:void setLiteral(java.lang.String) -> setLiteral
org.commonmark.node.Link -> org.commonmark.node.Link:
# {"id":"sourceFile","fileName":"Link.java"}
    31:34:void <init>(java.lang.String,java.lang.String) -> <init>
    38:39:void accept(org.commonmark.node.Visitor) -> accept
    42:42:java.lang.String getDestination() -> getDestination
    59:59:java.lang.String toStringAttributes() -> toStringAttributes
org.commonmark.node.LinkReferenceDefinition -> org.commonmark.node.LinkReferenceDefinition:
# {"id":"sourceFile","fileName":"LinkReferenceDefinition.java"}
    23:27:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    55:56:void accept(org.commonmark.node.Visitor) -> accept
    38:38:java.lang.String getDestination() -> getDestination
    30:30:java.lang.String getLabel() -> getLabel
    46:46:java.lang.String getTitle() -> getTitle
org.commonmark.node.ListBlock -> org.commonmark.node.ListBlock:
# {"id":"sourceFile","fileName":"ListBlock.java"}
    3:3:void <init>() -> <init>
    12:12:boolean isTight() -> isTight
    16:17:void setTight(boolean) -> setTight
org.commonmark.node.ListItem -> org.commonmark.node.ListItem:
# {"id":"sourceFile","fileName":"ListItem.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.Node -> org.commonmark.node.Node:
# {"id":"sourceFile","fileName":"Node.java"}
    3:9:void <init>() -> <init>
    38:48:void appendChild(org.commonmark.node.Node) -> appendChild
    22:22:org.commonmark.node.Node getFirstChild() -> getFirstChild
    26:26:org.commonmark.node.Node getLastChild() -> getLastChild
    14:14:org.commonmark.node.Node getNext() -> getNext
    30:30:org.commonmark.node.Node getParent() -> getParent
    18:18:org.commonmark.node.Node getPrevious() -> getPrevious
    80:91:void insertAfter(org.commonmark.node.Node) -> insertAfter
    94:105:void insertBefore(org.commonmark.node.Node) -> insertBefore
    34:35:void setParent(org.commonmark.node.Node) -> setParent
    109:109:java.lang.String toString() -> toString
    113:113:java.lang.String toStringAttributes() -> toStringAttributes
    64:77:void unlink() -> unlink
org.commonmark.node.OrderedList -> org.commonmark.node.OrderedList:
# {"id":"sourceFile","fileName":"OrderedList.java"}
    3:3:void <init>() -> <init>
    10:11:void accept(org.commonmark.node.Visitor) -> accept
    22:22:char getDelimiter() -> getDelimiter
    14:14:int getStartNumber() -> getStartNumber
    26:27:void setDelimiter(char) -> setDelimiter
    18:19:void setStartNumber(int) -> setStartNumber
org.commonmark.node.Paragraph -> org.commonmark.node.Paragraph:
# {"id":"sourceFile","fileName":"Paragraph.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.SoftLineBreak -> org.commonmark.node.SoftLineBreak:
# {"id":"sourceFile","fileName":"SoftLineBreak.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.StrongEmphasis -> org.commonmark.node.StrongEmphasis:
# {"id":"sourceFile","fileName":"StrongEmphasis.java"}
    10:12:void <init>(java.lang.String) -> <init>
    30:31:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.Text -> org.commonmark.node.Text:
# {"id":"sourceFile","fileName":"Text.java"}
    10:12:void <init>(java.lang.String) -> <init>
    16:17:void accept(org.commonmark.node.Visitor) -> accept
    20:20:java.lang.String getLiteral() -> getLiteral
    24:25:void setLiteral(java.lang.String) -> setLiteral
    29:29:java.lang.String toStringAttributes() -> toStringAttributes
org.commonmark.node.ThematicBreak -> org.commonmark.node.ThematicBreak:
# {"id":"sourceFile","fileName":"ThematicBreak.java"}
    3:3:void <init>() -> <init>
    7:8:void accept(org.commonmark.node.Visitor) -> accept
org.commonmark.node.Visitor -> org.commonmark.node.Visitor:
# {"id":"sourceFile","fileName":"Visitor.java"}
org.commonmark.parser.InlineParser -> org.commonmark.parser.InlineParser:
# {"id":"sourceFile","fileName":"InlineParser.java"}
org.commonmark.parser.InlineParserContext -> org.commonmark.parser.InlineParserContext:
# {"id":"sourceFile","fileName":"InlineParserContext.java"}
org.commonmark.parser.InlineParserFactory -> org.commonmark.parser.InlineParserFactory:
# {"id":"sourceFile","fileName":"InlineParserFactory.java"}
org.commonmark.parser.Parser -> org.commonmark.parser.Parser:
# {"id":"sourceFile","fileName":"Parser.java"}
    28:28:void <init>(org.commonmark.parser.Parser$Builder,org.commonmark.parser.Parser$1) -> <init>
    35:45:void <init>(org.commonmark.parser.Parser$Builder) -> <init>
    102:102:org.commonmark.internal.DocumentParser createDocumentParser() -> createDocumentParser
    65:70:org.commonmark.node.Node parse(java.lang.String) -> parse
    106:109:org.commonmark.node.Node postProcess(org.commonmark.node.Node) -> postProcess
org.commonmark.parser.Parser$1 -> org.commonmark.parser.Parser$1:
# {"id":"sourceFile","fileName":"Parser.java"}
org.commonmark.parser.Parser$Builder -> org.commonmark.parser.Parser$Builder:
# {"id":"sourceFile","fileName":"Parser.java"}
    115:119:void <init>() -> <init>
    115:115:java.util.List access$000(org.commonmark.parser.Parser$Builder) -> access$000
    115:115:java.util.Set access$100(org.commonmark.parser.Parser$Builder) -> access$100
    115:115:org.commonmark.parser.InlineParserFactory access$200(org.commonmark.parser.Parser$Builder) -> access$200
    115:115:java.util.List access$300(org.commonmark.parser.Parser$Builder) -> access$300
    115:115:java.util.List access$400(org.commonmark.parser.Parser$Builder) -> access$400
    126:126:org.commonmark.parser.Parser build() -> build
    192:196:org.commonmark.parser.Parser$Builder customBlockParserFactory(org.commonmark.parser.block.BlockParserFactory) -> customBlockParserFactory
    210:214:org.commonmark.parser.Parser$Builder customDelimiterProcessor(org.commonmark.parser.delimiter.DelimiterProcessor) -> customDelimiterProcessor
    134:143:org.commonmark.parser.Parser$Builder extensions(java.lang.Iterable) -> extensions
    250:253:org.commonmark.parser.InlineParserFactory getInlineParserFactory() -> getInlineParserFactory
    245:246:org.commonmark.parser.Parser$Builder inlineParserFactory(org.commonmark.parser.InlineParserFactory) -> inlineParserFactory
    218:222:org.commonmark.parser.Parser$Builder postProcessor(org.commonmark.parser.PostProcessor) -> postProcessor
org.commonmark.parser.Parser$Builder$1 -> org.commonmark.parser.Parser$Builder$1:
# {"id":"sourceFile","fileName":"Parser.java"}
    253:253:void <init>(org.commonmark.parser.Parser$Builder) -> <init>
    256:256:org.commonmark.parser.InlineParser create(org.commonmark.parser.InlineParserContext) -> create
org.commonmark.parser.Parser$ParserExtension -> org.commonmark.parser.Parser$ParserExtension:
# {"id":"sourceFile","fileName":"Parser.java"}
org.commonmark.parser.PostProcessor -> org.commonmark.parser.PostProcessor:
# {"id":"sourceFile","fileName":"PostProcessor.java"}
org.commonmark.parser.block.AbstractBlockParser -> org.commonmark.parser.block.AbstractBlockParser:
# {"id":"sourceFile","fileName":"AbstractBlockParser.java"}
    6:6:void <init>() -> <init>
    25:25:void addLine(java.lang.CharSequence) -> addLine
    20:20:boolean canContain(org.commonmark.node.Block) -> canContain
    15:15:boolean canHaveLazyContinuationLines() -> canHaveLazyContinuationLines
    29:29:void closeBlock() -> closeBlock
    10:10:boolean isContainer() -> isContainer
    33:33:void parseInlines(org.commonmark.parser.InlineParser) -> parseInlines
org.commonmark.parser.block.AbstractBlockParserFactory -> org.commonmark.parser.block.AbstractBlockParserFactory:
# {"id":"sourceFile","fileName":"AbstractBlockParserFactory.java"}
    3:3:void <init>() -> <init>
org.commonmark.parser.block.BlockContinue -> org.commonmark.parser.block.BlockContinue:
# {"id":"sourceFile","fileName":"BlockContinue.java"}
    10:11:void <init>() -> <init>
    22:22:org.commonmark.parser.block.BlockContinue atColumn(int) -> atColumn
    18:18:org.commonmark.parser.block.BlockContinue atIndex(int) -> atIndex
    26:26:org.commonmark.parser.block.BlockContinue finished() -> finished
    14:14:org.commonmark.parser.block.BlockContinue none() -> none
org.commonmark.parser.block.BlockParser -> org.commonmark.parser.block.BlockParser:
# {"id":"sourceFile","fileName":"BlockParser.java"}
org.commonmark.parser.block.BlockParserFactory -> org.commonmark.parser.block.BlockParserFactory:
# {"id":"sourceFile","fileName":"BlockParserFactory.java"}
org.commonmark.parser.block.BlockStart -> org.commonmark.parser.block.BlockStart:
# {"id":"sourceFile","fileName":"BlockStart.java"}
    10:11:void <init>() -> <init>
    14:14:org.commonmark.parser.block.BlockStart none() -> none
    18:18:org.commonmark.parser.block.BlockStart of(org.commonmark.parser.block.BlockParser[]) -> of
org.commonmark.parser.block.MatchedBlockParser -> org.commonmark.parser.block.MatchedBlockParser:
# {"id":"sourceFile","fileName":"MatchedBlockParser.java"}
org.commonmark.parser.block.ParserState -> org.commonmark.parser.block.ParserState:
# {"id":"sourceFile","fileName":"ParserState.java"}
org.commonmark.parser.delimiter.DelimiterProcessor -> org.commonmark.parser.delimiter.DelimiterProcessor:
# {"id":"sourceFile","fileName":"DelimiterProcessor.java"}
org.commonmark.parser.delimiter.DelimiterRun -> org.commonmark.parser.delimiter.DelimiterRun:
# {"id":"sourceFile","fileName":"DelimiterRun.java"}
org.lsposed.lsparanoid.Deobfuscator$ScrcpyForAndroid$app -> org.lsposed.lsparanoid.Deobfuscator$ScrcpyForAndroid$app:
    0:0:void <clinit>() -> <clinit>
    0:0:java.lang.String getString(long) -> getString
org.lsposed.lsparanoid.DeobfuscatorHelper -> org.lsposed.lsparanoid.DeobfuscatorHelper:
# {"id":"sourceFile","fileName":"DeobfuscatorHelper.java"}
    60:62:long getCharAt(int,java.lang.String[],long) -> getCharAt
    41:56:java.lang.String getString(long,java.lang.String[]) -> getString
org.lsposed.lsparanoid.RandomHelper -> org.lsposed.lsparanoid.RandomHelper:
# {"id":"sourceFile","fileName":"RandomHelper.java"}
    46:64:long next(long) -> next
    68:68:short rotl(short,int) -> rotl
    35:36:long seed(long) -> seed
org.scilab.forge.jlatexmath.AccentedAtom -> org.scilab.forge.jlatexmath.AccentedAtom:
# {"id":"sourceFile","fileName":"AccentedAtom.java"}
    56:75:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom) -> <init>
    78:80:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,boolean) -> <init>
    56:104:void <init>(org.scilab.forge.jlatexmath.Atom,java.lang.String) -> <init>
    141:206:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.AlphabetRegistration -> org.scilab.forge.jlatexmath.AlphabetRegistration:
# {"id":"sourceFile","fileName":"AlphabetRegistration.java"}
org.scilab.forge.jlatexmath.ArrayOfAtoms -> org.scilab.forge.jlatexmath.ArrayOfAtoms:
# {"id":"sourceFile","fileName":"ArrayOfAtoms.java"}
    56:60:void <init>() -> <init>
    63:65:void addCol() -> addCol
    68:73:void addCol(int) -> addCol
    76:79:void addRow() -> addRow
    102:127:void checkDimensions() -> checkDimensions
    90:98:org.scilab.forge.jlatexmath.VRowAtom getAsVRow() -> getAsVRow
org.scilab.forge.jlatexmath.Atom -> org.scilab.forge.jlatexmath.Atom:
# {"id":"sourceFile","fileName":"Atom.java"}
    67:76:void <init>() -> <init>
    67:67:java.lang.Object clone() -> clone
    115:117:org.scilab.forge.jlatexmath.Atom clone() -> clone
    97:97:int getLeftType() -> getLeftType
    110:110:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.BigDelimiterAtom -> org.scilab.forge.jlatexmath.BigDelimiterAtom:
# {"id":"sourceFile","fileName":"BigDelimiterAtom.java"}
    56:59:void <init>(org.scilab.forge.jlatexmath.SymbolAtom,int) -> <init>
    62:69:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.BigOperatorAtom -> org.scilab.forge.jlatexmath.BigOperatorAtom:
# {"id":"sourceFile","fileName":"BigOperatorAtom.java"}
    58:83:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom) -> <init>
    219:222:org.scilab.forge.jlatexmath.Box changeWidth(org.scilab.forge.jlatexmath.Box,float) -> changeWidth
    101:159:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    118:211:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.BoldAtom -> org.scilab.forge.jlatexmath.BoldAtom:
# {"id":"sourceFile","fileName":"BoldAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    61:69:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.Box -> org.scilab.forge.jlatexmath.Box:
# {"id":"sourceFile","fileName":"Box.java"}
    75:75:void <clinit>() -> <clinit>
    155:156:void <init>() -> <init>
    97:168:void <init>(ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color) -> <init>
    133:136:void add(org.scilab.forge.jlatexmath.Box) -> add
    145:148:void add(int,org.scilab.forge.jlatexmath.Box) -> add
    302:333:void drawDebug(ru.noties.jlatexmath.awt.Graphics2D,float,float,boolean) -> drawDebug
    336:339:void drawDebug(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> drawDebug
    347:348:void endDraw(ru.noties.jlatexmath.awt.Graphics2D) -> endDraw
    214:214:float getDepth() -> getDepth
    205:205:float getHeight() -> getHeight
    223:223:float getShift() -> getShift
    192:192:float getWidth() -> getWidth
    196:197:void negWidth() -> negWidth
    241:242:void setDepth(float) -> setDepth
    250:251:void setHeight(float) -> setHeight
    259:260:void setShift(float) -> setShift
    232:233:void setWidth(float) -> setWidth
    288:299:void startDraw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> startDraw
org.scilab.forge.jlatexmath.BreakFormula -> org.scilab.forge.jlatexmath.BreakFormula:
# {"id":"sourceFile","fileName":"BreakFormula.java"}
    104:129:float canBreak(java.util.Stack,org.scilab.forge.jlatexmath.HorizontalBox,float) -> canBreak
    133:151:int getBreakPosition(org.scilab.forge.jlatexmath.HorizontalBox,int) -> getBreakPosition
    54:59:org.scilab.forge.jlatexmath.Box split(org.scilab.forge.jlatexmath.Box,float,float) -> split
    64:91:org.scilab.forge.jlatexmath.Box split(org.scilab.forge.jlatexmath.HorizontalBox,float,float) -> split
    95:100:org.scilab.forge.jlatexmath.Box split(org.scilab.forge.jlatexmath.VerticalBox,float,float) -> split
org.scilab.forge.jlatexmath.BreakFormula$Position -> org.scilab.forge.jlatexmath.BreakFormula$Position:
# {"id":"sourceFile","fileName":"BreakFormula.java"}
    159:162:void <init>(int,org.scilab.forge.jlatexmath.HorizontalBox) -> <init>
org.scilab.forge.jlatexmath.BreakMarkAtom -> org.scilab.forge.jlatexmath.BreakMarkAtom:
# {"id":"sourceFile","fileName":"BreakMarkAtom.java"}
    53:53:void <init>() -> <init>
    56:56:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.CedillaAtom -> org.scilab.forge.jlatexmath.CedillaAtom:
# {"id":"sourceFile","fileName":"CedillaAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:81:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.Char -> org.scilab.forge.jlatexmath.Char:
# {"id":"sourceFile","fileName":"Char.java"}
    61:66:void <init>(char,ru.noties.jlatexmath.awt.Font,int,org.scilab.forge.jlatexmath.Metrics) -> <init>
    73:73:char getChar() -> getChar
    69:69:org.scilab.forge.jlatexmath.CharFont getCharFont() -> getCharFont
    97:97:float getDepth() -> getDepth
    77:77:ru.noties.jlatexmath.awt.Font getFont() -> getFont
    81:81:int getFontCode() -> getFontCode
    93:93:float getHeight() -> getHeight
    89:89:float getItalic() -> getItalic
    101:101:org.scilab.forge.jlatexmath.Metrics getMetrics() -> getMetrics
    85:85:float getWidth() -> getWidth
org.scilab.forge.jlatexmath.CharAtom -> org.scilab.forge.jlatexmath.CharAtom:
# {"id":"sourceFile","fileName":"CharAtom.java"}
    69:73:void <init>(char,java.lang.String,boolean) -> <init>
    76:77:void <init>(char,java.lang.String) -> <init>
    84:98:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    109:118:org.scilab.forge.jlatexmath.Char getChar(org.scilab.forge.jlatexmath.TeXFont,int,boolean) -> getChar
    123:123:org.scilab.forge.jlatexmath.CharFont getCharFont(org.scilab.forge.jlatexmath.TeXFont) -> getCharFont
    102:102:char getCharacter() -> getCharacter
    80:80:boolean isMathMode() -> isMathMode
    127:127:java.lang.String toString() -> toString
org.scilab.forge.jlatexmath.CharBox -> org.scilab.forge.jlatexmath.CharBox:
# {"id":"sourceFile","fileName":"CharBox.java"}
    62:77:void <init>(org.scilab.forge.jlatexmath.Char) -> <init>
    80:82:void addItalicCorrectionToWidth() -> addItalicCorrectionToWidth
    85:102:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    105:105:int getLastFontId() -> getLastFontId
    109:109:java.lang.String toString() -> toString
org.scilab.forge.jlatexmath.CharFont -> org.scilab.forge.jlatexmath.CharFont:
# {"id":"sourceFile","fileName":"CharFont.java"}
    59:60:void <init>(char,int) -> <init>
    62:66:void <init>(char,int,int) -> <init>
org.scilab.forge.jlatexmath.CharSymbol -> org.scilab.forge.jlatexmath.CharSymbol:
# {"id":"sourceFile","fileName":"CharSymbol.java"}
    53:59:void <init>() -> <init>
    81:81:boolean isMarkedAsTextSymbol() -> isMarkedAsTextSymbol
    65:66:void markAsTextSymbol() -> markAsTextSymbol
    72:73:void removeMark() -> removeMark
org.scilab.forge.jlatexmath.ColorAtom -> org.scilab.forge.jlatexmath.ColorAtom:
# {"id":"sourceFile","fileName":"ColorAtom.java"}
    59:72:void <clinit>() -> <clinit>
    82:86:void <init>(org.scilab.forge.jlatexmath.Atom,ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color) -> <init>
    272:273:ru.noties.jlatexmath.awt.Color convColor(float,float,float,float) -> convColor
    104:110:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    126:196:ru.noties.jlatexmath.awt.Color getColor(java.lang.String) -> getColor
    114:114:int getLeftType() -> getLeftType
    118:118:int getRightType() -> getRightType
    200:269:void initColors() -> initColors
    122:123:void setPreviousAtom(org.scilab.forge.jlatexmath.Dummy) -> setPreviousAtom
org.scilab.forge.jlatexmath.CumulativeScriptsAtom -> org.scilab.forge.jlatexmath.CumulativeScriptsAtom:
# {"id":"sourceFile","fileName":"CumulativeScriptsAtom.java"}
    58:75:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom) -> <init>
    78:78:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.DdotsAtom -> org.scilab.forge.jlatexmath.DdotsAtom:
# {"id":"sourceFile","fileName":"DdotsAtom.java"}
    53:54:void <init>() -> <init>
    57:75:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.DefaultTeXFont -> org.scilab.forge.jlatexmath.DefaultTeXFont:
# {"id":"sourceFile","fileName":"DefaultTeXFont.java"}
    80:127:void <clinit>() -> <clinit>
    93:133:void <init>(float) -> <init>
    93:147:void <init>(float,float,boolean,boolean,boolean,boolean,boolean) -> <init>
    184:196:void addAlphabet(java.lang.Object,java.lang.Character$UnicodeBlock[],java.lang.String) -> addAlphabet
    210:217:void addAlphabet(org.scilab.forge.jlatexmath.AlphabetRegistration) -> addAlphabet
    167:172:void addTeXFontDescription(java.lang.Object,java.io.InputStream,java.lang.String) -> addTeXFontDescription
    227:227:org.scilab.forge.jlatexmath.TeXFont copy() -> copy
    243:243:float getAxisHeight(int) -> getAxisHeight
    247:247:float getBigOpSpacing1(int) -> getBigOpSpacing1
    251:251:float getBigOpSpacing2(int) -> getBigOpSpacing2
    255:255:float getBigOpSpacing3(int) -> getBigOpSpacing3
    259:259:float getBigOpSpacing4(int) -> getBigOpSpacing4
    263:263:float getBigOpSpacing5(int) -> getBigOpSpacing5
    268:286:org.scilab.forge.jlatexmath.Char getChar(char,org.scilab.forge.jlatexmath.CharFont[],int) -> getChar
    290:294:org.scilab.forge.jlatexmath.Char getChar(char,java.lang.String,int) -> getChar
    298:327:org.scilab.forge.jlatexmath.Char getChar(org.scilab.forge.jlatexmath.CharFont,int) -> getChar
    331:335:org.scilab.forge.jlatexmath.Char getChar(java.lang.String,int) -> getChar
    342:347:org.scilab.forge.jlatexmath.Char getDefaultChar(char,int) -> getDefaultChar
    352:352:float getDefaultRuleThickness(int) -> getDefaultRuleThickness
    356:356:float getDenom1(int) -> getDenom1
    360:360:float getDenom2(int) -> getDenom2
    488:488:float getEM(int) -> getEM
    364:380:org.scilab.forge.jlatexmath.Extension getExtension(org.scilab.forge.jlatexmath.Char,int) -> getExtension
    384:388:float getKern(org.scilab.forge.jlatexmath.CharFont,org.scilab.forge.jlatexmath.CharFont,int) -> getKern
    393:397:org.scilab.forge.jlatexmath.CharFont getLigature(org.scilab.forge.jlatexmath.CharFont,org.scilab.forge.jlatexmath.CharFont) -> getLigature
    402:404:org.scilab.forge.jlatexmath.Metrics getMetrics(org.scilab.forge.jlatexmath.CharFont,float) -> getMetrics
    408:408:int getMuFontId() -> getMuFontId
    412:415:org.scilab.forge.jlatexmath.Char getNextLarger(org.scilab.forge.jlatexmath.Char,int) -> getNextLarger
    419:419:float getNum1(int) -> getNum1
    423:423:float getNum2(int) -> getNum2
    427:427:float getNum3(int) -> getNum3
    566:570:float getParameter(java.lang.String) -> getParameter
    431:432:float getQuad(int,int) -> getQuad
    239:239:float getScaleFactor() -> getScaleFactor
    436:436:float getSize() -> getSize
    574:581:float getSizeFactor(int) -> getSizeFactor
    440:445:float getSkew(org.scilab.forge.jlatexmath.CharFont,int) -> getSkew
    449:451:float getSpace(int) -> getSpace
    455:455:float getSub1(int) -> getSub1
    459:459:float getSub2(int) -> getSub2
    463:463:float getSubDrop(int) -> getSubDrop
    467:467:float getSup1(int) -> getSup1
    471:471:float getSup2(int) -> getSup2
    475:475:float getSup3(int) -> getSup3
    479:479:float getSupDrop(int) -> getSupDrop
    483:484:float getXHeight(int,int) -> getXHeight
    492:493:boolean hasNextLarger(org.scilab.forge.jlatexmath.Char) -> hasNextLarger
    537:538:boolean hasSpace(int) -> hasSpace
    542:543:boolean isExtensionChar(org.scilab.forge.jlatexmath.Char) -> isExtensionChar
    220:224:void registerAlphabet(org.scilab.forge.jlatexmath.AlphabetRegistration) -> registerAlphabet
    497:498:void setBold(boolean) -> setBold
    521:522:void setIt(boolean) -> setIt
    556:559:void setMagnification(float) -> setMagnification
    547:553:void setMathSizes(float,float,float,float) -> setMathSizes
    505:506:void setRoman(boolean) -> setRoman
    529:530:void setSs(boolean) -> setSs
    513:514:void setTt(boolean) -> setTt
org.scilab.forge.jlatexmath.DefaultTeXFontParser -> org.scilab.forge.jlatexmath.DefaultTeXFontParser:
# {"id":"sourceFile","fileName":"DefaultTeXFontParser.java"}
    82:184:void <clinit>() -> <clinit>
    187:188:void <init>() -> <init>
    177:198:void <init>(java.io.InputStream,java.lang.String) -> <init>
    177:209:void <init>(java.lang.Object,java.io.InputStream,java.lang.String) -> <init>
    76:76:java.lang.String access$000(java.lang.String,org.w3c.dom.Element) -> access$000
    367:368:ru.noties.jlatexmath.awt.Font createFont(java.lang.String) -> createFont
    598:602:java.lang.String getAttrValueAndCheckIfNotNull(java.lang.String,org.w3c.dom.Element) -> getAttrValueAndCheckIfNotNull
    607:618:float getFloatAndCheck(java.lang.String,org.w3c.dom.Element) -> getFloatAndCheck
    623:634:int getIntAndCheck(java.lang.String,org.w3c.dom.Element) -> getIntAndCheck
    658:671:float getOptionalFloat(java.lang.String,org.w3c.dom.Element,float) -> getOptionalFloat
    639:652:int getOptionalInt(java.lang.String,org.w3c.dom.Element,int) -> getOptionalInt
    462:500:java.lang.String[] parseDefaultTextStyleMappings() -> parseDefaultTextStyleMappings
    316:328:void parseExtraPath() -> parseExtraPath
    219:295:org.scilab.forge.jlatexmath.FontInfo[] parseFontDescriptions(org.scilab.forge.jlatexmath.FontInfo[],java.io.InputStream,java.lang.String) -> parseFontDescriptions
    299:312:org.scilab.forge.jlatexmath.FontInfo[] parseFontDescriptions(org.scilab.forge.jlatexmath.FontInfo[]) -> parseFontDescriptions
    522:539:java.util.Map parseGeneralSettings() -> parseGeneralSettings
    504:517:java.util.Map parseParameters() -> parseParameters
    547:586:java.util.Map parseStyleMappings() -> parseStyleMappings
    414:456:java.util.Map parseSymbolMappings() -> parseSymbolMappings
    543:543:java.util.Map parseTextStyleMappings() -> parseTextStyleMappings
    333:359:void processCharElement(org.w3c.dom.Element,org.scilab.forge.jlatexmath.FontInfo) -> processCharElement
    212:216:void setCharChildParsers() -> setCharChildParsers
    590:594:void setRangeTypeMappings() -> setRangeTypeMappings
org.scilab.forge.jlatexmath.DefaultTeXFontParser$CharChildParser -> org.scilab.forge.jlatexmath.DefaultTeXFontParser$CharChildParser:
# {"id":"sourceFile","fileName":"DefaultTeXFontParser.java"}
org.scilab.forge.jlatexmath.DefaultTeXFontParser$ExtensionParser -> org.scilab.forge.jlatexmath.DefaultTeXFontParser$ExtensionParser:
# {"id":"sourceFile","fileName":"DefaultTeXFontParser.java"}
    91:93:void <init>() -> <init>
    96:110:void parse(org.w3c.dom.Element,char,org.scilab.forge.jlatexmath.FontInfo) -> parse
org.scilab.forge.jlatexmath.DefaultTeXFontParser$KernParser -> org.scilab.forge.jlatexmath.DefaultTeXFontParser$KernParser:
# {"id":"sourceFile","fileName":"DefaultTeXFontParser.java"}
    115:117:void <init>() -> <init>
    121:127:void parse(org.w3c.dom.Element,char,org.scilab.forge.jlatexmath.FontInfo) -> parse
org.scilab.forge.jlatexmath.DefaultTeXFontParser$LigParser -> org.scilab.forge.jlatexmath.DefaultTeXFontParser$LigParser:
# {"id":"sourceFile","fileName":"DefaultTeXFontParser.java"}
    132:134:void <init>() -> <init>
    138:143:void parse(org.w3c.dom.Element,char,org.scilab.forge.jlatexmath.FontInfo) -> parse
org.scilab.forge.jlatexmath.DefaultTeXFontParser$NextLargerParser -> org.scilab.forge.jlatexmath.DefaultTeXFontParser$NextLargerParser:
# {"id":"sourceFile","fileName":"DefaultTeXFontParser.java"}
    148:150:void <init>() -> <init>
    154:159:void parse(org.w3c.dom.Element,char,org.scilab.forge.jlatexmath.FontInfo) -> parse
org.scilab.forge.jlatexmath.DelimiterFactory -> org.scilab.forge.jlatexmath.DelimiterFactory:
# {"id":"sourceFile","fileName":"DelimiterFactory.java"}
    58:75:org.scilab.forge.jlatexmath.Box create(org.scilab.forge.jlatexmath.SymbolAtom,org.scilab.forge.jlatexmath.TeXEnvironment,int) -> create
    87:142:org.scilab.forge.jlatexmath.Box create(java.lang.String,org.scilab.forge.jlatexmath.TeXEnvironment,float) -> create
org.scilab.forge.jlatexmath.DoubleFramedAtom -> org.scilab.forge.jlatexmath.DoubleFramedAtom:
# {"id":"sourceFile","fileName":"DoubleFramedAtom.java"}
    54:55:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    58:62:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.Dummy -> org.scilab.forge.jlatexmath.Dummy:
# {"id":"sourceFile","fileName":"Dummy.java"}
    61:72:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    129:132:void changeAtom(org.scilab.forge.jlatexmath.FixedCharAtom) -> changeAtom
    135:140:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    120:120:org.scilab.forge.jlatexmath.CharFont getCharFont(org.scilab.forge.jlatexmath.TeXFont) -> getCharFont
    97:97:int getLeftType() -> getLeftType
    105:105:int getRightType() -> getRightType
    113:113:boolean isCharInMathMode() -> isCharInMathMode
    109:109:boolean isCharSymbol() -> isCharSymbol
    148:148:boolean isKern() -> isKern
    144:145:void markAsTextSymbol() -> markAsTextSymbol
    153:155:void setPreviousAtom(org.scilab.forge.jlatexmath.Dummy) -> setPreviousAtom
    80:81:void setType(int) -> setType
org.scilab.forge.jlatexmath.EmptyAtom -> org.scilab.forge.jlatexmath.EmptyAtom:
# {"id":"sourceFile","fileName":"EmptyAtom.java"}
    53:53:void <init>() -> <init>
    56:56:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.Extension -> org.scilab.forge.jlatexmath.Extension:
# {"id":"sourceFile","fileName":"Extension.java"}
    61:66:void <init>(org.scilab.forge.jlatexmath.Char,org.scilab.forge.jlatexmath.Char,org.scilab.forge.jlatexmath.Char,org.scilab.forge.jlatexmath.Char) -> <init>
    93:93:org.scilab.forge.jlatexmath.Char getBottom() -> getBottom
    85:85:org.scilab.forge.jlatexmath.Char getMiddle() -> getMiddle
    89:89:org.scilab.forge.jlatexmath.Char getRepeat() -> getRepeat
    81:81:org.scilab.forge.jlatexmath.Char getTop() -> getTop
    77:77:boolean hasBottom() -> hasBottom
    73:73:boolean hasMiddle() -> hasMiddle
    69:69:boolean hasTop() -> hasTop
org.scilab.forge.jlatexmath.FBoxAtom -> org.scilab.forge.jlatexmath.FBoxAtom:
# {"id":"sourceFile","fileName":"FBoxAtom.java"}
    55:68:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    71:74:void <init>(org.scilab.forge.jlatexmath.Atom,ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color) -> <init>
    77:84:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.FcscoreAtom -> org.scilab.forge.jlatexmath.FcscoreAtom:
# {"id":"sourceFile","fileName":"FcscoreAtom.java"}
    55:57:void <init>(int) -> <init>
    68:70:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    60:60:int getLeftType() -> getLeftType
    64:64:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.FcscoreBox -> org.scilab.forge.jlatexmath.FcscoreBox:
# {"id":"sourceFile","fileName":"FcscoreBox.java"}
    64:72:void <init>(int,float,float,float,boolean) -> <init>
    75:112:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    115:115:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.FencedAtom -> org.scilab.forge.jlatexmath.FencedAtom:
# {"id":"sourceFile","fileName":"FencedAtom.java"}
    80:81:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.SymbolAtom,org.scilab.forge.jlatexmath.SymbolAtom) -> <init>
    68:95:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.SymbolAtom,java.util.List,org.scilab.forge.jlatexmath.SymbolAtom) -> <init>
    113:115:void center(org.scilab.forge.jlatexmath.Box,float) -> center
    118:169:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    98:98:int getLeftType() -> getLeftType
    102:102:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.FixedCharAtom -> org.scilab.forge.jlatexmath.FixedCharAtom:
# {"id":"sourceFile","fileName":"FixedCharAtom.java"}
    56:58:void <init>(org.scilab.forge.jlatexmath.CharFont) -> <init>
    65:67:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    61:61:org.scilab.forge.jlatexmath.CharFont getCharFont(org.scilab.forge.jlatexmath.TeXFont) -> getCharFont
org.scilab.forge.jlatexmath.FontAlreadyLoadedException -> org.scilab.forge.jlatexmath.FontAlreadyLoadedException:
# {"id":"sourceFile","fileName":"FontAlreadyLoadedException.java"}
    54:55:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.FontInfo -> org.scilab.forge.jlatexmath.FontInfo:
# {"id":"sourceFile","fileName":"FontInfo.java"}
    63:63:void <clinit>() -> <clinit>
    93:140:void <init>(int,java.lang.Object,java.lang.String,java.lang.String,int,float,float,float,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    152:153:void addKern(char,char,float) -> addKern
    164:165:void addLigature(char,char,char) -> addLigature
    267:267:int getBoldId() -> getBoldId
    168:170:int[] getExtension(char) -> getExtension
    307:314:ru.noties.jlatexmath.awt.Font getFont() -> getFont
    318:318:ru.noties.jlatexmath.awt.Font getFont(int) -> getFont
    279:279:int getItId() -> getItId
    174:178:float getKern(char,char,float) -> getKern
    182:186:org.scilab.forge.jlatexmath.CharFont getLigature(char,char) -> getLigature
    190:192:float[] getMetrics(char) -> getMetrics
    196:198:org.scilab.forge.jlatexmath.CharFont getNextLarger(char) -> getNextLarger
    202:202:float getQuad(float) -> getQuad
    271:271:int getRomanId() -> getRomanId
    210:210:char getSkewChar() -> getSkewChar
    214:214:float getSpace(float) -> getSpace
    283:283:int getSsId() -> getSsId
    275:275:int getTtId() -> getTtId
    218:218:float getXHeight(float) -> getXHeight
    222:222:boolean hasSpace() -> hasSpace
    303:304:void setBoldId(int) -> setBoldId
    226:234:void setExtension(char,int[]) -> setExtension
    295:296:void setItId(int) -> setItId
    237:245:void setMetrics(char,float[]) -> setMetrics
    248:256:void setNextLarger(char,char,int) -> setNextLarger
    299:300:void setRomanId(int) -> setRomanId
    259:260:void setSkewChar(char) -> setSkewChar
    287:288:void setSsId(int) -> setSsId
    291:292:void setTtId(int) -> setTtId
org.scilab.forge.jlatexmath.FontInfo$CharCouple -> org.scilab.forge.jlatexmath.FontInfo$CharCouple:
# {"id":"sourceFile","fileName":"FontInfo.java"}
    69:72:void <init>(org.scilab.forge.jlatexmath.FontInfo,char,char) -> <init>
    75:76:boolean equals(java.lang.Object) -> equals
    80:80:int hashCode() -> hashCode
org.scilab.forge.jlatexmath.FormulaNotFoundException -> org.scilab.forge.jlatexmath.FormulaNotFoundException:
# {"id":"sourceFile","fileName":"FormulaNotFoundException.java"}
    59:62:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.FractionAtom -> org.scilab.forge.jlatexmath.FractionAtom:
# {"id":"sourceFile","fileName":"FractionAtom.java"}
    94:95:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,boolean) -> <init>
    55:120:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,boolean,int,float) -> <init>
    133:136:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,boolean,int,int) -> <init>
    182:183:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,int,float) -> <init>
    188:192:int checkAlignment(int) -> checkAlignment
    196:291:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.FramedBox -> org.scilab.forge.jlatexmath.FramedBox:
# {"id":"sourceFile","fileName":"FramedBox.java"}
    65:73:void <init>(org.scilab.forge.jlatexmath.Box,float,float) -> <init>
    76:79:void <init>(org.scilab.forge.jlatexmath.Box,float,float,ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color) -> <init>
    82:102:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    105:105:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.GeoGebraLogoAtom -> org.scilab.forge.jlatexmath.GeoGebraLogoAtom:
# {"id":"sourceFile","fileName":"GeoGebraLogoAtom.java"}
    50:51:void <init>() -> <init>
    62:63:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    54:54:int getLeftType() -> getLeftType
    58:58:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.GeoGebraLogoBox -> org.scilab.forge.jlatexmath.GeoGebraLogoBox:
# {"id":"sourceFile","fileName":"GeoGebraLogoBox.java"}
    59:62:void <clinit>() -> <clinit>
    64:69:void <init>(float,float) -> <init>
    72:91:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    94:100:void drawCircle(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> drawCircle
    103:103:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.Glue -> org.scilab.forge.jlatexmath.Glue:
# {"id":"sourceFile","fileName":"Glue.java"}
    68:71:void <clinit>() -> <clinit>
    73:78:void <init>(float,float,float,java.lang.String) -> <init>
    108:112:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    98:104:org.scilab.forge.jlatexmath.Box get(int,int,org.scilab.forge.jlatexmath.TeXEnvironment) -> get
    84:84:java.lang.String getName() -> getName
org.scilab.forge.jlatexmath.GlueBox -> org.scilab.forge.jlatexmath.GlueBox:
# {"id":"sourceFile","fileName":"GlueBox.java"}
    56:62:void <init>(float,float,float) -> <init>
    66:66:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    69:69:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.GlueSettingsParser -> org.scilab.forge.jlatexmath.GlueSettingsParser:
# {"id":"sourceFile","fileName":"GlueSettingsParser.java"}
    68:88:void <init>() -> <init>
    208:211:void checkMapping(java.lang.Object,java.lang.String,java.lang.String,java.lang.String) -> checkMapping
    137:152:org.scilab.forge.jlatexmath.Glue createGlue(org.w3c.dom.Element,java.lang.String) -> createGlue
    171:203:int[][][] createGlueTable() -> createGlueTable
    215:219:java.lang.String getAttrValueAndCheckIfNotNull(java.lang.String,org.w3c.dom.Element) -> getAttrValueAndCheckIfNotNull
    167:167:org.scilab.forge.jlatexmath.Glue[] getGlueTypes() -> getGlueTypes
    98:134:void parseGlueTypes() -> parseGlueTypes
    91:95:void setStyleMappings() -> setStyleMappings
    156:164:void setTypeMappings() -> setTypeMappings
org.scilab.forge.jlatexmath.GraphicsAtom -> org.scilab.forge.jlatexmath.GraphicsAtom:
# {"id":"sourceFile","fileName":"GraphicsAtom.java"}
    66:94:void <init>(java.lang.String,java.lang.String) -> <init>
    133:133:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    130:130:void draw() -> draw
org.scilab.forge.jlatexmath.HdotsforAtom -> org.scilab.forge.jlatexmath.HdotsforAtom:
# {"id":"sourceFile","fileName":"HdotsforAtom.java"}
    53:54:void <clinit>() -> <clinit>
    58:60:void <init>(int,float) -> <init>
    63:80:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.HlineAtom -> org.scilab.forge.jlatexmath.HlineAtom:
# {"id":"sourceFile","fileName":"HlineAtom.java"}
    56:57:void <init>() -> <init>
    68:73:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    64:65:void setShift(float) -> setShift
    60:61:void setWidth(float) -> setWidth
org.scilab.forge.jlatexmath.HorizontalBox -> org.scilab.forge.jlatexmath.HorizontalBox:
# {"id":"sourceFile","fileName":"HorizontalBox.java"}
    60:87:void <init>(org.scilab.forge.jlatexmath.Box,float,int) -> <init>
    60:91:void <init>(org.scilab.forge.jlatexmath.Box) -> <init>
    60:95:void <init>() -> <init>
    60:99:void <init>(ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color) -> <init>
    124:126:void add(org.scilab.forge.jlatexmath.Box) -> add
    129:131:void add(int,org.scilab.forge.jlatexmath.Box) -> add
    154:158:void addBreakPosition(int) -> addBreakPosition
    102:105:org.scilab.forge.jlatexmath.HorizontalBox cloneBox() -> cloneBox
    109:121:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    146:150:int getLastFontId() -> getLastFontId
    138:141:void recalculate(org.scilab.forge.jlatexmath.Box) -> recalculate
    161:161:org.scilab.forge.jlatexmath.HorizontalBox[] split(int) -> split
    169:187:org.scilab.forge.jlatexmath.HorizontalBox[] split(int,int) -> split
    165:165:org.scilab.forge.jlatexmath.HorizontalBox[] splitRemove(int) -> splitRemove
org.scilab.forge.jlatexmath.HorizontalRule -> org.scilab.forge.jlatexmath.HorizontalRule:
# {"id":"sourceFile","fileName":"HorizontalRule.java"}
    58:65:void <init>(float,float,float) -> <init>
    58:76:void <init>(float,float,float,boolean) -> <init>
    86:96:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    99:99:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.IJAtom -> org.scilab.forge.jlatexmath.IJAtom:
# {"id":"sourceFile","fileName":"IJAtom.java"}
    55:57:void <init>(boolean) -> <init>
    60:65:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.IddotsAtom -> org.scilab.forge.jlatexmath.IddotsAtom:
# {"id":"sourceFile","fileName":"IddotsAtom.java"}
    53:53:void <init>() -> <init>
    56:74:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.InvalidSymbolTypeException -> org.scilab.forge.jlatexmath.InvalidSymbolTypeException:
# {"id":"sourceFile","fileName":"InvalidSymbolTypeException.java"}
    59:60:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.InvalidUnitException -> org.scilab.forge.jlatexmath.InvalidUnitException:
# {"id":"sourceFile","fileName":"InvalidUnitException.java"}
    59:61:void <init>() -> <init>
org.scilab.forge.jlatexmath.ItAtom -> org.scilab.forge.jlatexmath.ItAtom:
# {"id":"sourceFile","fileName":"ItAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    61:69:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.JMathTeXException -> org.scilab.forge.jlatexmath.JMathTeXException:
# {"id":"sourceFile","fileName":"JMathTeXException.java"}
    59:60:void <init>(java.lang.String) -> <init>
    63:64:void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.scilab.forge.jlatexmath.JavaFontRenderingAtom -> org.scilab.forge.jlatexmath.JavaFontRenderingAtom:
# {"id":"sourceFile","fileName":"JavaFontRenderingAtom.java"}
    59:62:void <init>(java.lang.String,int) -> <init>
    65:67:void <init>(java.lang.String,org.scilab.forge.jlatexmath.TeXFormula$FontInfos) -> <init>
    70:91:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.JavaFontRenderingBox -> org.scilab.forge.jlatexmath.JavaFontRenderingBox:
# {"id":"sourceFile","fileName":"JavaFontRenderingBox.java"}
    60:60:void <clinit>() -> <clinit>
    78:95:void <init>(java.lang.String,int,float,ru.noties.jlatexmath.awt.Font,boolean) -> <init>
    98:99:void <init>(java.lang.String,int,float) -> <init>
    106:112:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    115:115:int getLastFontId() -> getLastFontId
    102:103:void setFont(java.lang.String) -> setFont
org.scilab.forge.jlatexmath.LCaronAtom -> org.scilab.forge.jlatexmath.LCaronAtom:
# {"id":"sourceFile","fileName":"LCaronAtom.java"}
    55:57:void <init>(boolean) -> <init>
    60:68:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.LaTeXAtom -> org.scilab.forge.jlatexmath.LaTeXAtom:
# {"id":"sourceFile","fileName":"LaTeXAtom.java"}
    54:55:void <init>() -> <init>
    58:86:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.LapedAtom -> org.scilab.forge.jlatexmath.LapedAtom:
# {"id":"sourceFile","fileName":"LapedAtom.java"}
    56:59:void <init>(org.scilab.forge.jlatexmath.Atom,char) -> <init>
    62:77:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.LongdivAtom -> org.scilab.forge.jlatexmath.LongdivAtom:
# {"id":"sourceFile","fileName":"LongdivAtom.java"}
    55:95:void <init>(long,long) -> <init>
    98:115:java.lang.String[] makeResults(long,long) -> makeResults
org.scilab.forge.jlatexmath.MacroInfo -> org.scilab.forge.jlatexmath.MacroInfo:
# {"id":"sourceFile","fileName":"MacroInfo.java"}
    54:55:void <clinit>() -> <clinit>
    60:67:void <init>(java.lang.Object,java.lang.reflect.Method,int) -> <init>
    76:79:void <init>(int,int) -> <init>
    82:83:void <init>(int) -> <init>
    60:103:void <init>(java.lang.String,java.lang.String,float) -> <init>
    60:125:void <init>(java.lang.String,java.lang.String,float,float) -> <init>
    128:137:java.lang.Object invoke(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> invoke
org.scilab.forge.jlatexmath.MathAtom -> org.scilab.forge.jlatexmath.MathAtom:
# {"id":"sourceFile","fileName":"MathAtom.java"}
    53:59:void <init>(org.scilab.forge.jlatexmath.Atom,int) -> <init>
    62:68:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.MatrixAtom -> org.scilab.forge.jlatexmath.MatrixAtom:
# {"id":"sourceFile","fileName":"MatrixAtom.java"}
    58:82:void <clinit>() -> <clinit>
    77:94:void <init>(boolean,org.scilab.forge.jlatexmath.ArrayOfAtoms,java.lang.String,boolean) -> <init>
    101:102:void <init>(boolean,org.scilab.forge.jlatexmath.ArrayOfAtoms,java.lang.String) -> <init>
    113:114:void <init>(boolean,org.scilab.forge.jlatexmath.ArrayOfAtoms,int) -> <init>
    77:136:void <init>(boolean,org.scilab.forge.jlatexmath.ArrayOfAtoms,int,boolean) -> <init>
    367:530:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    534:554:org.scilab.forge.jlatexmath.Box generateMulticolumn(org.scilab.forge.jlatexmath.TeXEnvironment,org.scilab.forge.jlatexmath.Box[],float[],int,int) -> generateMulticolumn
    244:362:org.scilab.forge.jlatexmath.Box[] getColumnSep(org.scilab.forge.jlatexmath.TeXEnvironment,float) -> getColumnSep
    159:241:void parsePositions(java.lang.StringBuffer) -> parsePositions
org.scilab.forge.jlatexmath.Metrics -> org.scilab.forge.jlatexmath.Metrics:
# {"id":"sourceFile","fileName":"Metrics.java"}
    60:66:void <init>(float,float,float,float,float,float) -> <init>
    77:77:float getDepth() -> getDepth
    73:73:float getHeight() -> getHeight
    81:81:float getItalic() -> getItalic
    85:85:float getSize() -> getSize
    69:69:float getWidth() -> getWidth
org.scilab.forge.jlatexmath.MiddleAtom -> org.scilab.forge.jlatexmath.MiddleAtom:
# {"id":"sourceFile","fileName":"MiddleAtom.java"}
    54:58:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    61:61:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.MonoScaleAtom -> org.scilab.forge.jlatexmath.MonoScaleAtom:
# {"id":"sourceFile","fileName":"MonoScaleAtom.java"}
    56:58:void <init>(org.scilab.forge.jlatexmath.Atom,float) -> <init>
    61:64:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.MulticolumnAtom -> org.scilab.forge.jlatexmath.MulticolumnAtom:
# {"id":"sourceFile","fileName":"MulticolumnAtom.java"}
    55:65:void <init>(int,java.lang.String,org.scilab.forge.jlatexmath.Atom) -> <init>
    139:146:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    89:89:int getCol() -> getCol
    85:85:int getRow() -> getRow
    72:72:int getSkipped() -> getSkipped
    76:76:boolean hasRightVline() -> hasRightVline
    93:134:int parseAlign(java.lang.String) -> parseAlign
    80:82:void setRowColumn(int,int) -> setRowColumn
    68:69:void setWidth(float) -> setWidth
org.scilab.forge.jlatexmath.MultlineAtom -> org.scilab.forge.jlatexmath.MultlineAtom:
# {"id":"sourceFile","fileName":"MultlineAtom.java"}
    53:53:void <clinit>() -> <clinit>
    62:66:void <init>(boolean,org.scilab.forge.jlatexmath.ArrayOfAtoms,int) -> <init>
    73:110:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.NewCommandMacro -> org.scilab.forge.jlatexmath.NewCommandMacro:
# {"id":"sourceFile","fileName":"NewCommandMacro.java"}
    53:54:void <clinit>() -> <clinit>
    62:64:void addNewCommand(java.lang.String,java.lang.String,int) -> addNewCommand
    67:72:void addNewCommand(java.lang.String,java.lang.String,int,java.lang.String) -> addNewCommand
    79:83:void addReNewCommand(java.lang.String,java.lang.String,int) -> addReNewCommand
    75:75:boolean isMacro(java.lang.String) -> isMacro
org.scilab.forge.jlatexmath.NewEnvironmentMacro -> org.scilab.forge.jlatexmath.NewEnvironmentMacro:
# {"id":"sourceFile","fileName":"NewEnvironmentMacro.java"}
    56:57:void addNewEnvironment(java.lang.String,java.lang.String,java.lang.String,int) -> addNewEnvironment
    60:63:void addReNewEnvironment(java.lang.String,java.lang.String,java.lang.String,int) -> addReNewEnvironment
org.scilab.forge.jlatexmath.NthRoot -> org.scilab.forge.jlatexmath.NthRoot:
# {"id":"sourceFile","fileName":"NthRoot.java"}
    64:67:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom) -> <init>
    72:125:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.OgonekAtom -> org.scilab.forge.jlatexmath.OgonekAtom:
# {"id":"sourceFile","fileName":"OgonekAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:79:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.OvalAtom -> org.scilab.forge.jlatexmath.OvalAtom:
# {"id":"sourceFile","fileName":"OvalAtom.java"}
    54:55:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    58:58:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.OvalBox -> org.scilab.forge.jlatexmath.OvalBox:
# {"id":"sourceFile","fileName":"OvalBox.java"}
    59:60:void <init>(org.scilab.forge.jlatexmath.FramedBox) -> <init>
    63:71:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    74:74:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.OverBar -> org.scilab.forge.jlatexmath.OverBar:
# {"id":"sourceFile","fileName":"OverBar.java"}
    55:61:void <init>(org.scilab.forge.jlatexmath.Box,float,float) -> <init>
    53:53:void add(int,org.scilab.forge.jlatexmath.Box) -> add
    53:53:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    53:53:int getLastFontId() -> getLastFontId
    53:53:int getSize() -> getSize
org.scilab.forge.jlatexmath.OverUnderBox -> org.scilab.forge.jlatexmath.OverUnderBox:
# {"id":"sourceFile","fileName":"OverUnderBox.java"}
    82:97:void <init>(org.scilab.forge.jlatexmath.Box,org.scilab.forge.jlatexmath.Box,org.scilab.forge.jlatexmath.Box,float,boolean) -> <init>
    100:135:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    138:138:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.OverUnderDelimiter -> org.scilab.forge.jlatexmath.OverUnderDelimiter:
# {"id":"sourceFile","fileName":"OverUnderDelimiter.java"}
    69:76:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.SymbolAtom,int,float,boolean) -> <init>
    79:80:void addScript(org.scilab.forge.jlatexmath.Atom) -> addScript
    87:106:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    110:115:float getMaxWidth(org.scilab.forge.jlatexmath.Box,org.scilab.forge.jlatexmath.Box,org.scilab.forge.jlatexmath.Box) -> getMaxWidth
    83:83:boolean isOver() -> isOver
org.scilab.forge.jlatexmath.OverlinedAtom -> org.scilab.forge.jlatexmath.OverlinedAtom:
# {"id":"sourceFile","fileName":"OverlinedAtom.java"}
    57:60:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    63:74:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.ParseException -> org.scilab.forge.jlatexmath.ParseException:
# {"id":"sourceFile","fileName":"ParseException.java"}
    57:58:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    61:62:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.ParseOption -> org.scilab.forge.jlatexmath.ParseOption:
# {"id":"sourceFile","fileName":"ParseOption.java"}
    58:75:java.util.Map parseMap(java.lang.String) -> parseMap
org.scilab.forge.jlatexmath.PhantomAtom -> org.scilab.forge.jlatexmath.PhantomAtom:
# {"id":"sourceFile","fileName":"PhantomAtom.java"}
    58:65:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    68:72:void <init>(org.scilab.forge.jlatexmath.Atom,boolean,boolean,boolean) -> <init>
    75:77:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    81:81:int getLeftType() -> getLeftType
    85:85:int getRightType() -> getRightType
    89:90:void setPreviousAtom(org.scilab.forge.jlatexmath.Dummy) -> setPreviousAtom
org.scilab.forge.jlatexmath.PredefMacroInfo -> org.scilab.forge.jlatexmath.PredefMacroInfo:
# {"id":"sourceFile","fileName":"PredefMacroInfo.java"}
    56:58:void <init>(int,int,int) -> <init>
    61:63:void <init>(int,int) -> <init>
    66:66:java.lang.Object invoke(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> invoke
    71:589:java.lang.Object invokeID(int,org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> invokeID
org.scilab.forge.jlatexmath.PredefMacros -> org.scilab.forge.jlatexmath.PredefMacros:
# {"id":"sourceFile","fileName":"PredefMacros.java"}
    62:121:void <clinit>() -> <clinit>
    59:59:void <init>() -> <init>
    1151:1155:org.scilab.forge.jlatexmath.Atom Big_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Big_macro
    1167:1171:org.scilab.forge.jlatexmath.Atom Bigg_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Bigg_macro
    1205:1211:org.scilab.forge.jlatexmath.Atom Biggl_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Biggl_macro
    1245:1251:org.scilab.forge.jlatexmath.Atom Biggr_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Biggr_macro
    1185:1191:org.scilab.forge.jlatexmath.Atom Bigl_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Bigl_macro
    1225:1231:org.scilab.forge.jlatexmath.Atom Bigr_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Bigr_macro
    155:156:org.scilab.forge.jlatexmath.Atom Braket_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Braket_macro
    1420:1421:org.scilab.forge.jlatexmath.Atom DeclareMathSizes_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> DeclareMathSizes_macro
    1659:1665:org.scilab.forge.jlatexmath.Atom Dstrok_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Dstrok_macro
    1124:1127:org.scilab.forge.jlatexmath.Atom GeoGebra_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> GeoGebra_macro
    1639:1645:org.scilab.forge.jlatexmath.Atom Hstrok_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Hstrok_macro
    562:562:org.scilab.forge.jlatexmath.Atom IJ_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> IJ_macro
    570:570:org.scilab.forge.jlatexmath.Atom LCaron_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> LCaron_macro
    1120:1120:org.scilab.forge.jlatexmath.Atom LaTeX_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> LaTeX_macro
    160:161:org.scilab.forge.jlatexmath.Atom Set_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> Set_macro
    566:566:org.scilab.forge.jlatexmath.Atom TStroke_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> TStroke_macro
    1695:1695:org.scilab.forge.jlatexmath.Atom T_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> T_macro
    424:433:org.scilab.forge.jlatexmath.Atom above_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> above_macro
    437:460:org.scilab.forge.jlatexmath.Atom abovewithdelims_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> abovewithdelims_macro
    508:508:org.scilab.forge.jlatexmath.Atom accent_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> accent_macro
    500:500:org.scilab.forge.jlatexmath.Atom accent_macros(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> accent_macros
    512:554:org.scilab.forge.jlatexmath.Atom accentbis_macros(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> accentbis_macros
    1063:1063:org.scilab.forge.jlatexmath.Atom accentset_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> accentset_macro
    855:859:org.scilab.forge.jlatexmath.Atom alignATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> alignATATenv_macro
    871:880:org.scilab.forge.jlatexmath.Atom alignatATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> alignatATATenv_macro
    884:888:org.scilab.forge.jlatexmath.Atom alignedATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> alignedATATenv_macro
    892:901:org.scilab.forge.jlatexmath.Atom alignedatATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> alignedatATATenv_macro
    1521:1524:org.scilab.forge.jlatexmath.Atom approxcolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> approxcolon_macro
    1528:1533:org.scilab.forge.jlatexmath.Atom approxcoloncolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> approxcoloncolon_macro
    847:851:org.scilab.forge.jlatexmath.Atom arrayATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> arrayATATenv_macro
    360:364:org.scilab.forge.jlatexmath.Atom atop_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> atop_macro
    368:388:org.scilab.forge.jlatexmath.Atom atopwithdelims_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> atopwithdelims_macro
    795:795:org.scilab.forge.jlatexmath.Atom backslashcr_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> backslashcr_macro
    400:400:org.scilab.forge.jlatexmath.Atom bangle_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> bangle_macro
    1092:1092:org.scilab.forge.jlatexmath.Atom bf_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> bf_macro
    1358:1360:org.scilab.forge.jlatexmath.Atom bgcolor_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> bgcolor_macro
    1143:1147:org.scilab.forge.jlatexmath.Atom big_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> big_macro
    1159:1163:org.scilab.forge.jlatexmath.Atom bigg_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> bigg_macro
    1195:1201:org.scilab.forge.jlatexmath.Atom biggl_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> biggl_macro
    1235:1241:org.scilab.forge.jlatexmath.Atom biggr_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> biggr_macro
    1175:1181:org.scilab.forge.jlatexmath.Atom bigl_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> bigl_macro
    1215:1221:org.scilab.forge.jlatexmath.Atom bigr_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> bigr_macro
    416:420:org.scilab.forge.jlatexmath.Atom binom_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> binom_macro
    1076:1076:org.scilab.forge.jlatexmath.Atom boldsymbol_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> boldsymbol_macro
    404:404:org.scilab.forge.jlatexmath.Atom brace_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> brace_macro
    396:396:org.scilab.forge.jlatexmath.Atom brack_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> brack_macro
    558:558:org.scilab.forge.jlatexmath.Atom cedilla_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> cedilla_macro
    234:248:org.scilab.forge.jlatexmath.Atom cfrac_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> cfrac_macro
    1678:1691:org.scilab.forge.jlatexmath.Atom char_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> char_macro
    408:412:org.scilab.forge.jlatexmath.Atom choose_brackets(java.lang.String,java.lang.String,org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> choose_brackets
    392:392:org.scilab.forge.jlatexmath.Atom choose_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> choose_macro
    203:203:org.scilab.forge.jlatexmath.Atom clrlap_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> clrlap_macro
    1608:1611:org.scilab.forge.jlatexmath.Atom colonapprox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> colonapprox_macro
    1585:1588:org.scilab.forge.jlatexmath.Atom coloncolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> coloncolon_macro
    1615:1620:org.scilab.forge.jlatexmath.Atom coloncolonapprox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> coloncolonapprox_macro
    1576:1581:org.scilab.forge.jlatexmath.Atom coloncolonequals_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> coloncolonequals_macro
    1560:1565:org.scilab.forge.jlatexmath.Atom coloncolonminus_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> coloncolonminus_macro
    1599:1604:org.scilab.forge.jlatexmath.Atom coloncolonsim_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> coloncolonsim_macro
    1569:1572:org.scilab.forge.jlatexmath.Atom colonequals_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> colonequals_macro
    1553:1556:org.scilab.forge.jlatexmath.Atom colonminus_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> colonminus_macro
    1592:1595:org.scilab.forge.jlatexmath.Atom colonsim_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> colonsim_macro
    1369:1370:org.scilab.forge.jlatexmath.Atom colorbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> colorbox_macro
    1378:1382:org.scilab.forge.jlatexmath.Atom cong_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> cong_macro
    778:791:org.scilab.forge.jlatexmath.Atom cr_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> cr_macro
    718:718:org.scilab.forge.jlatexmath.Atom ddots_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> ddots_macro
    1320:1332:org.scilab.forge.jlatexmath.Atom definecolor_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> definecolor_macro
    1332:1345:org.scilab.forge.jlatexmath.Atom definecolor_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> definecolor_macro
    1255:1256:org.scilab.forge.jlatexmath.Atom displaystyle_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> displaystyle_macro
    1386:1387:org.scilab.forge.jlatexmath.Atom doteq_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> doteq_macro
    1471:1472:org.scilab.forge.jlatexmath.Atom dotminus_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> dotminus_macro
    1316:1316:org.scilab.forge.jlatexmath.Atom doublebox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> doublebox_macro
    1649:1655:org.scilab.forge.jlatexmath.Atom dstrok_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> dstrok_macro
    1537:1540:org.scilab.forge.jlatexmath.Atom equalscolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> equalscolon_macro
    1544:1549:org.scilab.forge.jlatexmath.Atom equalscoloncolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> equalscoloncolon_macro
    1034:1034:org.scilab.forge.jlatexmath.Atom fbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> fbox_macro
    1374:1374:org.scilab.forge.jlatexmath.Atom fcolorbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> fcolorbox_macro
    124:136:org.scilab.forge.jlatexmath.Atom fcscore_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> fcscore_macro
    1350:1352:org.scilab.forge.jlatexmath.Atom fgcolor_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> fgcolor_macro
    863:867:org.scilab.forge.jlatexmath.Atom flalignATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> flalignATATenv_macro
    252:256:org.scilab.forge.jlatexmath.Atom frac_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> frac_macro
    920:931:org.scilab.forge.jlatexmath.Atom gatherATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> gatherATATenv_macro
    935:946:org.scilab.forge.jlatexmath.Atom gatheredATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> gatheredATATenv_macro
    294:324:org.scilab.forge.jlatexmath.Atom genfrac_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> genfrac_macro
    1481:1485:org.scilab.forge.jlatexmath.Atom geoprop_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> geoprop_macro
    504:504:org.scilab.forge.jlatexmath.Atom grkaccent_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> grkaccent_macro
    836:843:org.scilab.forge.jlatexmath.Atom hdotsfor_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> hdotsfor_macro
    1430:1432:org.scilab.forge.jlatexmath.Atom hline_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> hline_macro
    1131:1131:org.scilab.forge.jlatexmath.Atom hphantom_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> hphantom_macro
    1629:1635:org.scilab.forge.jlatexmath.Atom hstrok_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> hstrok_macro
    180:199:org.scilab.forge.jlatexmath.Atom hvspace_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> hvspace_macro
    722:722:org.scilab.forge.jlatexmath.Atom iddots_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> iddots_macro
    1817:1829:org.scilab.forge.jlatexmath.Atom idotsint_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> idotsint_macro
    1803:1813:org.scilab.forge.jlatexmath.Atom iiiint_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> iiiint_macro
    1791:1799:org.scilab.forge.jlatexmath.Atom iiint_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> iiint_macro
    1781:1787:org.scilab.forge.jlatexmath.Atom iint_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> iint_macro
    211:211:org.scilab.forge.jlatexmath.Atom includegraphics_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> includegraphics_macro
    1845:1845:org.scilab.forge.jlatexmath.Atom insertBreakMark_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> insertBreakMark_macro
    1769:1771:org.scilab.forge.jlatexmath.Atom int_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> int_macro
    799:809:org.scilab.forge.jlatexmath.Atom intertext_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> intertext_macro
    1108:1108:org.scilab.forge.jlatexmath.Atom it_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> it_macro
    1467:1467:org.scilab.forge.jlatexmath.Atom jlatexmathcumsub_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlatexmathcumsub_macro
    1463:1463:org.scilab.forge.jlatexmath.Atom jlatexmathcumsup_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlatexmathcumsup_macro
    1391:1394:org.scilab.forge.jlatexmath.Atom jlmDynamic_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmDynamic_macro
    1399:1400:org.scilab.forge.jlatexmath.Atom jlmExternalFont_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmExternalFont_macro
    1404:1404:org.scilab.forge.jlatexmath.Atom jlmText_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmText_macro
    1412:1412:org.scilab.forge.jlatexmath.Atom jlmTextbf_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmTextbf_macro
    1408:1408:org.scilab.forge.jlatexmath.Atom jlmTextit_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmTextit_macro
    1416:1416:org.scilab.forge.jlatexmath.Atom jlmTextitbf_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmTextitbf_macro
    1849:1875:org.scilab.forge.jlatexmath.Atom jlmXML_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> jlmXML_macro
    706:706:org.scilab.forge.jlatexmath.Atom joinrel_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> joinrel_macro
    1669:1674:org.scilab.forge.jlatexmath.Atom kern_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> kern_macro
    744:760:org.scilab.forge.jlatexmath.Atom left_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> left_macro
    769:770:org.scilab.forge.jlatexmath.Atom leftbracket_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> leftbracket_macro
    764:765:org.scilab.forge.jlatexmath.Atom leftparenthesis_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> leftparenthesis_macro
    732:734:org.scilab.forge.jlatexmath.Atom limits_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> limits_macro
    1833:1835:org.scilab.forge.jlatexmath.Atom lmoustache_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> lmoustache_macro
    142:146:org.scilab.forge.jlatexmath.Atom longdiv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> longdiv_macro
    1425:1426:org.scilab.forge.jlatexmath.Atom magnification_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> magnification_macro
    1006:1007:org.scilab.forge.jlatexmath.Atom makeatletter_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> makeatletter_macro
    1011:1012:org.scilab.forge.jlatexmath.Atom makeatother_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> makeatother_macro
    1088:1088:org.scilab.forge.jlatexmath.Atom mathbf_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathbf_macro
    694:694:org.scilab.forge.jlatexmath.Atom mathbin_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathbin_macro
    702:702:org.scilab.forge.jlatexmath.Atom mathclose_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathclose_macro
    207:207:org.scilab.forge.jlatexmath.Atom mathclrlap_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathclrlap_macro
    690:690:org.scilab.forge.jlatexmath.Atom mathinner_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathinner_macro
    1104:1104:org.scilab.forge.jlatexmath.Atom mathit_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathit_macro
    672:674:org.scilab.forge.jlatexmath.Atom mathop_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathop_macro
    698:698:org.scilab.forge.jlatexmath.Atom mathopen_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathopen_macro
    682:682:org.scilab.forge.jlatexmath.Atom mathord_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathord_macro
    678:678:org.scilab.forge.jlatexmath.Atom mathpunct_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathpunct_macro
    686:686:org.scilab.forge.jlatexmath.Atom mathrel_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathrel_macro
    1080:1080:org.scilab.forge.jlatexmath.Atom mathrm_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathrm_macro
    1112:1112:org.scilab.forge.jlatexmath.Atom mathsf_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathsf_macro
    1096:1096:org.scilab.forge.jlatexmath.Atom mathtt_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mathtt_macro
    821:825:org.scilab.forge.jlatexmath.Atom matrixATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> matrixATATenv_macro
    487:488:org.scilab.forge.jlatexmath.Atom mbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> mbox_macro
    774:774:org.scilab.forge.jlatexmath.Atom middle_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> middle_macro
    1489:1492:org.scilab.forge.jlatexmath.Atom minuscolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> minuscolon_macro
    1496:1501:org.scilab.forge.jlatexmath.Atom minuscoloncolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> minuscoloncolon_macro
    829:832:org.scilab.forge.jlatexmath.Atom multicolumn_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> multicolumn_macro
    905:916:org.scilab.forge.jlatexmath.Atom multlineATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> multlineATATenv_macro
    1738:1761:org.scilab.forge.jlatexmath.Atom muskip_macros(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> muskip_macros
    582:582:org.scilab.forge.jlatexmath.Atom nbsp_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> nbsp_macro
    962:982:org.scilab.forge.jlatexmath.Atom newcommand_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> newcommand_macro
    1016:1021:org.scilab.forge.jlatexmath.Atom newenvironment_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> newenvironment_macro
    726:728:org.scilab.forge.jlatexmath.Atom nolimits_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> nolimits_macro
    738:740:org.scilab.forge.jlatexmath.Atom normal_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> normal_macro
    578:578:org.scilab.forge.jlatexmath.Atom ogonek_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> ogonek_macro
    1775:1777:org.scilab.forge.jlatexmath.Atom oint_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> oint_macro
    1312:1312:org.scilab.forge.jlatexmath.Atom ovalbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> ovalbox_macro
    328:332:org.scilab.forge.jlatexmath.Atom over_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> over_macro
    644:644:org.scilab.forge.jlatexmath.Atom overbrace_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overbrace_macro
    652:652:org.scilab.forge.jlatexmath.Atom overbrack_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overbrack_macro
    596:596:org.scilab.forge.jlatexmath.Atom overleftarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overleftarrow_macro
    600:600:org.scilab.forge.jlatexmath.Atom overleftrightarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overleftrightarrow_macro
    664:664:org.scilab.forge.jlatexmath.Atom overline_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overline_macro
    660:660:org.scilab.forge.jlatexmath.Atom overparen_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overparen_macro
    592:592:org.scilab.forge.jlatexmath.Atom overrightarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overrightarrow_macro
    1053:1054:org.scilab.forge.jlatexmath.Atom overset_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overset_macro
    336:356:org.scilab.forge.jlatexmath.Atom overwithdelims_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> overwithdelims_macro
    1139:1139:org.scilab.forge.jlatexmath.Atom phantom_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> phantom_macro
    633:636:org.scilab.forge.jlatexmath.Atom prescript_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> prescript_macro
    1734:1734:org.scilab.forge.jlatexmath.Atom qquad_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> qquad_macro
    1730:1730:org.scilab.forge.jlatexmath.Atom quad_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> quad_macro
    1038:1039:org.scilab.forge.jlatexmath.Atom questeq_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> questeq_macro
    1291:1304:org.scilab.forge.jlatexmath.Atom raisebox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> raisebox_macro
    1476:1477:org.scilab.forge.jlatexmath.Atom ratio_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> ratio_macro
    1279:1279:org.scilab.forge.jlatexmath.Atom reflectbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> reflectbox_macro
    986:1002:org.scilab.forge.jlatexmath.Atom renewcommand_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> renewcommand_macro
    1025:1030:org.scilab.forge.jlatexmath.Atom renewenvironment_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> renewenvironment_macro
    1287:1287:org.scilab.forge.jlatexmath.Atom resizebox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> resizebox_macro
    1084:1084:org.scilab.forge.jlatexmath.Atom rm_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> rm_macro
    1839:1841:org.scilab.forge.jlatexmath.Atom rmoustache_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> rmoustache_macro
    1699:1714:org.scilab.forge.jlatexmath.Atom romannumeral_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> romannumeral_macro
    1275:1275:org.scilab.forge.jlatexmath.Atom rotatebox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> rotatebox_macro
    215:229:org.scilab.forge.jlatexmath.Atom rule_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> rule_macro
    1726:1726:org.scilab.forge.jlatexmath.Atom sc_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> sc_macro
    1283:1283:org.scilab.forge.jlatexmath.Atom scalebox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> scalebox_macro
    1270:1271:org.scilab.forge.jlatexmath.Atom scriptscriptstyle_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> scriptscriptstyle_macro
    1260:1261:org.scilab.forge.jlatexmath.Atom scriptstyle_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> scriptstyle_macro
    1116:1116:org.scilab.forge.jlatexmath.Atom sf_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> sf_macro
    260:290:org.scilab.forge.jlatexmath.Atom sfrac_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> sfrac_macro
    1308:1308:org.scilab.forge.jlatexmath.Atom shadowbox_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> shadowbox_macro
    956:958:org.scilab.forge.jlatexmath.Atom shoveleft_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> shoveleft_macro
    950:952:org.scilab.forge.jlatexmath.Atom shoveright_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> shoveright_macro
    624:629:org.scilab.forge.jlatexmath.Atom sideset_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> sideset_macro
    1505:1508:org.scilab.forge.jlatexmath.Atom simcolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> simcolon_macro
    1512:1517:org.scilab.forge.jlatexmath.Atom simcoloncolon_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> simcoloncolon_macro
    1436:1459:org.scilab.forge.jlatexmath.Atom size_macros(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> size_macros
    1624:1625:org.scilab.forge.jlatexmath.Atom smallfrowneq_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> smallfrowneq_macro
    813:817:org.scilab.forge.jlatexmath.Atom smallmatrixATATenv_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> smallmatrixATATenv_macro
    710:710:org.scilab.forge.jlatexmath.Atom smash_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> smash_macro
    165:168:org.scilab.forge.jlatexmath.Atom spATbreve_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> spATbreve_macro
    172:175:org.scilab.forge.jlatexmath.Atom spAThat_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> spAThat_macro
    586:588:org.scilab.forge.jlatexmath.Atom sqrt_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> sqrt_macro
    151:151:org.scilab.forge.jlatexmath.Atom st_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> st_macro
    1048:1049:org.scilab.forge.jlatexmath.Atom stackbin_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> stackbin_macro
    1043:1044:org.scilab.forge.jlatexmath.Atom stackrel_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> stackrel_macro
    1765:1765:org.scilab.forge.jlatexmath.Atom surd_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> surd_macro
    574:574:org.scilab.forge.jlatexmath.Atom tcaron_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> tcaron_macro
    492:492:org.scilab.forge.jlatexmath.Atom text_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> text_macro
    1718:1718:org.scilab.forge.jlatexmath.Atom textcircled_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> textcircled_macro
    1365:1365:org.scilab.forge.jlatexmath.Atom textcolor_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> textcolor_macro
    1722:1722:org.scilab.forge.jlatexmath.Atom textsc_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> textsc_macro
    1265:1266:org.scilab.forge.jlatexmath.Atom textstyle_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> textstyle_macro
    464:483:org.scilab.forge.jlatexmath.Atom textstyle_macros(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> textstyle_macros
    1100:1100:org.scilab.forge.jlatexmath.Atom tt_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> tt_macro
    1067:1067:org.scilab.forge.jlatexmath.Atom underaccent_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underaccent_macro
    640:640:org.scilab.forge.jlatexmath.Atom underbrace_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underbrace_macro
    648:648:org.scilab.forge.jlatexmath.Atom underbrack_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underbrack_macro
    608:608:org.scilab.forge.jlatexmath.Atom underleftarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underleftarrow_macro
    612:612:org.scilab.forge.jlatexmath.Atom underleftrightarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underleftrightarrow_macro
    668:668:org.scilab.forge.jlatexmath.Atom underline_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underline_macro
    656:656:org.scilab.forge.jlatexmath.Atom underparen_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underparen_macro
    604:604:org.scilab.forge.jlatexmath.Atom underrightarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underrightarrow_macro
    496:496:org.scilab.forge.jlatexmath.Atom underscore_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underscore_macro
    1058:1059:org.scilab.forge.jlatexmath.Atom underset_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> underset_macro
    1071:1072:org.scilab.forge.jlatexmath.Atom undertilde_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> undertilde_macro
    714:714:org.scilab.forge.jlatexmath.Atom vdots_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> vdots_macro
    1135:1135:org.scilab.forge.jlatexmath.Atom vphantom_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> vphantom_macro
    616:616:org.scilab.forge.jlatexmath.Atom xleftarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> xleftarrow_macro
    620:620:org.scilab.forge.jlatexmath.Atom xrightarrow_macro(org.scilab.forge.jlatexmath.TeXParser,java.lang.String[]) -> xrightarrow_macro
org.scilab.forge.jlatexmath.PredefinedCommands -> org.scilab.forge.jlatexmath.PredefinedCommands:
# {"id":"sourceFile","fileName":"PredefinedCommands.java"}
    53:337:void <clinit>() -> <clinit>
    50:50:void <init>() -> <init>
org.scilab.forge.jlatexmath.PredefinedTeXFormulas -> org.scilab.forge.jlatexmath.PredefinedTeXFormulas:
# {"id":"sourceFile","fileName":"PredefinedTeXFormulas.java"}
    53:178:void <clinit>() -> <clinit>
    50:50:void <init>() -> <init>
org.scilab.forge.jlatexmath.RaiseAtom -> org.scilab.forge.jlatexmath.RaiseAtom:
# {"id":"sourceFile","fileName":"RaiseAtom.java"}
    57:65:void <init>(org.scilab.forge.jlatexmath.Atom,int,float,int,float,int,float) -> <init>
    76:95:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    68:68:int getLeftType() -> getLeftType
    72:72:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.ReflectAtom -> org.scilab.forge.jlatexmath.ReflectAtom:
# {"id":"sourceFile","fileName":"ReflectAtom.java"}
    55:58:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    61:61:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.ReflectBox -> org.scilab.forge.jlatexmath.ReflectBox:
# {"id":"sourceFile","fileName":"ReflectBox.java"}
    57:63:void <init>(org.scilab.forge.jlatexmath.Box) -> <init>
    66:72:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    75:75:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.ResizeAtom -> org.scilab.forge.jlatexmath.ResizeAtom:
# {"id":"sourceFile","fileName":"ResizeAtom.java"}
    58:76:void <init>(org.scilab.forge.jlatexmath.Atom,java.lang.String,java.lang.String,boolean) -> <init>
    87:108:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    79:79:int getLeftType() -> getLeftType
    83:83:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.ResourceParseException -> org.scilab.forge.jlatexmath.ResourceParseException:
# {"id":"sourceFile","fileName":"ResourceParseException.java"}
    57:58:void <init>(java.lang.String) -> <init>
    61:62:void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.scilab.forge.jlatexmath.RomanAtom -> org.scilab.forge.jlatexmath.RomanAtom:
# {"id":"sourceFile","fileName":"RomanAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    61:69:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.RotateAtom -> org.scilab.forge.jlatexmath.RotateAtom:
# {"id":"sourceFile","fileName":"RotateAtom.java"}
    57:93:void <init>(org.scilab.forge.jlatexmath.Atom,double,java.lang.String) -> <init>
    96:99:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.RotateBox -> org.scilab.forge.jlatexmath.RotateBox:
# {"id":"sourceFile","fileName":"RotateBox.java"}
    69:93:void <init>(org.scilab.forge.jlatexmath.Box,double,float,float) -> <init>
    96:97:void <init>(org.scilab.forge.jlatexmath.Box,double,ru.noties.jlatexmath.awt.geom.Point2D$Float) -> <init>
    100:101:void <init>(org.scilab.forge.jlatexmath.Box,double,int) -> <init>
    141:194:ru.noties.jlatexmath.awt.geom.Point2D$Float calculateShift(org.scilab.forge.jlatexmath.Box,int) -> calculateShift
    198:206:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    209:209:int getLastFontId() -> getLastFontId
    104:137:int getOrigin(java.lang.String) -> getOrigin
org.scilab.forge.jlatexmath.Row -> org.scilab.forge.jlatexmath.Row:
# {"id":"sourceFile","fileName":"Row.java"}
org.scilab.forge.jlatexmath.RowAtom -> org.scilab.forge.jlatexmath.RowAtom:
# {"id":"sourceFile","fileName":"RowAtom.java"}
    80:96:void <clinit>() -> <clinit>
    64:100:void <init>() -> <init>
    64:110:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    121:124:void add(org.scilab.forge.jlatexmath.Atom) -> add
    134:143:void changeToOrd(org.scilab.forge.jlatexmath.Dummy,org.scilab.forge.jlatexmath.Dummy,org.scilab.forge.jlatexmath.Atom) -> changeToOrd
    146:254:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    113:117:org.scilab.forge.jlatexmath.Atom getLastAtom() -> getLastAtom
    262:265:int getLeftType() -> getLeftType
    270:273:int getRightType() -> getRightType
    258:259:void setPreviousAtom(org.scilab.forge.jlatexmath.Dummy) -> setPreviousAtom
org.scilab.forge.jlatexmath.RuleAtom -> org.scilab.forge.jlatexmath.RuleAtom:
# {"id":"sourceFile","fileName":"RuleAtom.java"}
    56:63:void <init>(int,float,int,float,int,float) -> <init>
    66:66:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.ScaleAtom -> org.scilab.forge.jlatexmath.ScaleAtom:
# {"id":"sourceFile","fileName":"ScaleAtom.java"}
    56:61:void <init>(org.scilab.forge.jlatexmath.Atom,double,double) -> <init>
    63:68:void <init>(org.scilab.forge.jlatexmath.Atom,double) -> <init>
    79:79:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    71:71:int getLeftType() -> getLeftType
    75:75:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.ScaleBox -> org.scilab.forge.jlatexmath.ScaleBox:
# {"id":"sourceFile","fileName":"ScaleBox.java"}
    58:66:void <init>(org.scilab.forge.jlatexmath.Box,double,double) -> <init>
    69:70:void <init>(org.scilab.forge.jlatexmath.Box,float) -> <init>
    73:82:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    85:85:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.ScriptsAtom -> org.scilab.forge.jlatexmath.ScriptsAtom:
# {"id":"sourceFile","fileName":"ScriptsAtom.java"}
    57:57:void <clinit>() -> <clinit>
    65:71:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom) -> <init>
    74:77:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,boolean) -> <init>
    80:217:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    223:223:int getLeftType() -> getLeftType
    227:227:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.ShadowAtom -> org.scilab.forge.jlatexmath.ShadowAtom:
# {"id":"sourceFile","fileName":"ShadowAtom.java"}
    54:55:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    58:58:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.ShadowBox -> org.scilab.forge.jlatexmath.ShadowBox:
# {"id":"sourceFile","fileName":"ShadowBox.java"}
    61:65:void <init>(org.scilab.forge.jlatexmath.FramedBox,float) -> <init>
    68:79:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    82:82:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.SmallCapAtom -> org.scilab.forge.jlatexmath.SmallCapAtom:
# {"id":"sourceFile","fileName":"SmallCapAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:64:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.SmashedAtom -> org.scilab.forge.jlatexmath.SmashedAtom:
# {"id":"sourceFile","fileName":"SmashedAtom.java"}
    54:62:void <init>(org.scilab.forge.jlatexmath.Atom,java.lang.String) -> <init>
    54:66:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    69:74:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.SpaceAtom -> org.scilab.forge.jlatexmath.SpaceAtom:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    60:84:void <clinit>() -> <clinit>
    188:190:void <init>() -> <init>
    192:195:void <init>(int) -> <init>
    197:208:void <init>(int,float,float,float) -> <init>
    218:220:void checkUnit(int) -> checkUnit
    268:285:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    290:290:float getFactor(int,org.scilab.forge.jlatexmath.TeXEnvironment) -> getFactor
    244:264:float[] getLength(java.lang.String) -> getLength
    239:240:int getUnit(java.lang.String) -> getUnit
org.scilab.forge.jlatexmath.SpaceAtom$1 -> org.scilab.forge.jlatexmath.SpaceAtom$1:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    86:86:void <init>() -> <init>
    88:88:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$10 -> org.scilab.forge.jlatexmath.SpaceAtom$10:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    141:141:void <init>() -> <init>
    143:143:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$11 -> org.scilab.forge.jlatexmath.SpaceAtom$11:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    147:147:void <init>() -> <init>
    149:149:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$12 -> org.scilab.forge.jlatexmath.SpaceAtom$12:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    153:153:void <init>() -> <init>
    155:155:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$13 -> org.scilab.forge.jlatexmath.SpaceAtom$13:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    159:159:void <init>() -> <init>
    161:161:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$14 -> org.scilab.forge.jlatexmath.SpaceAtom$14:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    165:165:void <init>() -> <init>
    167:167:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$2 -> org.scilab.forge.jlatexmath.SpaceAtom$2:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    92:92:void <init>() -> <init>
    94:94:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$3 -> org.scilab.forge.jlatexmath.SpaceAtom$3:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    98:98:void <init>() -> <init>
    100:100:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$4 -> org.scilab.forge.jlatexmath.SpaceAtom$4:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    104:104:void <init>() -> <init>
    106:106:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$5 -> org.scilab.forge.jlatexmath.SpaceAtom$5:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    110:110:void <init>() -> <init>
    112:112:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$6 -> org.scilab.forge.jlatexmath.SpaceAtom$6:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    116:116:void <init>() -> <init>
    118:119:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$7 -> org.scilab.forge.jlatexmath.SpaceAtom$7:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    123:123:void <init>() -> <init>
    125:125:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$8 -> org.scilab.forge.jlatexmath.SpaceAtom$8:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    129:129:void <init>() -> <init>
    131:131:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$9 -> org.scilab.forge.jlatexmath.SpaceAtom$9:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
    135:135:void <init>() -> <init>
    137:137:float getPixelConversion(org.scilab.forge.jlatexmath.TeXEnvironment) -> getPixelConversion
org.scilab.forge.jlatexmath.SpaceAtom$UnitConversion -> org.scilab.forge.jlatexmath.SpaceAtom$UnitConversion:
# {"id":"sourceFile","fileName":"SpaceAtom.java"}
org.scilab.forge.jlatexmath.SsAtom -> org.scilab.forge.jlatexmath.SsAtom:
# {"id":"sourceFile","fileName":"SsAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:64:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.StrikeThroughAtom -> org.scilab.forge.jlatexmath.StrikeThroughAtom:
# {"id":"sourceFile","fileName":"StrikeThroughAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:71:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.StrutBox -> org.scilab.forge.jlatexmath.StrutBox:
# {"id":"sourceFile","fileName":"StrutBox.java"}
    56:61:void <init>(float,float,float,float) -> <init>
    65:65:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    68:68:int getLastFontId() -> getLastFontId
org.scilab.forge.jlatexmath.StyleAtom -> org.scilab.forge.jlatexmath.StyleAtom:
# {"id":"sourceFile","fileName":"StyleAtom.java"}
    56:59:void <init>(int,org.scilab.forge.jlatexmath.Atom) -> <init>
    62:66:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.SymbolAtom -> org.scilab.forge.jlatexmath.SymbolAtom:
# {"id":"sourceFile","fileName":"SymbolAtom.java"}
    77:89:void <clinit>() -> <clinit>
    112:119:void <init>(java.lang.String,int,boolean) -> <init>
    141:143:void addSymbolAtom(java.io.InputStream,java.lang.String) -> addSymbolAtom
    178:199:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    158:162:org.scilab.forge.jlatexmath.SymbolAtom get(java.lang.String) -> get
    204:204:org.scilab.forge.jlatexmath.CharFont getCharFont(org.scilab.forge.jlatexmath.TeXFont) -> getCharFont
    174:174:java.lang.String getName() -> getName
    122:123:org.scilab.forge.jlatexmath.SymbolAtom setUnicode(char) -> setUnicode
org.scilab.forge.jlatexmath.SymbolMappingNotFoundException -> org.scilab.forge.jlatexmath.SymbolMappingNotFoundException:
# {"id":"sourceFile","fileName":"SymbolMappingNotFoundException.java"}
    59:62:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.SymbolNotFoundException -> org.scilab.forge.jlatexmath.SymbolNotFoundException:
# {"id":"sourceFile","fileName":"SymbolNotFoundException.java"}
    59:61:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.TStrokeAtom -> org.scilab.forge.jlatexmath.TStrokeAtom:
# {"id":"sourceFile","fileName":"TStrokeAtom.java"}
    55:57:void <init>(boolean) -> <init>
    60:75:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.TeXEnvironment -> org.scilab.forge.jlatexmath.TeXEnvironment:
# {"id":"sourceFile","fileName":"TeXEnvironment.java"}
    83:84:void <init>(int,org.scilab.forge.jlatexmath.TeXFont) -> <init>
    87:89:void <init>(int,org.scilab.forge.jlatexmath.TeXFont,int,float) -> <init>
    61:97:void <init>(int,org.scilab.forge.jlatexmath.TeXFont,ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color) -> <init>
    61:108:void <init>(int,float,org.scilab.forge.jlatexmath.TeXFont,ru.noties.jlatexmath.awt.Color,ru.noties.jlatexmath.awt.Color,java.lang.String,boolean) -> <init>
    136:136:org.scilab.forge.jlatexmath.TeXEnvironment copy() -> copy
    140:144:org.scilab.forge.jlatexmath.TeXEnvironment copy(org.scilab.forge.jlatexmath.TeXFont) -> copy
    151:153:org.scilab.forge.jlatexmath.TeXEnvironment crampStyle() -> crampStyle
    161:163:org.scilab.forge.jlatexmath.TeXEnvironment denomStyle() -> denomStyle
    171:171:ru.noties.jlatexmath.awt.Color getBackground() -> getBackground
    179:179:ru.noties.jlatexmath.awt.Color getColor() -> getColor
    116:116:float getInterline() -> getInterline
    307:307:int getLastFontId() -> getLastFontId
    132:132:float getScaleFactor() -> getScaleFactor
    187:187:float getSize() -> getSize
    217:217:boolean getSmallCap() -> getSmallCap
    298:298:float getSpace() -> getSpace
    195:195:int getStyle() -> getStyle
    229:229:org.scilab.forge.jlatexmath.TeXFont getTeXFont() -> getTeXFont
    206:206:java.lang.String getTextStyle() -> getTextStyle
    124:124:float getTextwidth() -> getTextwidth
    237:239:org.scilab.forge.jlatexmath.TeXEnvironment numStyle() -> numStyle
    247:249:void reset() -> reset
    256:258:org.scilab.forge.jlatexmath.TeXEnvironment rootStyle() -> rootStyle
    266:267:void setBackground(ru.noties.jlatexmath.awt.Color) -> setBackground
    274:275:void setColor(ru.noties.jlatexmath.awt.Color) -> setColor
    111:113:void setInterline(int,float) -> setInterline
    302:303:void setLastFontId(int) -> setLastFontId
    128:129:void setScaleFactor(float) -> setScaleFactor
    221:222:void setSmallCap(boolean) -> setSmallCap
    199:200:void setStyle(int) -> setStyle
    210:211:void setTextStyle(java.lang.String) -> setTextStyle
    282:284:org.scilab.forge.jlatexmath.TeXEnvironment subStyle() -> subStyle
    292:294:org.scilab.forge.jlatexmath.TeXEnvironment supStyle() -> supStyle
org.scilab.forge.jlatexmath.TeXFont -> org.scilab.forge.jlatexmath.TeXFont:
# {"id":"sourceFile","fileName":"TeXFont.java"}
org.scilab.forge.jlatexmath.TeXFormula -> org.scilab.forge.jlatexmath.TeXFormula:
# {"id":"sourceFile","fileName":"TeXFormula.java"}
    101:141:void <clinit>() -> <clinit>
    119:219:void <init>() -> <init>
    240:241:void <init>(java.lang.String) -> <init>
    119:247:void <init>(java.lang.String,boolean) -> <init>
    119:257:void <init>(java.lang.String,java.lang.String) -> <init>
    119:276:void <init>(org.scilab.forge.jlatexmath.TeXFormula) -> <init>
    294:295:void <init>(org.scilab.forge.jlatexmath.TeXParser,java.lang.String) -> <init>
    119:309:void <init>(org.scilab.forge.jlatexmath.TeXParser,java.lang.String,boolean) -> <init>
    119:331:void <init>(org.scilab.forge.jlatexmath.TeXParser,java.lang.String,java.lang.String) -> <init>
    119:349:void <init>(org.scilab.forge.jlatexmath.TeXParser,java.lang.String,java.lang.String,boolean,boolean) -> <init>
    89:89:org.scilab.forge.jlatexmath.DefaultTeXFont access$000(org.scilab.forge.jlatexmath.TeXFormula,float,int) -> access$000
    89:89:org.scilab.forge.jlatexmath.Box access$100(org.scilab.forge.jlatexmath.TeXFormula,org.scilab.forge.jlatexmath.TeXEnvironment) -> access$100
    416:435:org.scilab.forge.jlatexmath.TeXFormula add(org.scilab.forge.jlatexmath.Atom) -> add
    447:453:org.scilab.forge.jlatexmath.TeXFormula add(java.lang.String) -> add
    475:476:org.scilab.forge.jlatexmath.TeXFormula add(org.scilab.forge.jlatexmath.TeXFormula) -> add
    480:487:void addImpl(org.scilab.forge.jlatexmath.TeXFormula) -> addImpl
    154:157:void addSymbolMappings(java.io.InputStream,java.lang.String) -> addSymbolMappings
    461:465:org.scilab.forge.jlatexmath.TeXFormula append(boolean,java.lang.String) -> append
    574:577:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    581:601:org.scilab.forge.jlatexmath.DefaultTeXFont createFont(float,int) -> createFont
    986:1000:org.scilab.forge.jlatexmath.TeXFormula get(java.lang.String) -> get
    164:170:org.scilab.forge.jlatexmath.TeXFormula$FontInfos getExternalFont(java.lang.Character$UnicodeBlock) -> getExternalFont
    160:160:boolean isRegisteredBlock(java.lang.Character$UnicodeBlock) -> isRegisteredBlock
org.scilab.forge.jlatexmath.TeXFormula$FontInfos -> org.scilab.forge.jlatexmath.TeXFormula$FontInfos:
# {"id":"sourceFile","fileName":"TeXFormula.java"}
    1009:1012:void <init>(java.lang.String,java.lang.String) -> <init>
org.scilab.forge.jlatexmath.TeXFormula$TeXIconBuilder -> org.scilab.forge.jlatexmath.TeXFormula$TeXIconBuilder:
# {"id":"sourceFile","fileName":"TeXFormula.java"}
    609:618:void <init>(org.scilab.forge.jlatexmath.TeXFormula) -> <init>
    739:776:org.scilab.forge.jlatexmath.TeXIcon build() -> build
    658:659:org.scilab.forge.jlatexmath.TeXFormula$TeXIconBuilder setFGColor(ru.noties.jlatexmath.awt.Color) -> setFGColor
    638:639:org.scilab.forge.jlatexmath.TeXFormula$TeXIconBuilder setSize(float) -> setSize
    628:629:org.scilab.forge.jlatexmath.TeXFormula$TeXIconBuilder setStyle(int) -> setStyle
org.scilab.forge.jlatexmath.TeXFormulaSettingsParser -> org.scilab.forge.jlatexmath.TeXFormulaSettingsParser:
# {"id":"sourceFile","fileName":"TeXFormulaSettingsParser.java"}
    69:70:void <init>() -> <init>
    72:81:void <init>(java.io.InputStream,java.lang.String) -> <init>
    122:146:void addFormulaToMap(org.w3c.dom.NodeList,java.lang.String[],java.lang.String[]) -> addFormulaToMap
    96:119:void addToMap(org.w3c.dom.NodeList,java.lang.String[],java.lang.String[]) -> addToMap
    90:93:void parseSymbolMappings(java.lang.String[],java.lang.String[]) -> parseSymbolMappings
    84:87:void parseSymbolToFormulaMappings(java.lang.String[],java.lang.String[]) -> parseSymbolToFormulaMappings
org.scilab.forge.jlatexmath.TeXIcon -> org.scilab.forge.jlatexmath.TeXIcon:
# {"id":"sourceFile","fileName":"TeXIcon.java"}
    73:76:void <clinit>() -> <clinit>
    82:120:void <init>(org.scilab.forge.jlatexmath.Box,float,boolean) -> <init>
    195:195:int getIconHeight() -> getIconHeight
    210:210:int getIconWidth() -> getIconWidth
    245:275:void paintIcon(ru.noties.jlatexmath.awt.Component,ru.noties.jlatexmath.awt.Graphics,int,int) -> paintIcon
    123:124:void setForeground(ru.noties.jlatexmath.awt.Color) -> setForeground
    142:149:void setInsets(ru.noties.jlatexmath.awt.Insets,boolean) -> setInsets
    157:158:void setInsets(ru.noties.jlatexmath.awt.Insets) -> setInsets
org.scilab.forge.jlatexmath.TeXParser -> org.scilab.forge.jlatexmath.TeXParser:
# {"id":"sourceFile","fileName":"TeXParser.java"}
    124:134:void <clinit>() -> <clinit>
    144:145:void <init>(java.lang.String,org.scilab.forge.jlatexmath.TeXFormula) -> <init>
    156:159:void <init>(boolean,java.lang.String,org.scilab.forge.jlatexmath.TeXFormula) -> <init>
    69:184:void <init>(boolean,java.lang.String,org.scilab.forge.jlatexmath.TeXFormula,boolean) -> <init>
    194:195:void <init>(java.lang.String,org.scilab.forge.jlatexmath.TeXFormula,boolean) -> <init>
    207:209:void <init>(boolean,java.lang.String,org.scilab.forge.jlatexmath.ArrayOfAtoms,boolean) -> <init>
    221:223:void <init>(boolean,java.lang.String,org.scilab.forge.jlatexmath.ArrayOfAtoms,boolean,boolean) -> <init>
    247:249:void <init>(boolean,java.lang.String,org.scilab.forge.jlatexmath.TeXFormula,boolean,boolean) -> <init>
    322:323:void addAtom(org.scilab.forge.jlatexmath.Atom) -> addAtom
    392:395:void addRow() -> addRow
    1107:1191:org.scilab.forge.jlatexmath.Atom convertCharacter(char,boolean) -> convertCharacter
    1442:1486:char convertToRomanNumber(char) -> convertToRomanNumber
    385:386:void finish() -> finish
    398:653:void firstpass() -> firstpass
    989:1023:org.scilab.forge.jlatexmath.Atom getArgument() -> getArgument
    298:298:int getCol() -> getCol
    1196:1219:java.lang.String getCommand() -> getCommand
    1334:1365:java.lang.String getCommandWithArgs(java.lang.String) -> getCommandWithArgs
    843:856:java.lang.String getDollarGroup(char) -> getDollarGroup
    314:316:org.scilab.forge.jlatexmath.Atom getFormulaAtom() -> getFormulaAtom
    867:895:java.lang.String getGroup(char,char) -> getGroup
    906:981:java.lang.String getGroup(java.lang.String,java.lang.String) -> getGroup
    286:286:boolean getIsPartial() -> getIsPartial
    304:308:org.scilab.forge.jlatexmath.Atom getLastAtom() -> getLastAtom
    1085:1098:float[] getLength() -> getLength
    292:292:int getLine() -> getLine
    1264:1324:java.lang.String[] getOptsArgs(int,int) -> getOptsArgs
    1027:1081:java.lang.String getOverArgument() -> getOverArgument
    368:368:int getPos() -> getPos
    787:834:org.scilab.forge.jlatexmath.Atom getScripts(char) -> getScripts
    381:381:java.lang.String getStringFromCurrentPos() -> getStringFromCurrentPos
    1250:1254:void insert(int,int,java.lang.String) -> insert
    346:346:boolean isArrayMode() -> isArrayMode
    356:356:boolean isIgnoreWhiteSpace() -> isIgnoreWhiteSpace
    362:362:boolean isMathMode() -> isMathMode
    1421:1421:boolean isValidCharacterInCommand(char) -> isValidCharacterInCommand
    1395:1413:boolean isValidName(java.lang.String) -> isValidName
    328:329:void makeAtLetter() -> makeAtLetter
    334:335:void makeAtOther() -> makeAtOther
    659:784:void parse() -> parse
    1373:1387:org.scilab.forge.jlatexmath.Atom processCommands(java.lang.String) -> processCommands
    1223:1245:org.scilab.forge.jlatexmath.Atom processEscape() -> processEscape
    1426:1436:void skipWhiteSpace() -> skipWhiteSpace
org.scilab.forge.jlatexmath.TeXSymbolParser -> org.scilab.forge.jlatexmath.TeXSymbolParser:
# {"id":"sourceFile","fileName":"TeXSymbolParser.java"}
    68:68:void <clinit>() -> <clinit>
    73:74:void <init>() -> <init>
    76:87:void <init>(java.io.InputStream,java.lang.String) -> <init>
    126:130:java.lang.String getAttrValueAndCheckIfNotNull(java.lang.String,org.w3c.dom.Element) -> getAttrValueAndCheckIfNotNull
    90:110:java.util.Map readSymbols() -> readSymbols
    114:122:void setTypeMappings() -> setTypeMappings
org.scilab.forge.jlatexmath.TextCircledAtom -> org.scilab.forge.jlatexmath.TextCircledAtom:
# {"id":"sourceFile","fileName":"TextCircledAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:66:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.TextStyleAtom -> org.scilab.forge.jlatexmath.TextStyleAtom:
# {"id":"sourceFile","fileName":"TextStyleAtom.java"}
    56:59:void <init>(org.scilab.forge.jlatexmath.Atom,java.lang.String) -> <init>
    62:66:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.TextStyleMappingNotFoundException -> org.scilab.forge.jlatexmath.TextStyleMappingNotFoundException:
# {"id":"sourceFile","fileName":"TextStyleMappingNotFoundException.java"}
    59:62:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.TtAtom -> org.scilab.forge.jlatexmath.TtAtom:
# {"id":"sourceFile","fileName":"TtAtom.java"}
    55:57:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    60:64:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.TypedAtom -> org.scilab.forge.jlatexmath.TypedAtom:
# {"id":"sourceFile","fileName":"TypedAtom.java"}
    61:66:void <init>(int,int,org.scilab.forge.jlatexmath.Atom) -> <init>
    74:74:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    69:70:org.scilab.forge.jlatexmath.Atom getBase() -> getBase
    78:78:int getLeftType() -> getLeftType
    82:82:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.UnderOverArrowAtom -> org.scilab.forge.jlatexmath.UnderOverArrowAtom:
# {"id":"sourceFile","fileName":"UnderOverArrowAtom.java"}
    54:60:void <init>(org.scilab.forge.jlatexmath.Atom,boolean,boolean) -> <init>
    54:66:void <init>(org.scilab.forge.jlatexmath.Atom,boolean) -> <init>
    69:97:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.UnderOverAtom -> org.scilab.forge.jlatexmath.UnderOverAtom:
# {"id":"sourceFile","fileName":"UnderOverAtom.java"}
    75:100:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,int,float,boolean,boolean) -> <init>
    104:119:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,int,float,boolean,org.scilab.forge.jlatexmath.Atom,int,float,boolean) -> <init>
    170:173:org.scilab.forge.jlatexmath.Box changeWidth(org.scilab.forge.jlatexmath.Box,float) -> changeWidth
    123:166:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    177:177:int getLeftType() -> getLeftType
    181:181:int getRightType() -> getRightType
org.scilab.forge.jlatexmath.UnderlinedAtom -> org.scilab.forge.jlatexmath.UnderlinedAtom:
# {"id":"sourceFile","fileName":"UnderlinedAtom.java"}
    57:60:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    63:79:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.UnderscoreAtom -> org.scilab.forge.jlatexmath.UnderscoreAtom:
# {"id":"sourceFile","fileName":"UnderscoreAtom.java"}
    53:54:void <clinit>() -> <clinit>
    56:57:void <init>() -> <init>
    60:63:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.VCenteredAtom -> org.scilab.forge.jlatexmath.VCenteredAtom:
# {"id":"sourceFile","fileName":"VCenteredAtom.java"}
    58:60:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    63:72:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.VRowAtom -> org.scilab.forge.jlatexmath.VRowAtom:
# {"id":"sourceFile","fileName":"VRowAtom.java"}
    60:68:void <init>() -> <init>
    60:78:void <init>(org.scilab.forge.jlatexmath.Atom) -> <init>
    113:115:void add(org.scilab.forge.jlatexmath.Atom) -> add
    118:120:void append(org.scilab.forge.jlatexmath.Atom) -> append
    123:167:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    81:82:void setAddInterline(boolean) -> setAddInterline
    89:90:void setHalign(int) -> setHalign
    105:106:void setRaise(int,float) -> setRaise
    97:98:void setVtop(boolean) -> setVtop
org.scilab.forge.jlatexmath.VdotsAtom -> org.scilab.forge.jlatexmath.VdotsAtom:
# {"id":"sourceFile","fileName":"VdotsAtom.java"}
    53:53:void <init>() -> <init>
    56:68:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.VerticalBox -> org.scilab.forge.jlatexmath.VerticalBox:
# {"id":"sourceFile","fileName":"VerticalBox.java"}
    57:60:void <init>() -> <init>
    60:60:void <init>() -> <init>
    63:78:void <init>(org.scilab.forge.jlatexmath.Box,float,int) -> <init>
    81:88:void add(org.scilab.forge.jlatexmath.Box) -> add
    91:95:void add(org.scilab.forge.jlatexmath.Box,float) -> add
    104:111:void add(int,org.scilab.forge.jlatexmath.Box) -> add
    114:120:void draw(ru.noties.jlatexmath.awt.Graphics2D,float,float) -> draw
    129:134:int getLastFontId() -> getLastFontId
    123:123:int getSize() -> getSize
    98:101:void recalculateWidth(org.scilab.forge.jlatexmath.Box) -> recalculateWidth
org.scilab.forge.jlatexmath.VlineAtom -> org.scilab.forge.jlatexmath.VlineAtom:
# {"id":"sourceFile","fileName":"VlineAtom.java"}
    57:59:void <init>(int) -> <init>
    78:95:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    70:74:float getWidth(org.scilab.forge.jlatexmath.TeXEnvironment) -> getWidth
    62:63:void setHeight(float) -> setHeight
    66:67:void setShift(float) -> setShift
org.scilab.forge.jlatexmath.XArrowAtom -> org.scilab.forge.jlatexmath.XArrowAtom:
# {"id":"sourceFile","fileName":"XArrowAtom.java"}
    56:60:void <init>(org.scilab.forge.jlatexmath.Atom,org.scilab.forge.jlatexmath.Atom,boolean) -> <init>
    63:87:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
org.scilab.forge.jlatexmath.XLeftRightArrowFactory -> org.scilab.forge.jlatexmath.XLeftRightArrowFactory:
# {"id":"sourceFile","fileName":"XLeftRightArrowFactory.java"}
    54:56:void <clinit>() -> <clinit>
    59:96:org.scilab.forge.jlatexmath.Box create(boolean,org.scilab.forge.jlatexmath.TeXEnvironment,float) -> create
    100:130:org.scilab.forge.jlatexmath.Box create(org.scilab.forge.jlatexmath.TeXEnvironment,float) -> create
org.scilab.forge.jlatexmath.XMLResourceParseException -> org.scilab.forge.jlatexmath.XMLResourceParseException:
# {"id":"sourceFile","fileName":"XMLResourceParseException.java"}
    57:60:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    74:76:void <init>(java.lang.String,java.lang.String) -> <init>
    82:83:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
org.scilab.forge.jlatexmath.cyrillic.CyrillicRegistration -> org.scilab.forge.jlatexmath.cyrillic.CyrillicRegistration:
# {"id":"sourceFile","fileName":"CyrillicRegistration.java"}
    52:53:void <init>() -> <init>
    60:60:java.lang.Object getPackage() -> getPackage
    64:64:java.lang.String getTeXFontFileName() -> getTeXFontFileName
    56:56:java.lang.Character$UnicodeBlock[] getUnicodeBlock() -> getUnicodeBlock
org.scilab.forge.jlatexmath.dynamic.DynamicAtom -> org.scilab.forge.jlatexmath.dynamic.DynamicAtom:
# {"id":"sourceFile","fileName":"DynamicAtom.java"}
    65:78:void <init>(java.lang.String,java.lang.String) -> <init>
    106:117:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
    93:102:org.scilab.forge.jlatexmath.Atom getAtom() -> getAtom
    89:89:boolean getInsertMode() -> getInsertMode
    81:81:boolean hasAnExternalConverterFactory() -> hasAnExternalConverterFactory
org.scilab.forge.jlatexmath.dynamic.ExternalConverter -> org.scilab.forge.jlatexmath.dynamic.ExternalConverter:
# {"id":"sourceFile","fileName":"ExternalConverter.java"}
org.scilab.forge.jlatexmath.greek.GreekRegistration -> org.scilab.forge.jlatexmath.greek.GreekRegistration:
# {"id":"sourceFile","fileName":"GreekRegistration.java"}
    35:36:void <init>() -> <init>
    43:43:java.lang.Object getPackage() -> getPackage
    47:47:java.lang.String getTeXFontFileName() -> getTeXFontFileName
    39:39:java.lang.Character$UnicodeBlock[] getUnicodeBlock() -> getUnicodeBlock
org.scilab.forge.jlatexmath.tcaronAtom -> org.scilab.forge.jlatexmath.tcaronAtom:
# {"id":"sourceFile","fileName":"tcaronAtom.java"}
    53:54:void <init>() -> <init>
    57:62:org.scilab.forge.jlatexmath.Box createBox(org.scilab.forge.jlatexmath.TeXEnvironment) -> createBox
ru.noties.jlatexmath.JLatexMathAndroid -> ru.noties.jlatexmath.JLatexMathAndroid:
# {"id":"sourceFile","fileName":"JLatexMathAndroid.java"}
    17:17:void <clinit>() -> <clinit>
    40:44:android.content.Context context() -> context
    25:27:java.io.InputStream getResourceAsStream(java.lang.String) -> getResourceAsStream
    20:21:void init(android.content.Context) -> init
    33:33:android.graphics.Typeface loadTypeface(java.lang.String) -> loadTypeface
ru.noties.jlatexmath.JLatexMathDrawable -> ru.noties.jlatexmath.JLatexMathDrawable:
# {"id":"sourceFile","fileName":"JLatexMathDrawable.java"}
    54:76:void <init>(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> <init>
    41:41:ru.noties.jlatexmath.JLatexMathDrawable$Builder builder(java.lang.String) -> builder
    90:143:void draw(android.graphics.Canvas) -> draw
    167:167:int getIntrinsicHeight() -> getIntrinsicHeight
    162:162:int getIntrinsicWidth() -> getIntrinsicWidth
    157:157:int getOpacity() -> getOpacity
    175:175:org.scilab.forge.jlatexmath.TeXIcon icon() -> icon
    80:85:void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    148:148:void setAlpha(int) -> setAlpha
    153:153:void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
ru.noties.jlatexmath.JLatexMathDrawable$Builder -> ru.noties.jlatexmath.JLatexMathDrawable$Builder:
# {"id":"sourceFile","fileName":"JLatexMathDrawable.java"}
    184:191:void <init>(java.lang.String) -> <init>
    179:179:float access$000(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> access$000
    179:179:int access$100(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> access$100
    179:179:java.lang.String access$200(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> access$200
    179:179:ru.noties.jlatexmath.awt.Insets access$300(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> access$300
    179:179:int access$400(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> access$400
    179:179:android.graphics.drawable.Drawable access$500(ru.noties.jlatexmath.JLatexMathDrawable$Builder) -> access$500
    207:208:ru.noties.jlatexmath.JLatexMathDrawable$Builder align(int) -> align
    213:214:ru.noties.jlatexmath.JLatexMathDrawable$Builder background(android.graphics.drawable.Drawable) -> background
    246:246:ru.noties.jlatexmath.JLatexMathDrawable build() -> build
    201:202:ru.noties.jlatexmath.JLatexMathDrawable$Builder color(int) -> color
    241:241:ru.noties.jlatexmath.JLatexMathDrawable$Builder fitCanvas(boolean) -> fitCanvas
    231:232:ru.noties.jlatexmath.JLatexMathDrawable$Builder padding(int,int,int,int) -> padding
    195:196:ru.noties.jlatexmath.JLatexMathDrawable$Builder textSize(float) -> textSize
ru.noties.jlatexmath.JLatexMathInitProvider -> ru.noties.jlatexmath.JLatexMathInitProvider:
# {"id":"sourceFile","fileName":"JLatexMathInitProvider.java"}
    11:11:void <init>() -> <init>
    39:39:int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    28:28:java.lang.String getType(android.net.Uri) -> getType
    34:34:android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    15:16:boolean onCreate() -> onCreate
    22:22:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    44:44:int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
ru.noties.jlatexmath.JLatexMathView -> ru.noties.jlatexmath.JLatexMathView:
# {"id":"sourceFile","fileName":"JLatexMathView.java"}
    47:49:void <init>(android.content.Context) -> <init>
    52:54:void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    129:131:ru.noties.jlatexmath.JLatexMathView align(int,int) -> align
    239:246:float alignment(int,float) -> alignment
    123:124:ru.noties.jlatexmath.JLatexMathView background(android.graphics.drawable.Drawable) -> background
    58:107:void init(android.content.Context,android.util.AttributeSet) -> init
    251:276:void onDraw(android.graphics.Canvas) -> onDraw
    157:235:void onMeasure(int,int) -> onMeasure
    135:142:void setLatex(java.lang.String) -> setLatex
    145:147:void setLatexDrawable(ru.noties.jlatexmath.JLatexMathDrawable) -> setLatexDrawable
    117:118:ru.noties.jlatexmath.JLatexMathView textColor(int) -> textColor
    111:112:ru.noties.jlatexmath.JLatexMathView textSize(int) -> textSize
ru.noties.jlatexmath.android.R$styleable -> ru.noties.jlatexmath.android.R$styleable:
    0:0:void <clinit>() -> <clinit>
ru.noties.jlatexmath.awt.AndroidGraphics2D -> ru.noties.jlatexmath.awt.AndroidGraphics2D:
# {"id":"sourceFile","fileName":"AndroidGraphics2D.java"}
    13:23:void <init>() -> <init>
    99:107:void draw(ru.noties.jlatexmath.awt.geom.Rectangle2D$Float) -> draw
    140:148:void draw(ru.noties.jlatexmath.awt.geom.Line2D$Float) -> draw
    176:184:void draw(ru.noties.jlatexmath.awt.geom.RoundRectangle2D$Float) -> draw
    162:165:void drawArc(int,int,int,int,int,int) -> drawArc
    131:136:void drawChars(char[],int,int,int,int) -> drawChars
    52:59:void fill(ru.noties.jlatexmath.awt.geom.Rectangle2D$Float) -> fill
    169:172:void fillArc(int,int,int,int,int,int) -> fillArc
    38:41:ru.noties.jlatexmath.awt.Color getColor() -> getColor
    121:121:ru.noties.jlatexmath.awt.Font getFont() -> getFont
    204:204:ru.noties.jlatexmath.awt.RenderingHints getRenderingHints() -> getRenderingHints
    63:71:ru.noties.jlatexmath.awt.Stroke getStroke() -> getStroke
    85:86:ru.noties.jlatexmath.awt.geom.AffineTransform getTransform() -> getTransform
    152:153:void rotate(double) -> rotate
    157:158:void rotate(double,double,double) -> rotate
    116:117:void scale(double,double) -> scale
    32:34:void setCanvas(android.graphics.Canvas) -> setCanvas
    46:48:void setColor(ru.noties.jlatexmath.awt.Color) -> setColor
    126:127:void setFont(ru.noties.jlatexmath.awt.Font) -> setFont
    210:210:void setRenderingHint(ru.noties.jlatexmath.awt.RenderingHints$Key,java.lang.Object) -> setRenderingHint
    215:215:void setRenderingHints(ru.noties.jlatexmath.awt.RenderingHints) -> setRenderingHints
    76:81:void setStroke(ru.noties.jlatexmath.awt.Stroke) -> setStroke
    91:95:void setTransform(ru.noties.jlatexmath.awt.geom.AffineTransform) -> setTransform
    111:112:void translate(double,double) -> translate
ru.noties.jlatexmath.awt.BasicStroke -> ru.noties.jlatexmath.awt.BasicStroke:
# {"id":"sourceFile","fileName":"BasicStroke.java"}
    13:14:void <init>(float,int,int) -> <init>
    16:19:void <init>(float,int,int,float) -> <init>
    33:33:java.lang.String toString() -> toString
    23:23:float width() -> width
ru.noties.jlatexmath.awt.Color -> ru.noties.jlatexmath.awt.Color:
# {"id":"sourceFile","fileName":"Color.java"}
    5:15:void <clinit>() -> <clinit>
    23:25:void <init>(int) -> <init>
    28:29:void <init>(int,int,int) -> <init>
    32:37:void <init>(float,float,float) -> <init>
    18:18:ru.noties.jlatexmath.awt.Color decode(java.lang.String) -> decode
    56:56:int getColorInt() -> getColorInt
ru.noties.jlatexmath.awt.Component -> ru.noties.jlatexmath.awt.Component:
# {"id":"sourceFile","fileName":"Component.java"}
ru.noties.jlatexmath.awt.Font -> ru.noties.jlatexmath.awt.Font:
# {"id":"sourceFile","fileName":"Font.java"}
    34:35:void <init>(java.lang.String,int,int) -> <init>
    37:41:void <init>(android.graphics.Typeface,int,float) -> <init>
    45:52:android.graphics.Typeface applyStyle(android.graphics.Typeface,int) -> applyStyle
    26:26:ru.noties.jlatexmath.awt.Font createFont(android.graphics.Typeface,float) -> createFont
    81:85:android.graphics.Typeface createTypeface(java.lang.String,int) -> createTypeface
    56:56:ru.noties.jlatexmath.awt.Font deriveFont(int) -> deriveFont
    68:68:float size() -> size
    90:94:int toAndroidStyle(int) -> toAndroidStyle
    60:60:android.graphics.Typeface typeface() -> typeface
ru.noties.jlatexmath.awt.Graphics -> ru.noties.jlatexmath.awt.Graphics:
# {"id":"sourceFile","fileName":"Graphics.java"}
ru.noties.jlatexmath.awt.Graphics2D -> ru.noties.jlatexmath.awt.Graphics2D:
# {"id":"sourceFile","fileName":"Graphics2D.java"}
ru.noties.jlatexmath.awt.Insets -> ru.noties.jlatexmath.awt.Insets:
# {"id":"sourceFile","fileName":"Insets.java"}
    10:15:void <init>(int,int,int,int) -> <init>
ru.noties.jlatexmath.awt.RenderingHints -> ru.noties.jlatexmath.awt.RenderingHints:
# {"id":"sourceFile","fileName":"RenderingHints.java"}
    5:16:void <clinit>() -> <clinit>
ru.noties.jlatexmath.awt.RenderingHints$Key -> ru.noties.jlatexmath.awt.RenderingHints$Key:
# {"id":"sourceFile","fileName":"RenderingHints.java"}
ru.noties.jlatexmath.awt.Stroke -> ru.noties.jlatexmath.awt.Stroke:
# {"id":"sourceFile","fileName":"Stroke.java"}
ru.noties.jlatexmath.awt.font.FontRenderContext -> ru.noties.jlatexmath.awt.font.FontRenderContext:
# {"id":"sourceFile","fileName":"FontRenderContext.java"}
ru.noties.jlatexmath.awt.font.TextLayout -> ru.noties.jlatexmath.awt.font.TextLayout:
# {"id":"sourceFile","fileName":"TextLayout.java"}
    16:27:void <init>(java.lang.String,ru.noties.jlatexmath.awt.Font,ru.noties.jlatexmath.awt.font.FontRenderContext) -> <init>
    34:45:void draw(ru.noties.jlatexmath.awt.Graphics2D,int,int) -> draw
    30:30:ru.noties.jlatexmath.awt.geom.Rectangle2D getBounds() -> getBounds
ru.noties.jlatexmath.awt.geom.AffineTransform -> ru.noties.jlatexmath.awt.geom.AffineTransform:
# {"id":"sourceFile","fileName":"AffineTransform.java"}
    15:26:void <init>(ru.noties.jlatexmath.awt.geom.AffineTransform,android.graphics.Canvas) -> <init>
    7:7:java.lang.Object clone() -> clone
    89:93:ru.noties.jlatexmath.awt.geom.AffineTransform clone() -> clone
    10:10:ru.noties.jlatexmath.awt.geom.AffineTransform create(android.graphics.Canvas) -> create
    77:77:android.graphics.Canvas getCanvas() -> getCanvas
    48:48:double getScaleX() -> getScaleX
    52:52:double getScaleY() -> getScaleY
    37:44:ru.noties.jlatexmath.awt.geom.AffineTransform restore() -> restore
    29:33:ru.noties.jlatexmath.awt.geom.AffineTransform save() -> save
    56:58:void scale(double,double) -> scale
    67:69:void setScale(double,double) -> setScale
    72:74:void setTranslate(float,float) -> setTranslate
    62:64:void translate(float,float) -> translate
ru.noties.jlatexmath.awt.geom.Line2D$Float -> ru.noties.jlatexmath.awt.geom.Line2D$Float:
# {"id":"sourceFile","fileName":"Line2D.java"}
    12:14:void <init>() -> <init>
    21:25:void setLine(double,double,double,double) -> setLine
    29:29:java.lang.String toString() -> toString
ru.noties.jlatexmath.awt.geom.Point2D$Float -> ru.noties.jlatexmath.awt.geom.Point2D$Float:
# {"id":"sourceFile","fileName":"Point2D.java"}
    10:12:void <init>(float,float) -> <init>
ru.noties.jlatexmath.awt.geom.Rectangle2D -> ru.noties.jlatexmath.awt.geom.Rectangle2D:
# {"id":"sourceFile","fileName":"Rectangle2D.java"}
    3:3:void <init>() -> <init>
ru.noties.jlatexmath.awt.geom.Rectangle2D$Float -> ru.noties.jlatexmath.awt.geom.Rectangle2D$Float:
# {"id":"sourceFile","fileName":"Rectangle2D.java"}
    20:25:void <init>(float,float,float,float) -> <init>
    34:34:float getHeight() -> getHeight
    39:39:float getWidth() -> getWidth
    44:44:float getX() -> getX
    29:29:float getY() -> getY
    49:49:java.lang.String toString() -> toString
ru.noties.jlatexmath.awt.geom.RoundRectangle2D$Float -> ru.noties.jlatexmath.awt.geom.RoundRectangle2D$Float:
# {"id":"sourceFile","fileName":"RoundRectangle2D.java"}
    19:26:void <init>(float,float,float,float,float,float) -> <init>
    30:30:java.lang.String toString() -> toString
